

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 21 19:25:15 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	smallconst
    84  001000                     __psmallconst:
    85                           	opt stack 0
    86  001000  00                 	db	0
    87  001001                     exp@coeff:
    88                           	opt stack 0
    89  001001  00                 	db	0
    90  001002  80                 	db	128
    91  001003  3F                 	db	63
    92  001004  72                 	db	114
    93  001005  31                 	db	49
    94  001006  3F                 	db	63
    95  001007  FE                 	db	254
    96  001008  75                 	db	117
    97  001009  3E                 	db	62
    98  00100A  58                 	db	88
    99  00100B  63                 	db	99
   100  00100C  3D                 	db	61
   101  00100D  95                 	db	149
   102  00100E  1D                 	db	29
   103  00100F  3C                 	db	60
   104  001010  C5                 	db	197
   105  001011  AE                 	db	174
   106  001012  3A                 	db	58
   107  001013  79                 	db	121
   108  001014  21                 	db	33
   109  001015  39                 	db	57
   110  001016  94                 	db	148
   111  001017  80                 	db	128
   112  001018  37                 	db	55
   113  001019  93                 	db	147
   114  00101A  A7                 	db	167
   115  00101B  35                 	db	53
   116  00101C  56                 	db	86
   117  00101D  15                 	db	21
   118  00101E  34                 	db	52
   119  00101F                     __end_ofexp@coeff:
   120                           	opt stack 0
   121  00101F                     log@coeff:
   122                           	opt stack 0
   123  00101F  00                 	db	0
   124  001020  00                 	db	0
   125  001021  00                 	db	0
   126  001022  00                 	db	0
   127  001023  80                 	db	128
   128  001024  3F                 	db	63
   129  001025  F0                 	db	240
   130  001026  FF                 	db	255
   131  001027  BE                 	db	190
   132  001028  E2                 	db	226
   133  001029  A9                 	db	169
   134  00102A  3E                 	db	62
   135  00102B  83                 	db	131
   136  00102C  76                 	db	118
   137  00102D  BE                 	db	190
   138  00102E  AE                 	db	174
   139  00102F  2B                 	db	43
   140  001030  3E                 	db	62
   141  001031  3C                 	db	60
   142  001032  C3                 	db	195
   143  001033  BD                 	db	189
   144  001034  D2                 	db	210
   145  001035  13                 	db	19
   146  001036  3D                 	db	61
   147  001037  78                 	db	120
   148  001038  D3                 	db	211
   149  001039  BB                 	db	187
   150  00103A                     __end_oflog@coeff:
   151                           	opt stack 0
   152  00103A  00                 	db	0	; dummy byte at the end
   153  0000                     
   154                           	psect	nvCOMRAM
   155  000046                     __pnvCOMRAM:
   156                           	opt stack 0
   157  000046                     _sensor_readings_ptr:
   158                           	opt stack 0
   159  000046                     	ds	2
   160  0000                     _ADCON0	set	4034
   161  0000                     _ADCON0bits	set	4034
   162  0000                     _ADCON1	set	4033
   163  0000                     _ADCON2	set	4032
   164  0000                     _ADRESH	set	4036
   165  0000                     _ADRESL	set	4035
   166  0000                     _CCP4CON	set	3955
   167  0000                     _CCP5CON	set	3952
   168  0000                     _CCPR4L	set	3956
   169  0000                     _CCPR5L	set	3953
   170  0000                     _INTCON2bits	set	4081
   171  0000                     _INTCONbits	set	4082
   172  0000                     _IPR1bits	set	3999
   173  0000                     _LATDbits	set	3980
   174  0000                     _LATE	set	3981
   175  0000                     _LATEbits	set	3981
   176  0000                     _LATJ	set	3985
   177  0000                     _PIE1bits	set	3997
   178  0000                     _PIR1bits	set	3998
   179  0000                     _PORTBbits	set	3969
   180  0000                     _PR2	set	4043
   181  0000                     _PR4	set	3959
   182  0000                     _RCONbits	set	4048
   183  0000                     _T0CON	set	4053
   184  0000                     _T0CONbits	set	4053
   185  0000                     _T1CONbits	set	4045
   186  0000                     _T2CON	set	4042
   187  0000                     _T2CONbits	set	4042
   188  0000                     _T3CONbits	set	4017
   189  0000                     _T4CONbits	set	3958
   190  0000                     _TMR0H	set	4055
   191  0000                     _TMR0L	set	4054
   192  0000                     _TMR2	set	4044
   193  0000                     _TRISA	set	3986
   194  0000                     _TRISB	set	3987
   195  0000                     _TRISC	set	3988
   196  0000                     _TRISD	set	3989
   197  0000                     _TRISE	set	3990
   198  0000                     _TRISG	set	3992
   199  0000                     _TRISGbits	set	3992
   200  0000                     _TRISJ	set	3994
   201                           
   202                           ; #config settings
   203  0000                     
   204                           	psect	cinit
   205  002CCA                     __pcinit:
   206                           	opt stack 0
   207  002CCA                     start_initialization:
   208                           	opt stack 0
   209  002CCA                     __initialization:
   210                           	opt stack 0
   211                           
   212                           ; Clear objects allocated to BANK0 (32 bytes)
   213  002CCA  EE00  F0C1         	lfsr	0,__pbssBANK0
   214  002CCE  0E20               	movlw	32
   215  002CD0                     clear_0:
   216  002CD0  6AEE               	clrf	postinc0,c
   217  002CD2  06E8               	decf	wreg,f,c
   218  002CD4  E1FD               	bnz	clear_0
   219                           
   220                           ; Clear objects allocated to COMRAM (30 bytes)
   221  002CD6  EE00  F028         	lfsr	0,__pbssCOMRAM
   222  002CDA  0E1E               	movlw	30
   223  002CDC                     clear_1:
   224  002CDC  6AEE               	clrf	postinc0,c
   225  002CDE  06E8               	decf	wreg,f,c
   226  002CE0  E1FD               	bnz	clear_1
   227  002CE2                     end_of_initialization:
   228                           	opt stack 0
   229  002CE2                     __end_of__initialization:
   230                           	opt stack 0
   231  002CE2  0100               	movlb	0
   232  002CE4  EF3E  F00B         	goto	_main	;jump to C main() function
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  000028                     __pbssCOMRAM:
   238                           	opt stack 0
   239  000028                     _SystemClock:
   240                           	opt stack 0
   241  000028                     	ds	6
   242  00002E                     _sensor_status:
   243                           	opt stack 0
   244  00002E                     	ds	5
   245  000033                     _millisecond_COUNT:
   246                           	opt stack 0
   247  000033                     	ds	2
   248  000035                     _sensor_threshold:
   249                           	opt stack 0
   250  000035                     	ds	2
   251  000037                     _echo_acq_done:
   252                           	opt stack 0
   253  000037                     	ds	1
   254  000038                     _second_rollover_flag:
   255                           	opt stack 0
   256  000038                     	ds	1
   257  000039                     _sensor_acq_done:
   258                           	opt stack 0
   259  000039                     	ds	1
   260  00003A                     _sensor_acq_index:
   261                           	opt stack 0
   262  00003A                     	ds	1
   263  00003B                     _system_clock_enable:
   264                           	opt stack 0
   265  00003B                     	ds	1
   266  00003C                     _sensor_readings_raw:
   267                           	opt stack 0
   268  00003C                     	ds	10
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssBANK0
   273  0000C1                     __pbssBANK0:
   274                           	opt stack 0
   275  0000C1                     _sensor_offsets:
   276                           	opt stack 0
   277  0000C1                     	ds	10
   278  0000CB                     _sensor_readings_normalised:
   279                           	opt stack 0
   280  0000CB                     	ds	10
   281  0000D5                     _convert_cm:
   282                           	opt stack 0
   283  0000D5                     	ds	3
   284  0000D8                     _convert_in:
   285                           	opt stack 0
   286  0000D8                     	ds	3
   287  0000DB                     _PID_output:
   288                           	opt stack 0
   289  0000DB                     	ds	2
   290  0000DD                     _errno:
   291                           	opt stack 0
   292  0000DD                     	ds	2
   293  0000DF                     _PID_error:
   294                           	opt stack 0
   295  0000DF                     	ds	2
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           	psect	cstackBANK0
   300  000060                     __pcstackBANK0:
   301                           	opt stack 0
   302  000060                     ??_SetChanADC:
   303  000060                     ??_Delay10KTCYx:
   304  000060                     ??_NormaliseSensorReadings:
   305  000060                     ??_CalculateSensorStatuses:
   306  000060                     ?_ReadADC:
   307                           	opt stack 0
   308  000060                     ?_ReadMillis:
   309                           	opt stack 0
   310  000060                     ?_CalculateSensorError:
   311                           	opt stack 0
   312  000060                     ?___wmul:
   313                           	opt stack 0
   314  000060                     ?___ftpack:
   315                           	opt stack 0
   316  000060                     ?_frexp:
   317                           	opt stack 0
   318  000060                     ?___ftneg:
   319                           	opt stack 0
   320  000060                     OpenADC@config2:
   321                           	opt stack 0
   322  000060                     OpenPWM4@period:
   323                           	opt stack 0
   324  000060                     OpenPWM5@period:
   325                           	opt stack 0
   326  000060                     OpenTimer0@config:
   327                           	opt stack 0
   328  000060                     OpenTimer2@config:
   329                           	opt stack 0
   330  000060                     SetDCPWM4@dutycycle:
   331                           	opt stack 0
   332  000060                     SetDCPWM5@dutycycle:
   333                           	opt stack 0
   334  000060                     WriteTimer0@timer0:
   335                           	opt stack 0
   336  000060                     ___wmul@multiplier:
   337                           	opt stack 0
   338  000060                     ___ftpack@arg:
   339                           	opt stack 0
   340  000060                     ___ftge@ff1:
   341                           	opt stack 0
   342  000060                     ___ftneg@f1:
   343                           	opt stack 0
   344  000060                     frexp@value:
   345                           	opt stack 0
   346                           
   347                           ; 3 bytes @ 0x0
   348  000060                     	ds	1
   349  000061                     OpenADC@portconfig:
   350                           	opt stack 0
   351  000061                     SetChanADC@channel:
   352                           	opt stack 0
   353  000061                     Delay10KTCYx@unit:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x1
   357  000061                     	ds	1
   358  000062                     ??_OpenADC:
   359  000062                     ??_ReadADC:
   360  000062                     ??_SetDCPWM5:
   361  000062                     ??_SetDCPWM4:
   362  000062                     SetADCChannel@channel:
   363                           	opt stack 0
   364  000062                     CalculateSensorError@sum:
   365                           	opt stack 0
   366  000062                     WriteTimer0@timer:
   367                           	opt stack 0
   368  000062                     ___wmul@multiplicand:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x2
   372  000062                     	ds	1
   373  000063                     ??_CalibrateSensors:
   374  000063                     CalculateSensorStatuses@index:
   375                           	opt stack 0
   376  000063                     ___ftpack@exp:
   377                           	opt stack 0
   378  000063                     frexp@eptr:
   379                           	opt stack 0
   380  000063                     ___ftge@ff2:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x3
   384  000063                     	ds	1
   385  000064                     NormaliseSensorReadings@index:
   386                           	opt stack 0
   387  000064                     OpenADC@config:
   388                           	opt stack 0
   389  000064                     ___ftpack@sign:
   390                           	opt stack 0
   391  000064                     SetDCPWM4@DCycle:
   392                           	opt stack 0
   393  000064                     SetDCPWM5@DCycle:
   394                           	opt stack 0
   395  000064                     ___wmul@product:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x4
   399  000064                     	ds	1
   400  000065                     ??___ftpack:
   401  000065                     ??_frexp:
   402  000065                     ??_CalibrateLine:
   403  000065                     CalibrateSensors@index:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x5
   407  000065                     	ds	1
   408  000066                     ??___ftge:
   409  000066                     SetDCMotorL@duty_cycle:
   410                           	opt stack 0
   411  000066                     SetDCMotorR@duty_cycle:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x6
   415  000066                     	ds	2
   416  000068                     ?___ftdiv:
   417                           	opt stack 0
   418  000068                     ?___awtoft:
   419                           	opt stack 0
   420  000068                     ?___lbtoft:
   421                           	opt stack 0
   422  000068                     ?___lltoft:
   423                           	opt stack 0
   424  000068                     CalibrateLine@index:
   425                           	opt stack 0
   426  000068                     SetDCMotorPID@PIDoutput:
   427                           	opt stack 0
   428  000068                     ___awtoft@c:
   429                           	opt stack 0
   430  000068                     ___ftdiv@f1:
   431                           	opt stack 0
   432  000068                     ___lltoft@c:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x8
   436  000068                     	ds	2
   437  00006A                     ??_SetDCMotorPID:
   438                           
   439                           ; 0 bytes @ 0xA
   440  00006A                     	ds	1
   441  00006B                     ___awtoft@sign:
   442                           	opt stack 0
   443  00006B                     ___lbtoft@c:
   444                           	opt stack 0
   445  00006B                     ___ftdiv@f2:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0xB
   449  00006B                     	ds	1
   450  00006C                     ??___lltoft:
   451  00006C                     ?___ftmul:
   452                           	opt stack 0
   453  00006C                     ___ftmul@f1:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0xC
   457  00006C                     	ds	2
   458  00006E                     ??___ftdiv:
   459                           
   460                           ; 0 bytes @ 0xE
   461  00006E                     	ds	1
   462  00006F                     ___ftmul@f2:
   463                           	opt stack 0
   464                           
   465                           ; 3 bytes @ 0xF
   466  00006F                     	ds	1
   467  000070                     ___lltoft@exp:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x10
   471  000070                     	ds	1
   472  000071                     ___ftdiv@cntr:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x11
   476  000071                     	ds	1
   477  000072                     ??___ftmul:
   478  000072                     ___ftdiv@f3:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x12
   482  000072                     	ds	3
   483  000075                     ___ftdiv@exp:
   484                           	opt stack 0
   485  000075                     ___ftmul@exp:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x15
   489  000075                     	ds	1
   490  000076                     ___ftdiv@sign:
   491                           	opt stack 0
   492  000076                     ___ftmul@f3_as_product:
   493                           	opt stack 0
   494                           
   495                           ; 3 bytes @ 0x16
   496  000076                     	ds	3
   497  000079                     ___ftmul@cntr:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x19
   501  000079                     	ds	1
   502  00007A                     ___ftmul@sign:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x1A
   506  00007A                     	ds	1
   507  00007B                     ?___ftadd:
   508                           	opt stack 0
   509  00007B                     ?___fttol:
   510                           	opt stack 0
   511  00007B                     ___ftadd@f1:
   512                           	opt stack 0
   513  00007B                     ___fttol@f1:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x1B
   517  00007B                     	ds	3
   518  00007E                     ___ftadd@f2:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x1E
   522  00007E                     	ds	1
   523  00007F                     ??___fttol:
   524                           
   525                           ; 0 bytes @ 0x1F
   526  00007F                     	ds	2
   527  000081                     ??___ftadd:
   528                           
   529                           ; 0 bytes @ 0x21
   530  000081                     	ds	3
   531  000084                     ___ftadd@sign:
   532                           	opt stack 0
   533  000084                     ___fttol@sign1:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x24
   537  000084                     	ds	1
   538  000085                     ___ftadd@exp2:
   539                           	opt stack 0
   540  000085                     ___fttol@lval:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x25
   544  000085                     	ds	1
   545  000086                     ___ftadd@exp1:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x26
   549  000086                     	ds	1
   550  000087                     ?___ftsub:
   551                           	opt stack 0
   552  000087                     ?_eval_poly:
   553                           	opt stack 0
   554  000087                     ___ftsub@f1:
   555                           	opt stack 0
   556  000087                     eval_poly@x:
   557                           	opt stack 0
   558                           
   559                           ; 3 bytes @ 0x27
   560  000087                     	ds	2
   561  000089                     ___fttol@exp1:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x29
   565  000089                     	ds	1
   566  00008A                     ?___altoft:
   567                           	opt stack 0
   568  00008A                     eval_poly@d:
   569                           	opt stack 0
   570  00008A                     ___ftsub@f2:
   571                           	opt stack 0
   572  00008A                     ___altoft@c:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x2A
   576  00008A                     	ds	2
   577  00008C                     eval_poly@n:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x2C
   581  00008C                     	ds	1
   582  00008D                     
   583                           ; 0 bytes @ 0x2D
   584  00008D                     	ds	1
   585  00008E                     ??_eval_poly:
   586  00008E                     ??___altoft:
   587                           
   588                           ; 0 bytes @ 0x2E
   589  00008E                     	ds	2
   590  000090                     eval_poly@res:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x30
   594  000090                     	ds	2
   595  000092                     ___altoft@exp:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x32
   599  000092                     	ds	1
   600  000093                     ?_log:
   601                           	opt stack 0
   602  000093                     ?_ldexp:
   603                           	opt stack 0
   604  000093                     ___altoft@sign:
   605                           	opt stack 0
   606  000093                     ldexp@value:
   607                           	opt stack 0
   608  000093                     log@x:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x33
   612  000093                     	ds	1
   613  000094                     ?_floor:
   614                           	opt stack 0
   615  000094                     floor@x:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x34
   619  000094                     	ds	2
   620  000096                     ldexp@newexp:
   621                           	opt stack 0
   622  000096                     log@exponent:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x36
   626  000096                     	ds	1
   627  000097                     floor@i:
   628                           	opt stack 0
   629                           
   630                           ; 3 bytes @ 0x37
   631  000097                     	ds	1
   632  000098                     ??_ldexp:
   633                           
   634                           ; 0 bytes @ 0x38
   635  000098                     	ds	2
   636  00009A                     floor@expon:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x3A
   640  00009A                     	ds	2
   641  00009C                     ?_exp:
   642                           	opt stack 0
   643  00009C                     exp@x:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x3C
   647  00009C                     	ds	3
   648  00009F                     _exp$2808:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x3F
   652  00009F                     	ds	3
   653  0000A2                     exp@exponent:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x42
   657  0000A2                     	ds	2
   658  0000A4                     exp@sign:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x44
   662  0000A4                     	ds	1
   663  0000A5                     ?_pow:
   664                           	opt stack 0
   665  0000A5                     pow@x:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x45
   669  0000A5                     	ds	3
   670  0000A8                     pow@y:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x48
   674  0000A8                     	ds	3
   675  0000AB                     _pow$2806:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x4B
   679  0000AB                     	ds	3
   680  0000AE                     _pow$2807:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x4E
   684  0000AE                     	ds	3
   685  0000B1                     pow@sign:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x51
   689  0000B1                     	ds	1
   690  0000B2                     pow@yi:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x52
   694  0000B2                     	ds	4
   695  0000B6                     _CalculateSensorSums$2805:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x56
   699  0000B6                     	ds	3
   700  0000B9                     CalculateSensorSums@sum:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x59
   704  0000B9                     	ds	1
   705  0000BA                     CalculateSensorSums@index:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x5A
   709  0000BA                     	ds	1
   710  0000BB                     ??_main:
   711                           
   712                           ; 0 bytes @ 0x5B
   713  0000BB                     	ds	3
   714  0000BE                     main@sensor_sum:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x5E
   718  0000BE                     	ds	2
   719  0000C0                     main@index:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x60
   723  0000C0                     	ds	1
   724                           postinc0	equ	0xFEE
   725                           wreg	equ	0xFE8
   726                           
   727                           	psect	cstackCOMRAM
   728  000001                     __pcstackCOMRAM:
   729                           	opt stack 0
   730  000001                     ??i1_SetChanADC:
   731  000001                     ?i1_ReadADC:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x0
   735  000001                     	ds	1
   736  000002                     i1SetChanADC@channel:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x1
   740  000002                     	ds	1
   741  000003                     ??i1_ReadADC:
   742  000003                     i1SetADCChannel@channel:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x2
   746  000003                     	ds	2
   747  000005                     ??_isrLP:
   748                           
   749                           ; 0 bytes @ 0x4
   750  000005                     	ds	17
   751  000016                     i2WriteTimer0@timer0:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x15
   755  000016                     	ds	2
   756  000018                     i2WriteTimer0@timer:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x17
   760  000018                     	ds	2
   761  00001A                     ??_isrHP:
   762                           
   763                           ; 0 bytes @ 0x19
   764  00001A                     	ds	14
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           
   768 ;;
   769 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   770 ;;
   771 ;; *************** function _main *****************
   772 ;; Defined at:
   773 ;;		line 553 in file "FastBuggy17_Main_Code.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  sensor_sum      2   94[BANK0 ] int 
   778 ;;  index           1   96[BANK0 ] unsigned char 
   779 ;; Return value:  Size  Location     Type
   780 ;;		None               void
   781 ;; Registers used:
   782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   792 ;;Total ram usage:        6 bytes
   793 ;; Hardware stack levels required when called:   12
   794 ;; This function calls:
   795 ;;		_BusySensorAcq
   796 ;;		_CalculateSensorError
   797 ;;		_CalculateSensorStatuses
   798 ;;		_CalculateSensorSums
   799 ;;		_CalibrateLine
   800 ;;		_CalibrateSensors
   801 ;;		_ChangeMode
   802 ;;		_ConfigureADC
   803 ;;		_ConfigureBuggyIO
   804 ;;		_ConfigureInterrupts
   805 ;;		_ConfigurePWM
   806 ;;		_ConfigureTimer0
   807 ;;		_ConfigureTimer2
   808 ;;		_Delay10KTCYx
   809 ;;		_EnableMotors
   810 ;;		_EnableSensorLEDS
   811 ;;		_GetSensorReadings
   812 ;;		_NormaliseSensorReadings
   813 ;;		_ReadMillis
   814 ;;		_ResetMillis
   815 ;;		_SetDCMotorL
   816 ;;		_SetDCMotorPID
   817 ;;		_SetDCMotorR
   818 ;;		_SetDirectionForward
   819 ;;		_SetUnipolar
   820 ;;		___wmul
   821 ;; This function is called by:
   822 ;;		Startup code after reset
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text0
   827  00167C                     __ptext0:
   828                           	opt stack 0
   829  00167C                     _main:
   830                           	opt stack 19
   831                           
   832                           ;FastBuggy17_Main_Code.c: 556: unsigned char index;
   833                           ;FastBuggy17_Main_Code.c: 557: int sensor_sum;
   834                           ;FastBuggy17_Main_Code.c: 560: sensor_readings_ptr = sensor_readings_raw;
   835                           
   836                           ;incstack = 0
   837  00167C  0E3C               	movlw	low _sensor_readings_raw
   838  00167E  6E46               	movwf	_sensor_readings_ptr,c
   839  001680  0E00               	movlw	high _sensor_readings_raw
   840  001682  6E47               	movwf	_sensor_readings_ptr+1,c
   841                           
   842                           ;FastBuggy17_Main_Code.c: 564: ConfigureBuggyIO();
   843  001684  EC92  F016         	call	_ConfigureBuggyIO	;wreg free
   844                           
   845                           ;FastBuggy17_Main_Code.c: 565: ConfigureInterrupts();
   846  001688  ECCC  F016         	call	_ConfigureInterrupts	;wreg free
   847                           
   848                           ;FastBuggy17_Main_Code.c: 566: ConfigureTimer0();
   849  00168C  ECAB  F016         	call	_ConfigureTimer0	;wreg free
   850                           
   851                           ;FastBuggy17_Main_Code.c: 567: ConfigureTimer2();
   852  001690  EC36  F017         	call	_ConfigureTimer2	;wreg free
   853                           
   854                           ;FastBuggy17_Main_Code.c: 568: ConfigurePWM();
   855  001694  EC23  F017         	call	_ConfigurePWM	;wreg free
   856                           
   857                           ;FastBuggy17_Main_Code.c: 569: ConfigureADC();
   858  001698  ECD6  F016         	call	_ConfigureADC	;wreg free
   859                           
   860                           ;FastBuggy17_Main_Code.c: 571: EnableSensorLEDS();
   861  00169C  EC40  F017         	call	_EnableSensorLEDS	;wreg free
   862                           
   863                           ;FastBuggy17_Main_Code.c: 573: PID_error = 0;
   864  0016A0  0E00               	movlw	0
   865  0016A2  0100               	movlb	0	; () banked
   866  0016A4  6FE0               	movwf	(_PID_error+1)& (0+255),b
   867  0016A6  0E00               	movlw	0
   868  0016A8  6FDF               	movwf	_PID_error& (0+255),b
   869                           
   870                           ; BSR set to: 0
   871                           ;FastBuggy17_Main_Code.c: 574: PID_output = 0;
   872  0016AA  0E00               	movlw	0
   873  0016AC  0100               	movlb	0	; () banked
   874  0016AE  6FDC               	movwf	(_PID_output+1)& (0+255),b
   875  0016B0  0E00               	movlw	0
   876  0016B2  6FDB               	movwf	_PID_output& (0+255),b
   877                           
   878                           ; BSR set to: 0
   879                           ;FastBuggy17_Main_Code.c: 576: LATJ = 0x00;
   880  0016B4  0E00               	movlw	0
   881  0016B6  6E91               	movwf	3985,c	;volatile
   882                           
   883                           ;FastBuggy17_Main_Code.c: 578: while(PORTBbits.RB1 == 0) {
   884  0016B8  D006               	goto	l4232
   885  0016BA                     l4228:
   886                           
   887                           ;FastBuggy17_Main_Code.c: 580: CalibrateSensors();
   888  0016BA  EC85  F014         	call	_CalibrateSensors	;wreg free
   889                           
   890                           ;FastBuggy17_Main_Code.c: 581: Delay10KTCYx(10);
   891  0016BE  0E0A               	movlw	10
   892  0016C0  EC74  F016         	call	_Delay10KTCYx
   893  0016C4  D000               	goto	l4232
   894  0016C6                     l4232:
   895  0016C6  A281               	btfss	3969,1,c	;volatile
   896  0016C8  D7F8               	goto	l4228
   897                           
   898                           ;FastBuggy17_Main_Code.c: 583: }
   899                           ;FastBuggy17_Main_Code.c: 585: ChangeMode();
   900  0016CA  EC07  F016         	call	_ChangeMode	;wreg free
   901                           
   902                           ;FastBuggy17_Main_Code.c: 587: while(PORTBbits.RB1 == 0) {
   903  0016CE  D006               	goto	l4240
   904  0016D0                     l4236:
   905                           
   906                           ;FastBuggy17_Main_Code.c: 589: CalibrateLine();
   907  0016D0  EC42  F013         	call	_CalibrateLine	;wreg free
   908                           
   909                           ;FastBuggy17_Main_Code.c: 590: Delay10KTCYx(10);
   910  0016D4  0E0A               	movlw	10
   911  0016D6  EC74  F016         	call	_Delay10KTCYx
   912  0016DA  D000               	goto	l4240
   913  0016DC                     l4240:
   914  0016DC  A281               	btfss	3969,1,c	;volatile
   915  0016DE  D7F8               	goto	l4236
   916                           
   917                           ;FastBuggy17_Main_Code.c: 592: }
   918                           ;FastBuggy17_Main_Code.c: 594: ChangeMode();
   919  0016E0  EC07  F016         	call	_ChangeMode	;wreg free
   920                           
   921                           ;FastBuggy17_Main_Code.c: 596: SetUnipolar();
   922  0016E4  EC3A  F017         	call	_SetUnipolar	;wreg free
   923                           
   924                           ;FastBuggy17_Main_Code.c: 597: SetDCMotorL(500);
   925  0016E8  0E01               	movlw	1
   926  0016EA  0100               	movlb	0	; () banked
   927  0016EC  6F67               	movwf	(SetDCMotorL@duty_cycle+1)& (0+255),b
   928  0016EE  0EF4               	movlw	244
   929  0016F0  6F66               	movwf	SetDCMotorL@duty_cycle& (0+255),b
   930  0016F2  EC1C  F017         	call	_SetDCMotorL	;wreg free
   931                           
   932                           ;FastBuggy17_Main_Code.c: 598: SetDCMotorR(500);
   933  0016F6  0E01               	movlw	1
   934  0016F8  0100               	movlb	0	; () banked
   935  0016FA  6F67               	movwf	(SetDCMotorR@duty_cycle+1)& (0+255),b
   936  0016FC  0EF4               	movlw	244
   937  0016FE  6F66               	movwf	SetDCMotorR@duty_cycle& (0+255),b
   938  001700  EC15  F017         	call	_SetDCMotorR	;wreg free
   939                           
   940                           ;FastBuggy17_Main_Code.c: 599: EnableMotors();
   941  001704  EC43  F017         	call	_EnableMotors	;wreg free
   942                           
   943                           ;FastBuggy17_Main_Code.c: 600: SetDirectionForward();
   944  001708  EC3D  F017         	call	_SetDirectionForward	;wreg free
   945  00170C  D000               	goto	l4254
   946  00170E                     l4254:
   947                           
   948                           ;FastBuggy17_Main_Code.c: 605: GetSensorReadings();
   949  00170E  ECB6  F016         	call	_GetSensorReadings	;wreg free
   950                           
   951                           ;FastBuggy17_Main_Code.c: 607: while(BusySensorAcq());
   952  001712  D000               	goto	l4256
   953  001714                     l4256:
   954  001714  EC05  F017         	call	_BusySensorAcq	;wreg free
   955  001718  0900               	iorlw	0
   956  00171A  A4D8               	btfss	status,2,c
   957  00171C  D7FB               	goto	l4256
   958                           
   959                           ;FastBuggy17_Main_Code.c: 609: NormaliseSensorReadings();
   960  00171E  EC10  F014         	call	_NormaliseSensorReadings	;wreg free
   961                           
   962                           ;FastBuggy17_Main_Code.c: 611: CalculateSensorStatuses();
   963  001722  ECBE  F014         	call	_CalculateSensorStatuses	;wreg free
   964                           
   965                           ;FastBuggy17_Main_Code.c: 612: sensor_sum = CalculateSensorSums();
   966  001726  EC9E  F012         	call	_CalculateSensorSums	;wreg free
   967  00172A  0100               	movlb	0	; () banked
   968  00172C  6FBB               	movwf	??_main& (0+255),b
   969  00172E  0100               	movlb	0	; () banked
   970  001730  51BB               	movf	??_main& (0+255),w,b
   971  001732  0100               	movlb	0	; () banked
   972  001734  6FBE               	movwf	main@sensor_sum& (0+255),b
   973  001736  6BBF               	clrf	(main@sensor_sum+1)& (0+255),b
   974                           
   975                           ; BSR set to: 0
   976                           ;FastBuggy17_Main_Code.c: 615: PID_error = CalculateSensorError(sensor_sum);
   977  001738  0100               	movlb	0	; () banked
   978  00173A  51BE               	movf	main@sensor_sum& (0+255),w,b
   979  00173C  ECEE  F011         	call	_CalculateSensorError
   980  001740  C060  F0DF         	movff	?_CalculateSensorError,_PID_error
   981  001744  C061  F0E0         	movff	?_CalculateSensorError+1,_PID_error+1
   982                           
   983                           ;FastBuggy17_Main_Code.c: 616: PID_output = 10 * PID_error;
   984  001748  C0DF  F060         	movff	_PID_error,___wmul@multiplier
   985  00174C  C0E0  F061         	movff	_PID_error+1,___wmul@multiplier+1
   986  001750  0E00               	movlw	0
   987  001752  0100               	movlb	0	; () banked
   988  001754  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   989  001756  0E0A               	movlw	10
   990  001758  6F62               	movwf	___wmul@multiplicand& (0+255),b
   991  00175A  ECBB  F015         	call	___wmul	;wreg free
   992  00175E  C060  F0DB         	movff	?___wmul,_PID_output
   993  001762  C061  F0DC         	movff	?___wmul+1,_PID_output+1
   994                           
   995                           ;FastBuggy17_Main_Code.c: 618: SetDCMotorPID(PID_output);
   996  001766  C0DB  F068         	movff	_PID_output,SetDCMotorPID@PIDoutput
   997  00176A  C0DC  F069         	movff	_PID_output+1,SetDCMotorPID@PIDoutput+1
   998  00176E  ECF6  F014         	call	_SetDCMotorPID	;wreg free
   999                           
  1000                           ;FastBuggy17_Main_Code.c: 620: for (index = 0; index < 5; index++) {
  1001  001772  0E00               	movlw	0
  1002  001774  0100               	movlb	0	; () banked
  1003  001776  6FC0               	movwf	main@index& (0+255),b
  1004  001778                     l4270:
  1005                           
  1006                           ; BSR set to: 0
  1007  001778  0E04               	movlw	4
  1008  00177A  0100               	movlb	0	; () banked
  1009  00177C  65C0               	cpfsgt	main@index& (0+255),b
  1010  00177E  D001               	goto	l4274
  1011                           
  1012                           ; BSR set to: 0
  1013  001780  D02A               	goto	l4282
  1014  001782                     l4274:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;FastBuggy17_Main_Code.c: 621: if (sensor_readings_normalised[index] > sensor_threshold)
      +                           {
  1018  001782  0100               	movlb	0	; () banked
  1019  001784  51C0               	movf	main@index& (0+255),w,b
  1020  001786  0D02               	mullw	2
  1021  001788  0ECB               	movlw	low _sensor_readings_normalised
  1022  00178A  24F3               	addwf	prodl,w,c
  1023  00178C  6ED9               	movwf	fsr2l,c
  1024  00178E  0E00               	movlw	high _sensor_readings_normalised
  1025  001790  20F4               	addwfc	prodh,w,c
  1026  001792  6EDA               	movwf	fsr2h,c
  1027  001794  50DE               	movf	postinc2,w,c
  1028  001796  5C35               	subwf	_sensor_threshold,w,c
  1029  001798  5036               	movf	_sensor_threshold+1,w,c
  1030  00179A  0A80               	xorlw	128
  1031  00179C  0100               	movlb	0	; () banked
  1032  00179E  6FBD               	movwf	(??_main+2)& (0+255),b
  1033  0017A0  50DE               	movf	postinc2,w,c
  1034  0017A2  0A80               	xorlw	128
  1035  0017A4  0100               	movlb	0	; () banked
  1036  0017A6  59BD               	subwfb	(??_main+2)& (0+255),w,b
  1037  0017A8  B0D8               	btfsc	status,0,c
  1038  0017AA  D012               	goto	l4278
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;FastBuggy17_Main_Code.c: 622: LATJ |= (1 << index);
  1042  0017AC  C0C0  F0BB         	movff	main@index,??_main
  1043  0017B0  0E01               	movlw	1
  1044  0017B2  0100               	movlb	0	; () banked
  1045  0017B4  6FBC               	movwf	(??_main+1)& (0+255),b
  1046  0017B6  0100               	movlb	0	; () banked
  1047  0017B8  2BBB               	incf	??_main& (0+255),f,b
  1048  0017BA  D003               	goto	u3664
  1049  0017BC                     u3665:
  1050  0017BC  0100               	movlb	0	; () banked
  1051  0017BE  90D8               	bcf	status,0,c
  1052  0017C0  37BC               	rlcf	(??_main+1)& (0+255),f,b
  1053  0017C2                     u3664:
  1054  0017C2  0100               	movlb	0	; () banked
  1055  0017C4  2FBB               	decfsz	??_main& (0+255),f,b
  1056  0017C6  D7FA               	goto	u3665
  1057  0017C8  0100               	movlb	0	; () banked
  1058  0017CA  51BC               	movf	(??_main+1)& (0+255),w,b
  1059  0017CC  1291               	iorwf	3985,f,c	;volatile
  1060  0017CE  D000               	goto	l4278
  1061  0017D0                     l4278:
  1062                           
  1063                           ; BSR set to: 0
  1064  0017D0  0100               	movlb	0	; () banked
  1065  0017D2  2BC0               	incf	main@index& (0+255),f,b
  1066  0017D4  D7D1               	goto	l4270
  1067  0017D6                     l4282:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;FastBuggy17_Main_Code.c: 623: }
  1071                           ;FastBuggy17_Main_Code.c: 624: }
  1072                           ;FastBuggy17_Main_Code.c: 626: ResetMillis();
  1073  0017D6  EC9F  F016         	call	_ResetMillis	;wreg free
  1074                           
  1075                           ;FastBuggy17_Main_Code.c: 627: while(ReadMillis() < 5);
  1076  0017DA  D000               	goto	l4284
  1077  0017DC                     l4284:
  1078  0017DC  EC31  F017         	call	_ReadMillis	;wreg free
  1079  0017E0  0100               	movlb	0	; () banked
  1080  0017E2  5161               	movf	(?_ReadMillis+1)& (0+255),w,b
  1081  0017E4  E107               	bnz	l4286
  1082  0017E6  0E05               	movlw	5
  1083  0017E8  0100               	movlb	0	; () banked
  1084  0017EA  5D60               	subwf	?_ReadMillis& (0+255),w,b
  1085  0017EC  B0D8               	btfsc	status,0,c
  1086  0017EE  D002               	goto	l4286
  1087  0017F0  D7F5               	goto	l4284
  1088  0017F2  D000               	goto	l4286
  1089  0017F4                     l4286:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;FastBuggy17_Main_Code.c: 628: LATJ = 0x00;
  1093  0017F4  0E00               	movlw	0
  1094  0017F6  6E91               	movwf	3985,c	;volatile
  1095                           
  1096                           ; BSR set to: 0
  1097  0017F8  D78A               	goto	l4254
  1098                           
  1099                           ; BSR set to: 0
  1100                           
  1101                           ; BSR set to: 0
  1102  0017FA  EF70  F000         	goto	start
  1103  0017FE                     __end_of_main:
  1104                           	opt stack 0
  1105                           prodh	equ	0xFF4
  1106                           prodl	equ	0xFF3
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           postinc2	equ	0xFDE
  1110                           fsr2h	equ	0xFDA
  1111                           fsr2l	equ	0xFD9
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function _SetUnipolar *****************
  1115 ;; Defined at:
  1116 ;;		line 86 in file "Motors.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;		None               void
  1123 ;; Registers used:
  1124 ;;		None
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    6
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text1
  1145  002E74                     __ptext1:
  1146                           	opt stack 0
  1147  002E74                     _SetUnipolar:
  1148                           	opt stack 24
  1149                           
  1150                           ;Motors.c: 88: LATDbits.LATD2 = 0;
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;incstack = 0
  1154  002E74  948C               	bcf	3980,2,c	;volatile
  1155                           
  1156                           ;Motors.c: 89: LATDbits.LATD0 = 0;
  1157  002E76  908C               	bcf	3980,0,c	;volatile
  1158  002E78  0012               	return		;funcret
  1159  002E7A                     __end_of_SetUnipolar:
  1160                           	opt stack 0
  1161                           prodh	equ	0xFF4
  1162                           prodl	equ	0xFF3
  1163                           postinc0	equ	0xFEE
  1164                           wreg	equ	0xFE8
  1165                           postinc2	equ	0xFDE
  1166                           fsr2h	equ	0xFDA
  1167                           fsr2l	equ	0xFD9
  1168                           status	equ	0xFD8
  1169                           
  1170 ;; *************** function _SetDirectionForward *****************
  1171 ;; Defined at:
  1172 ;;		line 29 in file "Motors.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;		None               void
  1179 ;; Registers used:
  1180 ;;		None
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    6
  1193 ;; This function calls:
  1194 ;;		Nothing
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text2
  1201  002E7A                     __ptext2:
  1202                           	opt stack 0
  1203  002E7A                     _SetDirectionForward:
  1204                           	opt stack 24
  1205                           
  1206                           ;Motors.c: 31: LATDbits.LATD1 = 1;
  1207                           
  1208                           ;incstack = 0
  1209  002E7A  828C               	bsf	3980,1,c	;volatile
  1210                           
  1211                           ;Motors.c: 32: LATDbits.LATD3 = 1;
  1212  002E7C  868C               	bsf	3980,3,c	;volatile
  1213  002E7E  0012               	return		;funcret
  1214  002E80                     __end_of_SetDirectionForward:
  1215                           	opt stack 0
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           postinc2	equ	0xFDE
  1221                           fsr2h	equ	0xFDA
  1222                           fsr2l	equ	0xFD9
  1223                           status	equ	0xFD8
  1224                           
  1225 ;; *************** function _SetDCMotorPID *****************
  1226 ;; Defined at:
  1227 ;;		line 16 in file "Motors.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  PIDoutput       2    8[BANK0 ] int 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;		None               void
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1241 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;Total ram usage:        4 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    8
  1248 ;; This function calls:
  1249 ;;		_SetDCMotorL
  1250 ;;		_SetDCMotorR
  1251 ;; This function is called by:
  1252 ;;		_main
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text3
  1257  0029EC                     __ptext3:
  1258                           	opt stack 0
  1259  0029EC                     _SetDCMotorPID:
  1260                           	opt stack 22
  1261                           
  1262                           ;Motors.c: 18: if(PIDoutput < 0) {
  1263                           
  1264                           ;incstack = 0
  1265  0029EC  0100               	movlb	0	; () banked
  1266  0029EE  AF69               	btfss	(SetDCMotorPID@PIDoutput+1)& (0+255),7,b
  1267  0029F0  D01D               	goto	l4186
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;Motors.c: 19: SetDCMotorL(425 - PIDoutput);
  1271  0029F2  C068  F06A         	movff	SetDCMotorPID@PIDoutput,??_SetDCMotorPID
  1272  0029F6  C069  F06B         	movff	SetDCMotorPID@PIDoutput+1,??_SetDCMotorPID+1
  1273  0029FA  0100               	movlb	0	; () banked
  1274  0029FC  1F6A               	comf	??_SetDCMotorPID& (0+255),f,b
  1275  0029FE  1F6B               	comf	(??_SetDCMotorPID+1)& (0+255),f,b
  1276  002A00  4B6A               	infsnz	??_SetDCMotorPID& (0+255),f,b
  1277  002A02  2B6B               	incf	(??_SetDCMotorPID+1)& (0+255),f,b
  1278  002A04  0EA9               	movlw	169
  1279  002A06  0100               	movlb	0	; () banked
  1280  002A08  256A               	addwf	??_SetDCMotorPID& (0+255),w,b
  1281  002A0A  0100               	movlb	0	; () banked
  1282  002A0C  6F66               	movwf	SetDCMotorL@duty_cycle& (0+255),b
  1283  002A0E  0E01               	movlw	1
  1284  002A10  0100               	movlb	0	; () banked
  1285  002A12  216B               	addwfc	(??_SetDCMotorPID+1)& (0+255),w,b
  1286  002A14  0100               	movlb	0	; () banked
  1287  002A16  6F67               	movwf	(SetDCMotorL@duty_cycle+1)& (0+255),b
  1288  002A18  EC1C  F017         	call	_SetDCMotorL	;wreg free
  1289                           
  1290                           ;Motors.c: 20: SetDCMotorR(425);
  1291  002A1C  0E01               	movlw	1
  1292  002A1E  0100               	movlb	0	; () banked
  1293  002A20  6F67               	movwf	(SetDCMotorR@duty_cycle+1)& (0+255),b
  1294  002A22  0EA9               	movlw	169
  1295  002A24  6F66               	movwf	SetDCMotorR@duty_cycle& (0+255),b
  1296  002A26  EC15  F017         	call	_SetDCMotorR	;wreg free
  1297                           
  1298                           ;Motors.c: 21: }
  1299  002A2A  D014               	goto	l348
  1300  002A2C                     l4186:
  1301                           
  1302                           ;Motors.c: 22: else {
  1303                           ;Motors.c: 23: SetDCMotorL(425);
  1304  002A2C  0E01               	movlw	1
  1305  002A2E  0100               	movlb	0	; () banked
  1306  002A30  6F67               	movwf	(SetDCMotorL@duty_cycle+1)& (0+255),b
  1307  002A32  0EA9               	movlw	169
  1308  002A34  6F66               	movwf	SetDCMotorL@duty_cycle& (0+255),b
  1309  002A36  EC1C  F017         	call	_SetDCMotorL	;wreg free
  1310                           
  1311                           ;Motors.c: 24: SetDCMotorR(425 + PIDoutput);
  1312  002A3A  0EA9               	movlw	169
  1313  002A3C  0100               	movlb	0	; () banked
  1314  002A3E  2568               	addwf	SetDCMotorPID@PIDoutput& (0+255),w,b
  1315  002A40  0100               	movlb	0	; () banked
  1316  002A42  6F66               	movwf	SetDCMotorR@duty_cycle& (0+255),b
  1317  002A44  0E01               	movlw	1
  1318  002A46  0100               	movlb	0	; () banked
  1319  002A48  2169               	addwfc	(SetDCMotorPID@PIDoutput+1)& (0+255),w,b
  1320  002A4A  0100               	movlb	0	; () banked
  1321  002A4C  6F67               	movwf	(SetDCMotorR@duty_cycle+1)& (0+255),b
  1322  002A4E  EC15  F017         	call	_SetDCMotorR	;wreg free
  1323  002A52  D000               	goto	l348
  1324  002A54                     l348:
  1325  002A54  0012               	return		;funcret
  1326  002A56                     __end_of_SetDCMotorPID:
  1327                           	opt stack 0
  1328                           prodh	equ	0xFF4
  1329                           prodl	equ	0xFF3
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postinc2	equ	0xFDE
  1333                           fsr2h	equ	0xFDA
  1334                           fsr2l	equ	0xFD9
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _SetDCMotorR *****************
  1338 ;; Defined at:
  1339 ;;		line 10 in file "Motors.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  duty_cycle      2    6[BANK0 ] unsigned int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;		None               void
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        2 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:    7
  1360 ;; This function calls:
  1361 ;;		_SetDCPWM4
  1362 ;; This function is called by:
  1363 ;;		_main
  1364 ;;		_SetDCMotorPID
  1365 ;;		_StopMotors
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           	psect	text4
  1370  002E2A                     __ptext4:
  1371                           	opt stack 0
  1372  002E2A                     _SetDCMotorR:
  1373                           	opt stack 23
  1374                           
  1375                           ;Motors.c: 12: SetDCPWM4(duty_cycle);
  1376                           
  1377                           ;incstack = 0
  1378  002E2A  C066  F060         	movff	SetDCMotorR@duty_cycle,SetDCPWM4@dutycycle
  1379  002E2E  C067  F061         	movff	SetDCMotorR@duty_cycle+1,SetDCPWM4@dutycycle+1
  1380  002E32  EC77  F015         	call	_SetDCPWM4	;wreg free
  1381  002E36  0012               	return		;funcret
  1382  002E38                     __end_of_SetDCMotorR:
  1383                           	opt stack 0
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postinc2	equ	0xFDE
  1389                           fsr2h	equ	0xFDA
  1390                           fsr2l	equ	0xFD9
  1391                           status	equ	0xFD8
  1392                           
  1393 ;; *************** function _SetDCPWM4 *****************
  1394 ;; Defined at:
  1395 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\PWM\pw4setdc.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  1400 ;; Return value:  Size  Location     Type
  1401 ;;		None               void
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;Total ram usage:        6 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    6
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_SetDCMotorR
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text5
  1424  002AEE                     __ptext5:
  1425                           	opt stack 0
  1426  002AEE                     _SetDCPWM4:
  1427                           	opt stack 23
  1428                           
  1429                           ;incstack = 0
  1430  002AEE  C060  F062         	movff	SetDCPWM4@dutycycle,??_SetDCPWM4
  1431  002AF2  C061  F063         	movff	SetDCPWM4@dutycycle+1,??_SetDCPWM4+1
  1432  002AF6  0E06               	movlw	6
  1433  002AF8                     u3155:
  1434  002AF8  90D8               	bcf	status,0,c
  1435  002AFA  0100               	movlb	0	; () banked
  1436  002AFC  3762               	rlcf	??_SetDCPWM4& (0+255),f,b
  1437  002AFE  3763               	rlcf	(??_SetDCPWM4+1)& (0+255),f,b
  1438  002B00  2EE8               	decfsz	wreg,f,c
  1439  002B02  D7FA               	goto	u3155
  1440  002B04  C062  F064         	movff	??_SetDCPWM4,SetDCPWM4@DCycle
  1441  002B08  C063  F065         	movff	??_SetDCPWM4+1,SetDCPWM4@DCycle+1
  1442                           
  1443                           ; BSR set to: 0
  1444  002B0C  C065  FF74         	movff	SetDCPWM4@DCycle+1,3956	;volatile
  1445  002B10  C064  F062         	movff	SetDCPWM4@DCycle,??_SetDCPWM4
  1446  002B14  0100               	movlb	0	; () banked
  1447  002B16  90D8               	bcf	status,0,c
  1448  002B18  3362               	rrcf	??_SetDCPWM4& (0+255),f,b
  1449  002B1A  0100               	movlb	0	; () banked
  1450  002B1C  90D8               	bcf	status,0,c
  1451  002B1E  3362               	rrcf	??_SetDCPWM4& (0+255),f,b
  1452  002B20  0E30               	movlw	48
  1453  002B22  0100               	movlb	0	; () banked
  1454  002B24  1762               	andwf	??_SetDCPWM4& (0+255),f,b
  1455  002B26  5073               	movf	3955,w,c	;volatile
  1456  002B28  0BCF               	andlw	207
  1457  002B2A  0100               	movlb	0	; () banked
  1458  002B2C  1162               	iorwf	??_SetDCPWM4& (0+255),w,b
  1459  002B2E  6E73               	movwf	3955,c	;volatile
  1460                           
  1461                           ; BSR set to: 0
  1462  002B30  0012               	return		;funcret
  1463  002B32                     __end_of_SetDCPWM4:
  1464                           	opt stack 0
  1465                           prodh	equ	0xFF4
  1466                           prodl	equ	0xFF3
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           postinc2	equ	0xFDE
  1470                           fsr2h	equ	0xFDA
  1471                           fsr2l	equ	0xFD9
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _SetDCMotorL *****************
  1475 ;; Defined at:
  1476 ;;		line 4 in file "Motors.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  duty_cycle      2    6[BANK0 ] unsigned int 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;		None               void
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1490 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;Total ram usage:        2 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    7
  1497 ;; This function calls:
  1498 ;;		_SetDCPWM5
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;;		_SetDCMotorPID
  1502 ;;		_StopMotors
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text6
  1507  002E38                     __ptext6:
  1508                           	opt stack 0
  1509  002E38                     _SetDCMotorL:
  1510                           	opt stack 22
  1511                           
  1512                           ;Motors.c: 6: SetDCPWM5(duty_cycle);
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;incstack = 0
  1516  002E38  C066  F060         	movff	SetDCMotorL@duty_cycle,SetDCPWM5@dutycycle
  1517  002E3C  C067  F061         	movff	SetDCMotorL@duty_cycle+1,SetDCPWM5@dutycycle+1
  1518  002E40  EC99  F015         	call	_SetDCPWM5	;wreg free
  1519  002E44  0012               	return		;funcret
  1520  002E46                     __end_of_SetDCMotorL:
  1521                           	opt stack 0
  1522                           prodh	equ	0xFF4
  1523                           prodl	equ	0xFF3
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           postinc2	equ	0xFDE
  1527                           fsr2h	equ	0xFDA
  1528                           fsr2l	equ	0xFD9
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _SetDCPWM5 *****************
  1532 ;; Defined at:
  1533 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\PWM\pw5setdc.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  dutycycle       2    0[BANK0 ] unsigned int 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  DCycle          2    4[BANK0 ] struct PWMDC
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;Total ram usage:        6 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    6
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_SetDCMotorL
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text7
  1562  002B32                     __ptext7:
  1563                           	opt stack 0
  1564  002B32                     _SetDCPWM5:
  1565                           	opt stack 22
  1566                           
  1567                           ;incstack = 0
  1568  002B32  C060  F062         	movff	SetDCPWM5@dutycycle,??_SetDCPWM5
  1569  002B36  C061  F063         	movff	SetDCPWM5@dutycycle+1,??_SetDCPWM5+1
  1570  002B3A  0E06               	movlw	6
  1571  002B3C                     u3145:
  1572  002B3C  90D8               	bcf	status,0,c
  1573  002B3E  0100               	movlb	0	; () banked
  1574  002B40  3762               	rlcf	??_SetDCPWM5& (0+255),f,b
  1575  002B42  3763               	rlcf	(??_SetDCPWM5+1)& (0+255),f,b
  1576  002B44  2EE8               	decfsz	wreg,f,c
  1577  002B46  D7FA               	goto	u3145
  1578  002B48  C062  F064         	movff	??_SetDCPWM5,SetDCPWM5@DCycle
  1579  002B4C  C063  F065         	movff	??_SetDCPWM5+1,SetDCPWM5@DCycle+1
  1580                           
  1581                           ; BSR set to: 0
  1582  002B50  C065  FF71         	movff	SetDCPWM5@DCycle+1,3953	;volatile
  1583  002B54  C064  F062         	movff	SetDCPWM5@DCycle,??_SetDCPWM5
  1584  002B58  0100               	movlb	0	; () banked
  1585  002B5A  90D8               	bcf	status,0,c
  1586  002B5C  3362               	rrcf	??_SetDCPWM5& (0+255),f,b
  1587  002B5E  0100               	movlb	0	; () banked
  1588  002B60  90D8               	bcf	status,0,c
  1589  002B62  3362               	rrcf	??_SetDCPWM5& (0+255),f,b
  1590  002B64  0E30               	movlw	48
  1591  002B66  0100               	movlb	0	; () banked
  1592  002B68  1762               	andwf	??_SetDCPWM5& (0+255),f,b
  1593  002B6A  5070               	movf	3952,w,c	;volatile
  1594  002B6C  0BCF               	andlw	207
  1595  002B6E  0100               	movlb	0	; () banked
  1596  002B70  1162               	iorwf	??_SetDCPWM5& (0+255),w,b
  1597  002B72  6E70               	movwf	3952,c	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600  002B74  0012               	return		;funcret
  1601  002B76                     __end_of_SetDCPWM5:
  1602                           	opt stack 0
  1603                           prodh	equ	0xFF4
  1604                           prodl	equ	0xFF3
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postinc2	equ	0xFDE
  1608                           fsr2h	equ	0xFDA
  1609                           fsr2l	equ	0xFD9
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _ResetMillis *****************
  1613 ;; Defined at:
  1614 ;;		line 15 in file "MillisecondTimer.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;		None               void
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    7
  1635 ;; This function calls:
  1636 ;;		_WriteTimer0
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	text8
  1643  002D3E                     __ptext8:
  1644                           	opt stack 0
  1645  002D3E                     _ResetMillis:
  1646                           	opt stack 23
  1647                           
  1648                           ;MillisecondTimer.c: 17: WriteTimer0(63036);
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;incstack = 0
  1652  002D3E  0EF6               	movlw	246
  1653  002D40  0100               	movlb	0	; () banked
  1654  002D42  6F61               	movwf	(WriteTimer0@timer0+1)& (0+255),b
  1655  002D44  0E3C               	movlw	60
  1656  002D46  6F60               	movwf	WriteTimer0@timer0& (0+255),b
  1657  002D48  ECEA  F016         	call	_WriteTimer0	;wreg free
  1658                           
  1659                           ;MillisecondTimer.c: 18: millisecond_COUNT = 0;
  1660  002D4C  0E00               	movlw	0
  1661  002D4E  6E34               	movwf	_millisecond_COUNT+1,c	;volatile
  1662  002D50  0E00               	movlw	0
  1663  002D52  6E33               	movwf	_millisecond_COUNT,c	;volatile
  1664  002D54  0012               	return		;funcret
  1665  002D56                     __end_of_ResetMillis:
  1666                           	opt stack 0
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           postinc2	equ	0xFDE
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function _ReadMillis *****************
  1677 ;; Defined at:
  1678 ;;		line 7 in file "MillisecondTimer.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;		None
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  2    0[BANK0 ] unsigned int 
  1685 ;; Registers used:
  1686 ;;		None
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;Total ram usage:        2 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    6
  1699 ;; This function calls:
  1700 ;;		Nothing
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text9
  1707  002E62                     __ptext9:
  1708                           	opt stack 0
  1709  002E62                     _ReadMillis:
  1710                           	opt stack 24
  1711                           
  1712                           ;MillisecondTimer.c: 9: return (millisecond_COUNT);
  1713                           
  1714                           ;incstack = 0
  1715  002E62  C033  F060         	movff	_millisecond_COUNT,?_ReadMillis	;volatile
  1716  002E66  C034  F061         	movff	_millisecond_COUNT+1,?_ReadMillis+1	;volatile
  1717  002E6A  0012               	return		;funcret
  1718  002E6C                     __end_of_ReadMillis:
  1719                           	opt stack 0
  1720                           prodh	equ	0xFF4
  1721                           prodl	equ	0xFF3
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postinc2	equ	0xFDE
  1725                           fsr2h	equ	0xFDA
  1726                           fsr2l	equ	0xFD9
  1727                           status	equ	0xFD8
  1728                           
  1729 ;; *************** function _EnableSensorLEDS *****************
  1730 ;; Defined at:
  1731 ;;		line 474 in file "FastBuggy17_Main_Code.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;		None               void
  1738 ;; Registers used:
  1739 ;;		wreg, status,2
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    6
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_main
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text10
  1760  002E80                     __ptext10:
  1761                           	opt stack 0
  1762  002E80                     _EnableSensorLEDS:
  1763                           	opt stack 24
  1764                           
  1765                           ;FastBuggy17_Main_Code.c: 476: LATE = 0x1F;
  1766                           
  1767                           ;incstack = 0
  1768  002E80  0E1F               	movlw	31
  1769  002E82  6E8D               	movwf	3981,c	;volatile
  1770  002E84  0012               	return		;funcret
  1771  002E86                     __end_of_EnableSensorLEDS:
  1772                           	opt stack 0
  1773                           prodh	equ	0xFF4
  1774                           prodl	equ	0xFF3
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postinc2	equ	0xFDE
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function _EnableMotors *****************
  1783 ;; Defined at:
  1784 ;;		line 67 in file "Motors.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;		None
  1789 ;; Return value:  Size  Location     Type
  1790 ;;		None               void
  1791 ;; Registers used:
  1792 ;;		None
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;Total ram usage:        0 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    6
  1805 ;; This function calls:
  1806 ;;		Nothing
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text11
  1813  002E86                     __ptext11:
  1814                           	opt stack 0
  1815  002E86                     _EnableMotors:
  1816                           	opt stack 24
  1817                           
  1818                           ;Motors.c: 69: LATDbits.LATD4 = 1;
  1819                           
  1820                           ;incstack = 0
  1821  002E86  888C               	bsf	3980,4,c	;volatile
  1822  002E88  0012               	return		;funcret
  1823  002E8A                     __end_of_EnableMotors:
  1824                           	opt stack 0
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postinc2	equ	0xFDE
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function _ConfigureTimer2 *****************
  1835 ;; Defined at:
  1836 ;;		line 164 in file "FastBuggy17_Main_Code.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;		None               void
  1843 ;; Registers used:
  1844 ;;		wreg, status,2, status,0, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    7
  1857 ;; This function calls:
  1858 ;;		_OpenTimer2
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text12
  1865  002E6C                     __ptext12:
  1866                           	opt stack 0
  1867  002E6C                     _ConfigureTimer2:
  1868                           	opt stack 23
  1869                           
  1870                           ;FastBuggy17_Main_Code.c: 166: OpenTimer2(0b01111111
  1871                           ;FastBuggy17_Main_Code.c: 167: & 0b11111100
  1872                           ;FastBuggy17_Main_Code.c: 168: & 0b10000111
  1873                           ;FastBuggy17_Main_Code.c: 169: & 0b10110111);
  1874                           
  1875                           ;incstack = 0
  1876  002E6C  0E04               	movlw	4
  1877  002E6E  EC54  F016         	call	_OpenTimer2
  1878  002E72  0012               	return		;funcret
  1879  002E74                     __end_of_ConfigureTimer2:
  1880                           	opt stack 0
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postinc2	equ	0xFDE
  1886                           fsr2h	equ	0xFDA
  1887                           fsr2l	equ	0xFD9
  1888                           status	equ	0xFD8
  1889                           
  1890 ;; *************** function _OpenTimer2 *****************
  1891 ;; Defined at:
  1892 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t2open.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  config          1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  config          1    0[BANK0 ] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;		None               void
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;Total ram usage:        1 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    6
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_ConfigureTimer2
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text13
  1921  002CA8                     __ptext13:
  1922                           	opt stack 0
  1923  002CA8                     _OpenTimer2:
  1924                           	opt stack 23
  1925                           
  1926                           ;incstack = 0
  1927                           ;OpenTimer2@config stored from wreg
  1928  002CA8  0100               	movlb	0	; () banked
  1929  002CAA  6F60               	movwf	OpenTimer2@config& (0+255),b
  1930                           
  1931                           ; BSR set to: 0
  1932  002CAC  0100               	movlb	0	; () banked
  1933  002CAE  5160               	movf	OpenTimer2@config& (0+255),w,b
  1934  002CB0  0BFB               	andlw	251
  1935  002CB2  6ECA               	movwf	4042,c	;volatile
  1936                           
  1937                           ; BSR set to: 0
  1938  002CB4  0E00               	movlw	0
  1939  002CB6  6ECC               	movwf	4044,c	;volatile
  1940                           
  1941                           ; BSR set to: 0
  1942  002CB8  929E               	bcf	3998,1,c	;volatile
  1943                           
  1944                           ; BSR set to: 0
  1945  002CBA  0100               	movlb	0	; () banked
  1946  002CBC  AF60               	btfss	OpenTimer2@config& (0+255),7,b
  1947  002CBE  D002               	goto	l554
  1948                           
  1949                           ; BSR set to: 0
  1950  002CC0  829D               	bsf	3997,1,c	;volatile
  1951  002CC2  D001               	goto	l555
  1952  002CC4                     l554:
  1953                           
  1954                           ; BSR set to: 0
  1955  002CC4  929D               	bcf	3997,1,c	;volatile
  1956  002CC6                     l555:
  1957                           
  1958                           ; BSR set to: 0
  1959  002CC6  84CA               	bsf	4042,2,c	;volatile
  1960                           
  1961                           ; BSR set to: 0
  1962  002CC8  0012               	return		;funcret
  1963  002CCA                     __end_of_OpenTimer2:
  1964                           	opt stack 0
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postinc2	equ	0xFDE
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function _ConfigureTimer0 *****************
  1975 ;; Defined at:
  1976 ;;		line 132 in file "FastBuggy17_Main_Code.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;		None
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;		None
  1981 ;; Return value:  Size  Location     Type
  1982 ;;		None               void
  1983 ;; Registers used:
  1984 ;;		wreg, status,2, status,0, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:        0 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    7
  1997 ;; This function calls:
  1998 ;;		_OpenTimer0
  1999 ;;		_WriteTimer0
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text14
  2006  002D56                     __ptext14:
  2007                           	opt stack 0
  2008  002D56                     _ConfigureTimer0:
  2009                           	opt stack 23
  2010                           
  2011                           ;FastBuggy17_Main_Code.c: 134: OpenTimer0(0b11111111
  2012                           ;FastBuggy17_Main_Code.c: 135: & 0b10111111
  2013                           ;FastBuggy17_Main_Code.c: 136: & 0b11011111
  2014                           ;FastBuggy17_Main_Code.c: 137: & 0b11111111);
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;incstack = 0
  2018  002D56  0E9F               	movlw	159
  2019  002D58  EC1B  F016         	call	_OpenTimer0
  2020                           
  2021                           ;FastBuggy17_Main_Code.c: 141: WriteTimer0(63036);
  2022  002D5C  0EF6               	movlw	246
  2023  002D5E  0100               	movlb	0	; () banked
  2024  002D60  6F61               	movwf	(WriteTimer0@timer0+1)& (0+255),b
  2025  002D62  0E3C               	movlw	60
  2026  002D64  6F60               	movwf	WriteTimer0@timer0& (0+255),b
  2027  002D66  ECEA  F016         	call	_WriteTimer0	;wreg free
  2028  002D6A  0012               	return		;funcret
  2029  002D6C                     __end_of_ConfigureTimer0:
  2030                           	opt stack 0
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postinc2	equ	0xFDE
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _WriteTimer0 *****************
  2041 ;; Defined at:
  2042 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0write.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  timer0          2    0[BANK0 ] unsigned int 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  timer           2    2[BANK0 ] struct Timers
  2047 ;; Return value:  Size  Location     Type
  2048 ;;		None               void
  2049 ;; Registers used:
  2050 ;;		None
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:        4 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    6
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_ConfigureTimer0
  2067 ;;		_ResetMillis
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text15
  2072  002DD4                     __ptext15:
  2073                           	opt stack 0
  2074  002DD4                     _WriteTimer0:
  2075                           	opt stack 23
  2076                           
  2077                           ;incstack = 0
  2078  002DD4  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
  2079  002DD8  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  2080  002DDC  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  2081  002DE0  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  2082  002DE4  0012               	return		;funcret
  2083  002DE6                     __end_of_WriteTimer0:
  2084                           	opt stack 0
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postinc2	equ	0xFDE
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _OpenTimer0 *****************
  2095 ;; Defined at:
  2096 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0open.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  config          1    wreg     unsigned char 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  config          1    0[BANK0 ] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;		None               void
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;Total ram usage:        1 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    6
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_ConfigureTimer0
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text16
  2125  002C36                     __ptext16:
  2126                           	opt stack 0
  2127  002C36                     _OpenTimer0:
  2128                           	opt stack 23
  2129                           
  2130                           ;incstack = 0
  2131                           ;OpenTimer0@config stored from wreg
  2132  002C36  0100               	movlb	0	; () banked
  2133  002C38  6F60               	movwf	OpenTimer0@config& (0+255),b
  2134                           
  2135                           ; BSR set to: 0
  2136  002C3A  0100               	movlb	0	; () banked
  2137  002C3C  5160               	movf	OpenTimer0@config& (0+255),w,b
  2138  002C3E  0B7F               	andlw	127
  2139  002C40  6ED5               	movwf	4053,c	;volatile
  2140                           
  2141                           ; BSR set to: 0
  2142  002C42  0E00               	movlw	0
  2143  002C44  6ED7               	movwf	4055,c	;volatile
  2144                           
  2145                           ; BSR set to: 0
  2146  002C46  0E00               	movlw	0
  2147  002C48  6ED6               	movwf	4054,c	;volatile
  2148                           
  2149                           ; BSR set to: 0
  2150  002C4A  94F2               	bcf	intcon,2,c	;volatile
  2151                           
  2152                           ; BSR set to: 0
  2153  002C4C  0100               	movlb	0	; () banked
  2154  002C4E  AF60               	btfss	OpenTimer0@config& (0+255),7,b
  2155  002C50  D002               	goto	l499
  2156                           
  2157                           ; BSR set to: 0
  2158  002C52  8AF2               	bsf	intcon,5,c	;volatile
  2159  002C54  D001               	goto	l500
  2160  002C56                     l499:
  2161                           
  2162                           ; BSR set to: 0
  2163  002C56  9AF2               	bcf	intcon,5,c	;volatile
  2164  002C58                     l500:
  2165                           
  2166                           ; BSR set to: 0
  2167  002C58  8ED5               	bsf	4053,7,c	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170  002C5A  0012               	return		;funcret
  2171  002C5C                     __end_of_OpenTimer0:
  2172                           	opt stack 0
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           intcon	equ	0xFF2
  2176                           postinc0	equ	0xFEE
  2177                           wreg	equ	0xFE8
  2178                           postinc2	equ	0xFDE
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function _ConfigurePWM *****************
  2184 ;; Defined at:
  2185 ;;		line 182 in file "FastBuggy17_Main_Code.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;		None               void
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    7
  2206 ;; This function calls:
  2207 ;;		_OpenPWM4
  2208 ;;		_OpenPWM5
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text17
  2215  002E46                     __ptext17:
  2216                           	opt stack 0
  2217  002E46                     _ConfigurePWM:
  2218                           	opt stack 23
  2219                           
  2220                           ;FastBuggy17_Main_Code.c: 184: OpenPWM4(130);
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;incstack = 0
  2224  002E46  0E82               	movlw	130
  2225  002E48  EC41  F016         	call	_OpenPWM4
  2226                           
  2227                           ;FastBuggy17_Main_Code.c: 185: OpenPWM5(130);
  2228  002E4C  0E82               	movlw	130
  2229  002E4E  EC2E  F016         	call	_OpenPWM5
  2230  002E52  0012               	return		;funcret
  2231  002E54                     __end_of_ConfigurePWM:
  2232                           	opt stack 0
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           intcon	equ	0xFF2
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           postinc2	equ	0xFDE
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _OpenPWM5 *****************
  2244 ;; Defined at:
  2245 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\PWM\pw5open.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  period          1    wreg     unsigned char 
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  period          1    0[BANK0 ] unsigned char 
  2250 ;; Return value:  Size  Location     Type
  2251 ;;		None               void
  2252 ;; Registers used:
  2253 ;;		wreg, status,2
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        1 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    6
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_ConfigurePWM
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text18
  2274  002C5C                     __ptext18:
  2275                           	opt stack 0
  2276  002C5C                     _OpenPWM5:
  2277                           	opt stack 23
  2278                           
  2279                           ;incstack = 0
  2280                           ;OpenPWM5@period stored from wreg
  2281  002C5C  0100               	movlb	0	; () banked
  2282  002C5E  6F60               	movwf	OpenPWM5@period& (0+255),b
  2283                           
  2284                           ; BSR set to: 0
  2285  002C60  0E0C               	movlw	12
  2286  002C62  6E70               	movwf	3952,c	;volatile
  2287                           
  2288                           ; BSR set to: 0
  2289  002C64  ACB1               	btfss	4017,6,c	;volatile
  2290                           
  2291                           ; BSR set to: 0
  2292  002C66  B6B1               	btfsc	4017,3,c	;volatile
  2293  002C68  D005               	goto	l477
  2294                           
  2295                           ; BSR set to: 0
  2296  002C6A  94CA               	bcf	4042,2,c	;volatile
  2297                           
  2298                           ; BSR set to: 0
  2299  002C6C  C060  FFCB         	movff	OpenPWM5@period,4043	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302  002C70  84CA               	bsf	4042,2,c	;volatile
  2303  002C72  D005               	goto	l3922
  2304  002C74                     l477:
  2305                           
  2306                           ; BSR set to: 0
  2307  002C74  9476               	bcf	3958,2,c	;volatile
  2308                           
  2309                           ; BSR set to: 0
  2310  002C76  C060  FF77         	movff	OpenPWM5@period,3959	;volatile
  2311                           
  2312                           ; BSR set to: 0
  2313  002C7A  8476               	bsf	3958,2,c	;volatile
  2314  002C7C  D000               	goto	l3922
  2315  002C7E                     l3922:
  2316                           
  2317                           ; BSR set to: 0
  2318  002C7E  9898               	bcf	3992,4,c	;volatile
  2319                           
  2320                           ; BSR set to: 0
  2321  002C80  0012               	return		;funcret
  2322  002C82                     __end_of_OpenPWM5:
  2323                           	opt stack 0
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           postinc2	equ	0xFDE
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function _OpenPWM4 *****************
  2335 ;; Defined at:
  2336 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\PWM\pw4open.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  period          1    wreg     unsigned char 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  period          1    0[BANK0 ] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;		None               void
  2343 ;; Registers used:
  2344 ;;		wreg, status,2
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;Total ram usage:        1 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    6
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_ConfigurePWM
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text19
  2365  002C82                     __ptext19:
  2366                           	opt stack 0
  2367  002C82                     _OpenPWM4:
  2368                           	opt stack 23
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;incstack = 0
  2372                           ;OpenPWM4@period stored from wreg
  2373  002C82  0100               	movlb	0	; () banked
  2374  002C84  6F60               	movwf	OpenPWM4@period& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377  002C86  0E0C               	movlw	12
  2378  002C88  6E73               	movwf	3955,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381  002C8A  9698               	bcf	3992,3,c	;volatile
  2382                           
  2383                           ; BSR set to: 0
  2384  002C8C  ACB1               	btfss	4017,6,c	;volatile
  2385                           
  2386                           ; BSR set to: 0
  2387  002C8E  B6B1               	btfsc	4017,3,c	;volatile
  2388  002C90  D005               	goto	l451
  2389                           
  2390                           ; BSR set to: 0
  2391  002C92  94CA               	bcf	4042,2,c	;volatile
  2392                           
  2393                           ; BSR set to: 0
  2394  002C94  C060  FFCB         	movff	OpenPWM4@period,4043	;volatile
  2395                           
  2396                           ; BSR set to: 0
  2397  002C98  84CA               	bsf	4042,2,c	;volatile
  2398  002C9A  D005               	goto	l453
  2399  002C9C                     l451:
  2400                           
  2401                           ; BSR set to: 0
  2402  002C9C  9476               	bcf	3958,2,c	;volatile
  2403                           
  2404                           ; BSR set to: 0
  2405  002C9E  C060  FF77         	movff	OpenPWM4@period,3959	;volatile
  2406                           
  2407                           ; BSR set to: 0
  2408  002CA2  8476               	bsf	3958,2,c	;volatile
  2409  002CA4  D000               	goto	l453
  2410  002CA6                     l453:
  2411                           
  2412                           ; BSR set to: 0
  2413  002CA6  0012               	return		;funcret
  2414  002CA8                     __end_of_OpenPWM4:
  2415                           	opt stack 0
  2416                           prodh	equ	0xFF4
  2417                           prodl	equ	0xFF3
  2418                           intcon	equ	0xFF2
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postinc2	equ	0xFDE
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _ConfigureInterrupts *****************
  2427 ;; Defined at:
  2428 ;;		line 81 in file "FastBuggy17_Main_Code.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;		None               void
  2435 ;; Registers used:
  2436 ;;		None
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    6
  2449 ;; This function calls:
  2450 ;;		Nothing
  2451 ;; This function is called by:
  2452 ;;		_main
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text20
  2457  002D98                     __ptext20:
  2458                           	opt stack 0
  2459  002D98                     _ConfigureInterrupts:
  2460                           	opt stack 24
  2461                           
  2462                           ;FastBuggy17_Main_Code.c: 83: INTCONbits.GIE = 1;
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;incstack = 0
  2466  002D98  8EF2               	bsf	intcon,7,c	;volatile
  2467                           
  2468                           ;FastBuggy17_Main_Code.c: 84: INTCONbits.PEIE = 1;
  2469  002D9A  8CF2               	bsf	intcon,6,c	;volatile
  2470                           
  2471                           ;FastBuggy17_Main_Code.c: 85: RCONbits.IPEN = 1;
  2472  002D9C  8ED0               	bsf	4048,7,c	;volatile
  2473                           
  2474                           ;FastBuggy17_Main_Code.c: 107: INTCONbits.TMR0IE = 1;
  2475  002D9E  8AF2               	bsf	intcon,5,c	;volatile
  2476                           
  2477                           ;FastBuggy17_Main_Code.c: 108: INTCONbits.TMR0IF = 0;
  2478  002DA0  94F2               	bcf	intcon,2,c	;volatile
  2479                           
  2480                           ;FastBuggy17_Main_Code.c: 109: INTCON2bits.TMR0IP = 1;
  2481  002DA2  84F1               	bsf	intcon2,2,c	;volatile
  2482                           
  2483                           ;FastBuggy17_Main_Code.c: 118: PIE1bits.ADIE = 0;
  2484  002DA4  9C9D               	bcf	3997,6,c	;volatile
  2485                           
  2486                           ;FastBuggy17_Main_Code.c: 119: PIR1bits.ADIF = 0;
  2487  002DA6  9C9E               	bcf	3998,6,c	;volatile
  2488                           
  2489                           ;FastBuggy17_Main_Code.c: 120: IPR1bits.ADIP = 0;
  2490  002DA8  9C9F               	bcf	3999,6,c	;volatile
  2491  002DAA  0012               	return		;funcret
  2492  002DAC                     __end_of_ConfigureInterrupts:
  2493                           	opt stack 0
  2494                           prodh	equ	0xFF4
  2495                           prodl	equ	0xFF3
  2496                           intcon	equ	0xFF2
  2497                           intcon2	equ	0xFF1
  2498                           postinc0	equ	0xFEE
  2499                           wreg	equ	0xFE8
  2500                           postinc2	equ	0xFDE
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _ConfigureBuggyIO *****************
  2506 ;; Defined at:
  2507 ;;		line 205 in file "FastBuggy17_Main_Code.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;		None
  2512 ;; Return value:  Size  Location     Type
  2513 ;;		None               void
  2514 ;; Registers used:
  2515 ;;		wreg, status,2
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;Total ram usage:        0 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    6
  2528 ;; This function calls:
  2529 ;;		Nothing
  2530 ;; This function is called by:
  2531 ;;		_main
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           	psect	text21
  2536  002D24                     __ptext21:
  2537                           	opt stack 0
  2538  002D24                     _ConfigureBuggyIO:
  2539                           	opt stack 24
  2540                           
  2541                           ;FastBuggy17_Main_Code.c: 208: TRISA = 0xFF;
  2542                           
  2543                           ;incstack = 0
  2544  002D24  6892               	setf	3986,c	;volatile
  2545                           
  2546                           ;FastBuggy17_Main_Code.c: 211: TRISB = 0xFF;
  2547  002D26  6893               	setf	3987,c	;volatile
  2548                           
  2549                           ;FastBuggy17_Main_Code.c: 214: TRISC = 0xBF;
  2550  002D28  0EBF               	movlw	191
  2551  002D2A  6E94               	movwf	3988,c	;volatile
  2552                           
  2553                           ;FastBuggy17_Main_Code.c: 217: TRISD = 0xE0;
  2554  002D2C  0EE0               	movlw	224
  2555  002D2E  6E95               	movwf	3989,c	;volatile
  2556                           
  2557                           ;FastBuggy17_Main_Code.c: 220: TRISE = 0x80;
  2558  002D30  0E80               	movlw	128
  2559  002D32  6E96               	movwf	3990,c	;volatile
  2560                           
  2561                           ;FastBuggy17_Main_Code.c: 223: TRISG = 0xE7;
  2562  002D34  0EE7               	movlw	231
  2563  002D36  6E98               	movwf	3992,c	;volatile
  2564                           
  2565                           ;FastBuggy17_Main_Code.c: 226: TRISJ = 0x00;
  2566  002D38  0E00               	movlw	0
  2567  002D3A  6E9A               	movwf	3994,c	;volatile
  2568  002D3C  0012               	return		;funcret
  2569  002D3E                     __end_of_ConfigureBuggyIO:
  2570                           	opt stack 0
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           intcon	equ	0xFF2
  2574                           intcon2	equ	0xFF1
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           postinc2	equ	0xFDE
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _ConfigureADC *****************
  2583 ;; Defined at:
  2584 ;;		line 231 in file "FastBuggy17_Main_Code.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;		None               void
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;Total ram usage:        0 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    7
  2605 ;; This function calls:
  2606 ;;		_OpenADC
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text22
  2613  002DAC                     __ptext22:
  2614                           	opt stack 0
  2615  002DAC                     _ConfigureADC:
  2616                           	opt stack 23
  2617                           
  2618                           ;FastBuggy17_Main_Code.c: 233: OpenADC(0b10011111
  2619                           ;FastBuggy17_Main_Code.c: 234: & 0b11111111
  2620                           ;FastBuggy17_Main_Code.c: 235: & 0b11110101,
  2621                           ;FastBuggy17_Main_Code.c: 236: 0b10000111
  2622                           ;FastBuggy17_Main_Code.c: 237: & 0b01111111
  2623                           ;FastBuggy17_Main_Code.c: 238: & 0b11111110
  2624                           ;FastBuggy17_Main_Code.c: 239: & 0b11111101,
  2625                           ;FastBuggy17_Main_Code.c: 240: 9);
  2626                           
  2627                           ;incstack = 0
  2628  002DAC  0E04               	movlw	4
  2629  002DAE  0100               	movlb	0	; () banked
  2630  002DB0  6F60               	movwf	OpenADC@config2& (0+255),b
  2631  002DB2  0E09               	movlw	9
  2632  002DB4  0100               	movlb	0	; () banked
  2633  002DB6  6F61               	movwf	OpenADC@portconfig& (0+255),b
  2634  002DB8  0E95               	movlw	149
  2635  002DBA  ECD2  F013         	call	_OpenADC
  2636  002DBE  0012               	return		;funcret
  2637  002DC0                     __end_of_ConfigureADC:
  2638                           	opt stack 0
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           postinc0	equ	0xFEE
  2644                           wreg	equ	0xFE8
  2645                           postinc2	equ	0xFDE
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _OpenADC *****************
  2651 ;; Defined at:
  2652 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  config          1    wreg     unsigned char 
  2655 ;;  config2         1    0[BANK0 ] unsigned char 
  2656 ;;  portconfig      1    1[BANK0 ] unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  config          1    4[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        5 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    6
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_ConfigureADC
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text23
  2683  0027A4                     __ptext23:
  2684                           	opt stack 0
  2685  0027A4                     _OpenADC:
  2686                           	opt stack 23
  2687                           
  2688                           ;incstack = 0
  2689                           ;OpenADC@config stored from wreg
  2690  0027A4  0100               	movlb	0	; () banked
  2691  0027A6  6F64               	movwf	OpenADC@config& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694  0027A8  0E00               	movlw	0
  2695  0027AA  6EC2               	movwf	4034,c	;volatile
  2696  0027AC  0E00               	movlw	0
  2697  0027AE  6EC0               	movwf	4032,c	;volatile
  2698                           
  2699                           ; BSR set to: 0
  2700  0027B0  0100               	movlb	0	; () banked
  2701  0027B2  90D8               	bcf	status,0,c
  2702  0027B4  3160               	rrcf	OpenADC@config2& (0+255),w,b
  2703  0027B6  0B3C               	andlw	60
  2704  0027B8  6EC2               	movwf	4034,c	;volatile
  2705                           
  2706                           ; BSR set to: 0
  2707  0027BA  C060  F062         	movff	OpenADC@config2,??_OpenADC
  2708  0027BE  0100               	movlb	0	; () banked
  2709  0027C0  3B62               	swapf	??_OpenADC& (0+255),f,b
  2710  0027C2  0EF0               	movlw	240
  2711  0027C4  1762               	andwf	??_OpenADC& (0+255),f,b
  2712  0027C6  0E30               	movlw	48
  2713  0027C8  0100               	movlb	0	; () banked
  2714  0027CA  1762               	andwf	??_OpenADC& (0+255),f,b
  2715  0027CC  0100               	movlb	0	; () banked
  2716  0027CE  5161               	movf	OpenADC@portconfig& (0+255),w,b
  2717  0027D0  0B0F               	andlw	15
  2718  0027D2  0100               	movlb	0	; () banked
  2719  0027D4  1162               	iorwf	??_OpenADC& (0+255),w,b
  2720  0027D6  6EC1               	movwf	4033,c	;volatile
  2721                           
  2722                           ; BSR set to: 0
  2723  0027D8  C064  F062         	movff	OpenADC@config,??_OpenADC
  2724  0027DC  0100               	movlb	0	; () banked
  2725  0027DE  90D8               	bcf	status,0,c
  2726  0027E0  3762               	rlcf	??_OpenADC& (0+255),f,b
  2727  0027E2  0100               	movlb	0	; () banked
  2728  0027E4  90D8               	bcf	status,0,c
  2729  0027E6  3762               	rlcf	??_OpenADC& (0+255),f,b
  2730  0027E8  0E38               	movlw	56
  2731  0027EA  0100               	movlb	0	; () banked
  2732  0027EC  1762               	andwf	??_OpenADC& (0+255),f,b
  2733  0027EE  C064  F063         	movff	OpenADC@config,??_OpenADC+1
  2734  0027F2  0100               	movlb	0	; () banked
  2735  0027F4  3B63               	swapf	(??_OpenADC+1)& (0+255),f,b
  2736  0027F6  0E0F               	movlw	15
  2737  0027F8  1763               	andwf	(??_OpenADC+1)& (0+255),f,b
  2738  0027FA  0E07               	movlw	7
  2739  0027FC  0100               	movlb	0	; () banked
  2740  0027FE  1763               	andwf	(??_OpenADC+1)& (0+255),f,b
  2741  002800  0100               	movlb	0	; () banked
  2742  002802  5164               	movf	OpenADC@config& (0+255),w,b
  2743  002804  0B80               	andlw	128
  2744  002806  0100               	movlb	0	; () banked
  2745  002808  1163               	iorwf	(??_OpenADC+1)& (0+255),w,b
  2746  00280A  0100               	movlb	0	; () banked
  2747  00280C  1162               	iorwf	??_OpenADC& (0+255),w,b
  2748  00280E  6EC0               	movwf	4032,c	;volatile
  2749                           
  2750                           ; BSR set to: 0
  2751  002810  0100               	movlb	0	; () banked
  2752  002812  AF60               	btfss	OpenADC@config2& (0+255),7,b
  2753  002814  D003               	goto	l421
  2754                           
  2755                           ; BSR set to: 0
  2756  002816  9C9E               	bcf	3998,6,c	;volatile
  2757  002818  8C9D               	bsf	3997,6,c	;volatile
  2758  00281A  8CF2               	bsf	intcon,6,c	;volatile
  2759  00281C                     l421:
  2760                           
  2761                           ; BSR set to: 0
  2762  00281C  80C2               	bsf	4034,0,c	;volatile
  2763                           
  2764                           ; BSR set to: 0
  2765  00281E  0012               	return		;funcret
  2766  002820                     __end_of_OpenADC:
  2767                           	opt stack 0
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           intcon	equ	0xFF2
  2771                           intcon2	equ	0xFF1
  2772                           postinc0	equ	0xFEE
  2773                           wreg	equ	0xFE8
  2774                           postinc2	equ	0xFDE
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _ChangeMode *****************
  2780 ;; Defined at:
  2781 ;;		line 488 in file "FastBuggy17_Main_Code.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;		None               void
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:        0 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    7
  2802 ;; This function calls:
  2803 ;;		_Delay10KTCYx
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text24
  2810  002C0E                     __ptext24:
  2811                           	opt stack 0
  2812  002C0E                     _ChangeMode:
  2813                           	opt stack 23
  2814                           
  2815                           ;FastBuggy17_Main_Code.c: 489: LATJ = 0x00;
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;incstack = 0
  2819  002C0E  0E00               	movlw	0
  2820  002C10  6E91               	movwf	3985,c	;volatile
  2821                           
  2822                           ;FastBuggy17_Main_Code.c: 490: LATJ = 0x1F;
  2823  002C12  0E1F               	movlw	31
  2824  002C14  6E91               	movwf	3985,c	;volatile
  2825                           
  2826                           ;FastBuggy17_Main_Code.c: 491: Delay10KTCYx(125);
  2827  002C16  0E7D               	movlw	125
  2828  002C18  EC74  F016         	call	_Delay10KTCYx
  2829                           
  2830                           ;FastBuggy17_Main_Code.c: 492: LATJ = 0x00;
  2831  002C1C  0E00               	movlw	0
  2832  002C1E  6E91               	movwf	3985,c	;volatile
  2833                           
  2834                           ;FastBuggy17_Main_Code.c: 493: Delay10KTCYx(125);
  2835  002C20  0E7D               	movlw	125
  2836  002C22  EC74  F016         	call	_Delay10KTCYx
  2837                           
  2838                           ;FastBuggy17_Main_Code.c: 494: LATJ = 0x1F;
  2839  002C26  0E1F               	movlw	31
  2840  002C28  6E91               	movwf	3985,c	;volatile
  2841                           
  2842                           ;FastBuggy17_Main_Code.c: 495: Delay10KTCYx(125);
  2843  002C2A  0E7D               	movlw	125
  2844  002C2C  EC74  F016         	call	_Delay10KTCYx
  2845                           
  2846                           ;FastBuggy17_Main_Code.c: 496: LATJ = 0x00;
  2847  002C30  0E00               	movlw	0
  2848  002C32  6E91               	movwf	3985,c	;volatile
  2849  002C34  0012               	return		;funcret
  2850  002C36                     __end_of_ChangeMode:
  2851                           	opt stack 0
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           intcon	equ	0xFF2
  2855                           intcon2	equ	0xFF1
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postinc2	equ	0xFDE
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _Delay10KTCYx *****************
  2864 ;; Defined at:
  2865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  unit            1    wreg     unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  unit            1    1[BANK0 ] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;		None               void
  2872 ;; Registers used:
  2873 ;;		wreg
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    6
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_ChangeMode
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text25
  2895  002CE8                     __ptext25:
  2896                           	opt stack 0
  2897  002CE8                     _Delay10KTCYx:
  2898                           	opt stack 24
  2899                           
  2900                           ;incstack = 0
  2901                           ;Delay10KTCYx@unit stored from wreg
  2902  002CE8  0100               	movlb	0	; () banked
  2903  002CEA  6F61               	movwf	Delay10KTCYx@unit& (0+255),b
  2904  002CEC                     
  2905                           ; BSR set to: 0
  2906  002CEC  0E0D               	movlw	13
  2907  002CEE  0100               	movlb	0	; () banked
  2908  002CF0  6F60               	movwf	??_Delay10KTCYx& (0+255),b
  2909  002CF2  0EFC               	movlw	252
  2910  002CF4                     u3697:
  2911  002CF4  2EE8               	decfsz	wreg,f,c
  2912  002CF6  D7FE               	goto	u3697
  2913  002CF8  2F60               	decfsz	??_Delay10KTCYx& (0+255),f,b
  2914  002CFA  D7FC               	goto	u3697
  2915  002CFC  0100               	movlb	0	; () banked
  2916  002CFE  2F61               	decfsz	Delay10KTCYx@unit& (0+255),f,b
  2917  002D00  D7F5               	goto	l4008
  2918  002D02  D000               	goto	l815
  2919  002D04                     l815:
  2920                           
  2921                           ; BSR set to: 0
  2922  002D04  0012               	return		;funcret
  2923  002D06                     __end_of_Delay10KTCYx:
  2924                           	opt stack 0
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           intcon	equ	0xFF2
  2928                           intcon2	equ	0xFF1
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postinc2	equ	0xFDE
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _CalibrateSensors *****************
  2937 ;; Defined at:
  2938 ;;		line 346 in file "FastBuggy17_Main_Code.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  index           1    5[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;		None               void
  2945 ;; Registers used:
  2946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;Total ram usage:        3 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    9
  2959 ;; This function calls:
  2960 ;;		_BusySensorAcq
  2961 ;;		_GetSensorReadings
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text26
  2968  00290A                     __ptext26:
  2969                           	opt stack 0
  2970  00290A                     _CalibrateSensors:
  2971                           	opt stack 21
  2972                           
  2973                           ;FastBuggy17_Main_Code.c: 347: unsigned char index;
  2974                           ;FastBuggy17_Main_Code.c: 349: GetSensorReadings();
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;incstack = 0
  2978  00290A  ECB6  F016         	call	_GetSensorReadings	;wreg free
  2979                           
  2980                           ;FastBuggy17_Main_Code.c: 351: while(BusySensorAcq());
  2981  00290E  D000               	goto	l4040
  2982  002910                     l4040:
  2983  002910  EC05  F017         	call	_BusySensorAcq	;wreg free
  2984  002914  0900               	iorlw	0
  2985  002916  A4D8               	btfss	status,2,c
  2986  002918  D7FB               	goto	l4040
  2987                           
  2988                           ;FastBuggy17_Main_Code.c: 353: for(index = 0; index < 5; index++) {
  2989  00291A  0E00               	movlw	0
  2990  00291C  0100               	movlb	0	; () banked
  2991  00291E  6F65               	movwf	CalibrateSensors@index& (0+255),b
  2992  002920                     l4044:
  2993                           
  2994                           ; BSR set to: 0
  2995  002920  0E04               	movlw	4
  2996  002922  0100               	movlb	0	; () banked
  2997  002924  6565               	cpfsgt	CalibrateSensors@index& (0+255),b
  2998  002926  D001               	goto	l4048
  2999                           
  3000                           ; BSR set to: 0
  3001  002928  D028               	goto	l252
  3002  00292A                     l4048:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;FastBuggy17_Main_Code.c: 355: sensor_offsets[index] = sensor_readings_raw[2] - sensor_r
      +                          eadings_raw[index];
  3006  00292A  0100               	movlb	0	; () banked
  3007  00292C  5165               	movf	CalibrateSensors@index& (0+255),w,b
  3008  00292E  0D02               	mullw	2
  3009  002930  0E3C               	movlw	low _sensor_readings_raw
  3010  002932  24F3               	addwf	prodl,w,c
  3011  002934  6ED9               	movwf	fsr2l,c
  3012  002936  0E00               	movlw	high _sensor_readings_raw
  3013  002938  20F4               	addwfc	prodh,w,c
  3014  00293A  6EDA               	movwf	fsr2h,c
  3015  00293C  CFDE F063          	movff	postinc2,??_CalibrateSensors
  3016  002940  CFDD F064          	movff	postdec2,??_CalibrateSensors+1
  3017  002944  0100               	movlb	0	; () banked
  3018  002946  1F63               	comf	??_CalibrateSensors& (0+255),f,b
  3019  002948  1F64               	comf	(??_CalibrateSensors+1)& (0+255),f,b
  3020  00294A  4B63               	infsnz	??_CalibrateSensors& (0+255),f,b
  3021  00294C  2B64               	incf	(??_CalibrateSensors+1)& (0+255),f,b
  3022  00294E  5040               	movf	_sensor_readings_raw+4,w,c	;volatile
  3023  002950  0100               	movlb	0	; () banked
  3024  002952  2763               	addwf	??_CalibrateSensors& (0+255),f,b
  3025  002954  5041               	movf	_sensor_readings_raw+5,w,c	;volatile
  3026  002956  0100               	movlb	0	; () banked
  3027  002958  2364               	addwfc	(??_CalibrateSensors+1)& (0+255),f,b
  3028  00295A  0100               	movlb	0	; () banked
  3029  00295C  5165               	movf	CalibrateSensors@index& (0+255),w,b
  3030  00295E  0D02               	mullw	2
  3031  002960  0EC1               	movlw	low _sensor_offsets
  3032  002962  24F3               	addwf	prodl,w,c
  3033  002964  6ED9               	movwf	fsr2l,c
  3034  002966  0E00               	movlw	high _sensor_offsets
  3035  002968  20F4               	addwfc	prodh,w,c
  3036  00296A  6EDA               	movwf	fsr2h,c
  3037  00296C  C063  FFDE         	movff	??_CalibrateSensors,postinc2
  3038  002970  C064  FFDD         	movff	??_CalibrateSensors+1,postdec2
  3039                           
  3040                           ; BSR set to: 0
  3041  002974  0100               	movlb	0	; () banked
  3042  002976  2B65               	incf	CalibrateSensors@index& (0+255),f,b
  3043  002978  D7D3               	goto	l4044
  3044  00297A                     l252:
  3045                           
  3046                           ; BSR set to: 0
  3047  00297A  0012               	return		;funcret
  3048  00297C                     __end_of_CalibrateSensors:
  3049                           	opt stack 0
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _CalibrateLine *****************
  3063 ;; Defined at:
  3064 ;;		line 362 in file "FastBuggy17_Main_Code.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  index           1    8[BANK0 ] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;Total ram usage:        4 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    9
  3085 ;; This function calls:
  3086 ;;		_BusyADC
  3087 ;;		_BusySensorAcq
  3088 ;;		_ConvertADC
  3089 ;;		_GetSensorReadings
  3090 ;;		_NormaliseSensorReadings
  3091 ;;		_ReadADC
  3092 ;;		_SetADCChannel
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text27
  3099  002684                     __ptext27:
  3100                           	opt stack 0
  3101  002684                     _CalibrateLine:
  3102                           	opt stack 21
  3103                           
  3104                           ;FastBuggy17_Main_Code.c: 363: unsigned char index;
  3105                           ;FastBuggy17_Main_Code.c: 365: LATJ = 0x00;
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;incstack = 0
  3109  002684  0E00               	movlw	0
  3110  002686  6E91               	movwf	3985,c	;volatile
  3111                           
  3112                           ;FastBuggy17_Main_Code.c: 368: SetADCChannel(5);
  3113  002688  0E05               	movlw	5
  3114  00268A  EC9B  F010         	call	_SetADCChannel
  3115                           
  3116                           ;FastBuggy17_Main_Code.c: 369: ConvertADC();
  3117  00268E  EC45  F017         	call	_ConvertADC	;wreg free
  3118                           
  3119                           ;FastBuggy17_Main_Code.c: 370: while(BusyADC());
  3120  002692  D000               	goto	l4060
  3121  002694                     l4060:
  3122  002694  EC2A  F017         	call	_BusyADC	;wreg free
  3123  002698  0900               	iorlw	0
  3124  00269A  A4D8               	btfss	status,2,c
  3125  00269C  D7FB               	goto	l4060
  3126                           
  3127                           ;FastBuggy17_Main_Code.c: 371: sensor_threshold = ReadADC();
  3128  00269E  ECE0  F016         	call	_ReadADC	;wreg free
  3129  0026A2  C060  F035         	movff	?_ReadADC,_sensor_threshold
  3130  0026A6  C061  F036         	movff	?_ReadADC+1,_sensor_threshold+1
  3131                           
  3132                           ;FastBuggy17_Main_Code.c: 374: GetSensorReadings();
  3133  0026AA  ECB6  F016         	call	_GetSensorReadings	;wreg free
  3134                           
  3135                           ;FastBuggy17_Main_Code.c: 376: while(BusySensorAcq());
  3136  0026AE  D000               	goto	l4066
  3137  0026B0                     l4066:
  3138  0026B0  EC05  F017         	call	_BusySensorAcq	;wreg free
  3139  0026B4  0900               	iorlw	0
  3140  0026B6  A4D8               	btfss	status,2,c
  3141  0026B8  D7FB               	goto	l4066
  3142                           
  3143                           ;FastBuggy17_Main_Code.c: 378: NormaliseSensorReadings();
  3144  0026BA  EC10  F014         	call	_NormaliseSensorReadings	;wreg free
  3145                           
  3146                           ;FastBuggy17_Main_Code.c: 388: for (index = 0; index < 5; index++) {
  3147  0026BE  0E00               	movlw	0
  3148  0026C0  0100               	movlb	0	; () banked
  3149  0026C2  6F68               	movwf	CalibrateLine@index& (0+255),b
  3150  0026C4                     l4072:
  3151                           
  3152                           ; BSR set to: 0
  3153  0026C4  0E04               	movlw	4
  3154  0026C6  0100               	movlb	0	; () banked
  3155  0026C8  6568               	cpfsgt	CalibrateLine@index& (0+255),b
  3156  0026CA  D001               	goto	l4076
  3157                           
  3158                           ; BSR set to: 0
  3159  0026CC  D02A               	goto	l264
  3160  0026CE                     l4076:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;FastBuggy17_Main_Code.c: 389: if (sensor_readings_normalised[index] < sensor_threshold)
      +                           {
  3164  0026CE  0100               	movlb	0	; () banked
  3165  0026D0  5168               	movf	CalibrateLine@index& (0+255),w,b
  3166  0026D2  0D02               	mullw	2
  3167  0026D4  0ECB               	movlw	low _sensor_readings_normalised
  3168  0026D6  24F3               	addwf	prodl,w,c
  3169  0026D8  6ED9               	movwf	fsr2l,c
  3170  0026DA  0E00               	movlw	high _sensor_readings_normalised
  3171  0026DC  20F4               	addwfc	prodh,w,c
  3172  0026DE  6EDA               	movwf	fsr2h,c
  3173  0026E0  5035               	movf	_sensor_threshold,w,c
  3174  0026E2  5CDE               	subwf	postinc2,w,c
  3175  0026E4  50DE               	movf	postinc2,w,c
  3176  0026E6  0A80               	xorlw	128
  3177  0026E8  0100               	movlb	0	; () banked
  3178  0026EA  6F67               	movwf	(??_CalibrateLine+2)& (0+255),b
  3179  0026EC  5036               	movf	_sensor_threshold+1,w,c
  3180  0026EE  0A80               	xorlw	128
  3181  0026F0  0100               	movlb	0	; () banked
  3182  0026F2  5967               	subwfb	(??_CalibrateLine+2)& (0+255),w,b
  3183  0026F4  B0D8               	btfsc	status,0,c
  3184  0026F6  D012               	goto	l4080
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;FastBuggy17_Main_Code.c: 390: LATJ |= (1 << index);
  3188  0026F8  C068  F065         	movff	CalibrateLine@index,??_CalibrateLine
  3189  0026FC  0E01               	movlw	1
  3190  0026FE  0100               	movlb	0	; () banked
  3191  002700  6F66               	movwf	(??_CalibrateLine+1)& (0+255),b
  3192  002702  0100               	movlb	0	; () banked
  3193  002704  2B65               	incf	??_CalibrateLine& (0+255),f,b
  3194  002706  D003               	goto	u3524
  3195  002708                     u3525:
  3196  002708  0100               	movlb	0	; () banked
  3197  00270A  90D8               	bcf	status,0,c
  3198  00270C  3766               	rlcf	(??_CalibrateLine+1)& (0+255),f,b
  3199  00270E                     u3524:
  3200  00270E  0100               	movlb	0	; () banked
  3201  002710  2F65               	decfsz	??_CalibrateLine& (0+255),f,b
  3202  002712  D7FA               	goto	u3525
  3203  002714  0100               	movlb	0	; () banked
  3204  002716  5166               	movf	(??_CalibrateLine+1)& (0+255),w,b
  3205  002718  1291               	iorwf	3985,f,c	;volatile
  3206  00271A  D000               	goto	l4080
  3207  00271C                     l4080:
  3208                           
  3209                           ; BSR set to: 0
  3210  00271C  0100               	movlb	0	; () banked
  3211  00271E  2B68               	incf	CalibrateLine@index& (0+255),f,b
  3212  002720  D7D1               	goto	l4072
  3213  002722                     l264:
  3214                           
  3215                           ; BSR set to: 0
  3216  002722  0012               	return		;funcret
  3217  002724                     __end_of_CalibrateLine:
  3218                           	opt stack 0
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           postinc0	equ	0xFEE
  3224                           wreg	equ	0xFE8
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _ReadADC *****************
  3232 ;; Defined at:
  3233 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;		None
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;		None
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  2    0[BANK0 ] int 
  3240 ;; Registers used:
  3241 ;;		wreg, status,2
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;Total ram usage:        4 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    6
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_CalibrateLine
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text28
  3262  002DC0                     __ptext28:
  3263                           	opt stack 0
  3264  002DC0                     _ReadADC:
  3265                           	opt stack 23
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;incstack = 0
  3269  002DC0  50C4               	movf	4036,w,c	;volatile
  3270  002DC2  0100               	movlb	0	; () banked
  3271  002DC4  6F62               	movwf	??_ReadADC& (0+255),b
  3272  002DC6  50C3               	movf	4035,w,c	;volatile
  3273  002DC8  0100               	movlb	0	; () banked
  3274  002DCA  6F60               	movwf	?_ReadADC& (0+255),b
  3275  002DCC  C062  F061         	movff	??_ReadADC,?_ReadADC+1
  3276  002DD0  D000               	goto	l429
  3277  002DD2                     l429:
  3278                           
  3279                           ; BSR set to: 0
  3280  002DD2  0012               	return		;funcret
  3281  002DD4                     __end_of_ReadADC:
  3282                           	opt stack 0
  3283                           prodh	equ	0xFF4
  3284                           prodl	equ	0xFF3
  3285                           intcon	equ	0xFF2
  3286                           intcon2	equ	0xFF1
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           fsr2h	equ	0xFDA
  3292                           fsr2l	equ	0xFD9
  3293                           status	equ	0xFD8
  3294                           
  3295 ;; *************** function _NormaliseSensorReadings *****************
  3296 ;; Defined at:
  3297 ;;		line 334 in file "FastBuggy17_Main_Code.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  index           1    4[BANK0 ] unsigned char 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;		None               void
  3304 ;; Registers used:
  3305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;Total ram usage:        5 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    6
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_CalibrateLine
  3322 ;;		_main
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text29
  3327  002820                     __ptext29:
  3328                           	opt stack 0
  3329  002820                     _NormaliseSensorReadings:
  3330                           	opt stack 24
  3331                           
  3332                           ;FastBuggy17_Main_Code.c: 335: unsigned char index;
  3333                           ;FastBuggy17_Main_Code.c: 337: for(index = 0; index < 5; index++) {
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;incstack = 0
  3337  002820  0E00               	movlw	0
  3338  002822  0100               	movlb	0	; () banked
  3339  002824  6F64               	movwf	NormaliseSensorReadings@index& (0+255),b
  3340  002826                     l3950:
  3341                           
  3342                           ; BSR set to: 0
  3343  002826  0E04               	movlw	4
  3344  002828  0100               	movlb	0	; () banked
  3345  00282A  6564               	cpfsgt	NormaliseSensorReadings@index& (0+255),b
  3346  00282C  D001               	goto	l3954
  3347                           
  3348                           ; BSR set to: 0
  3349  00282E  D032               	goto	l244
  3350  002830                     l3954:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;FastBuggy17_Main_Code.c: 339: sensor_readings_normalised[index] = sensor_readings_raw[i
      +                          ndex] + sensor_offsets[index];
  3354  002830  0100               	movlb	0	; () banked
  3355  002832  5164               	movf	NormaliseSensorReadings@index& (0+255),w,b
  3356  002834  0D02               	mullw	2
  3357  002836  0EC1               	movlw	low _sensor_offsets
  3358  002838  24F3               	addwf	prodl,w,c
  3359  00283A  6ED9               	movwf	fsr2l,c
  3360  00283C  0E00               	movlw	high _sensor_offsets
  3361  00283E  20F4               	addwfc	prodh,w,c
  3362  002840  6EDA               	movwf	fsr2h,c
  3363  002842  CFDE F060          	movff	postinc2,??_NormaliseSensorReadings
  3364  002846  CFDD F061          	movff	postdec2,??_NormaliseSensorReadings+1
  3365  00284A  0100               	movlb	0	; () banked
  3366  00284C  5164               	movf	NormaliseSensorReadings@index& (0+255),w,b
  3367  00284E  0D02               	mullw	2
  3368  002850  0E3C               	movlw	low _sensor_readings_raw
  3369  002852  24F3               	addwf	prodl,w,c
  3370  002854  6ED9               	movwf	fsr2l,c
  3371  002856  0E00               	movlw	high _sensor_readings_raw
  3372  002858  20F4               	addwfc	prodh,w,c
  3373  00285A  6EDA               	movwf	fsr2h,c
  3374  00285C  CFDE F062          	movff	postinc2,??_NormaliseSensorReadings+2
  3375  002860  CFDD F063          	movff	postdec2,??_NormaliseSensorReadings+3
  3376  002864  0100               	movlb	0	; () banked
  3377  002866  5160               	movf	??_NormaliseSensorReadings& (0+255),w,b
  3378  002868  0100               	movlb	0	; () banked
  3379  00286A  2762               	addwf	(??_NormaliseSensorReadings+2)& (0+255),f,b
  3380  00286C  0100               	movlb	0	; () banked
  3381  00286E  5161               	movf	(??_NormaliseSensorReadings+1)& (0+255),w,b
  3382  002870  0100               	movlb	0	; () banked
  3383  002872  2363               	addwfc	(??_NormaliseSensorReadings+3)& (0+255),f,b
  3384  002874  0100               	movlb	0	; () banked
  3385  002876  5164               	movf	NormaliseSensorReadings@index& (0+255),w,b
  3386  002878  0D02               	mullw	2
  3387  00287A  0ECB               	movlw	low _sensor_readings_normalised
  3388  00287C  24F3               	addwf	prodl,w,c
  3389  00287E  6ED9               	movwf	fsr2l,c
  3390  002880  0E00               	movlw	high _sensor_readings_normalised
  3391  002882  20F4               	addwfc	prodh,w,c
  3392  002884  6EDA               	movwf	fsr2h,c
  3393  002886  C062  FFDE         	movff	??_NormaliseSensorReadings+2,postinc2
  3394  00288A  C063  FFDD         	movff	??_NormaliseSensorReadings+3,postdec2
  3395                           
  3396                           ; BSR set to: 0
  3397  00288E  0100               	movlb	0	; () banked
  3398  002890  2B64               	incf	NormaliseSensorReadings@index& (0+255),f,b
  3399  002892  D7C9               	goto	l3950
  3400  002894                     l244:
  3401                           
  3402                           ; BSR set to: 0
  3403  002894  0012               	return		;funcret
  3404  002896                     __end_of_NormaliseSensorReadings:
  3405                           	opt stack 0
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           intcon2	equ	0xFF1
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418 ;; *************** function _GetSensorReadings *****************
  3419 ;; Defined at:
  3420 ;;		line 316 in file "FastBuggy17_Main_Code.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    8
  3441 ;; This function calls:
  3442 ;;		_ConvertADC
  3443 ;;		_SetADCChannel
  3444 ;; This function is called by:
  3445 ;;		_CalibrateSensors
  3446 ;;		_CalibrateLine
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text30
  3452  002D6C                     __ptext30:
  3453                           	opt stack 0
  3454  002D6C                     _GetSensorReadings:
  3455                           	opt stack 22
  3456                           
  3457                           ;FastBuggy17_Main_Code.c: 318: sensor_acq_index = 0;
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;incstack = 0
  3461  002D6C  0E00               	movlw	0
  3462  002D6E  6E3A               	movwf	_sensor_acq_index,c	;volatile
  3463                           
  3464                           ;FastBuggy17_Main_Code.c: 319: sensor_acq_done = 0;
  3465  002D70  0E00               	movlw	0
  3466  002D72  6E39               	movwf	_sensor_acq_done,c	;volatile
  3467                           
  3468                           ;FastBuggy17_Main_Code.c: 320: SetADCChannel(sensor_acq_index);
  3469  002D74  503A               	movf	_sensor_acq_index,w,c	;volatile
  3470  002D76  EC9B  F010         	call	_SetADCChannel
  3471                           
  3472                           ;FastBuggy17_Main_Code.c: 321: ConvertADC();
  3473  002D7A  EC45  F017         	call	_ConvertADC	;wreg free
  3474                           
  3475                           ;FastBuggy17_Main_Code.c: 322: PIE1bits.ADIE = 1;
  3476  002D7E  8C9D               	bsf	3997,6,c	;volatile
  3477  002D80  0012               	return		;funcret
  3478  002D82                     __end_of_GetSensorReadings:
  3479                           	opt stack 0
  3480                           prodh	equ	0xFF4
  3481                           prodl	equ	0xFF3
  3482                           intcon	equ	0xFF2
  3483                           intcon2	equ	0xFF1
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _SetADCChannel *****************
  3493 ;; Defined at:
  3494 ;;		line 258 in file "FastBuggy17_Main_Code.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  channel         1    wreg     unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  channel         1    2[BANK0 ] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;		None               void
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;Total ram usage:        1 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    7
  3515 ;; This function calls:
  3516 ;;		_SetChanADC
  3517 ;; This function is called by:
  3518 ;;		_GetSensorReadings
  3519 ;;		_CalibrateLine
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text31
  3524  002136                     __ptext31:
  3525                           	opt stack 0
  3526  002136                     _SetADCChannel:
  3527                           	opt stack 22
  3528                           
  3529                           ;incstack = 0
  3530                           ;SetADCChannel@channel stored from wreg
  3531  002136  0100               	movlb	0	; () banked
  3532  002138  6F62               	movwf	SetADCChannel@channel& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;FastBuggy17_Main_Code.c: 260: switch (channel) {
  3536  00213A  D040               	goto	l3776
  3537  00213C                     l3742:
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;FastBuggy17_Main_Code.c: 262: SetChanADC(0b10000111);
  3541  00213C  0E87               	movlw	135
  3542  00213E  EC83  F016         	call	_SetChanADC
  3543                           
  3544                           ;FastBuggy17_Main_Code.c: 263: break;
  3545  002142  D06F               	goto	l233
  3546  002144                     l3744:
  3547                           
  3548                           ;FastBuggy17_Main_Code.c: 265: SetChanADC(0b10001111);
  3549  002144  0E8F               	movlw	143
  3550  002146  EC83  F016         	call	_SetChanADC
  3551                           
  3552                           ;FastBuggy17_Main_Code.c: 266: break;
  3553  00214A  D06B               	goto	l233
  3554  00214C                     l3746:
  3555                           
  3556                           ;FastBuggy17_Main_Code.c: 268: SetChanADC(0b10010111);
  3557  00214C  0E97               	movlw	151
  3558  00214E  EC83  F016         	call	_SetChanADC
  3559                           
  3560                           ;FastBuggy17_Main_Code.c: 269: break;
  3561  002152  D067               	goto	l233
  3562  002154                     l3748:
  3563                           
  3564                           ;FastBuggy17_Main_Code.c: 271: SetChanADC(0b10011111);
  3565  002154  0E9F               	movlw	159
  3566  002156  EC83  F016         	call	_SetChanADC
  3567                           
  3568                           ;FastBuggy17_Main_Code.c: 272: break;
  3569  00215A  D063               	goto	l233
  3570  00215C                     l3750:
  3571                           
  3572                           ;FastBuggy17_Main_Code.c: 274: SetChanADC(0b10100111);
  3573  00215C  0EA7               	movlw	167
  3574  00215E  EC83  F016         	call	_SetChanADC
  3575                           
  3576                           ;FastBuggy17_Main_Code.c: 275: break;
  3577  002162  D05F               	goto	l233
  3578  002164                     l3752:
  3579                           
  3580                           ;FastBuggy17_Main_Code.c: 277: SetChanADC(0b10101111);
  3581  002164  0EAF               	movlw	175
  3582  002166  EC83  F016         	call	_SetChanADC
  3583                           
  3584                           ;FastBuggy17_Main_Code.c: 278: break;
  3585  00216A  D05B               	goto	l233
  3586  00216C                     l3754:
  3587                           
  3588                           ;FastBuggy17_Main_Code.c: 280: SetChanADC(0b10110111);
  3589  00216C  0EB7               	movlw	183
  3590  00216E  EC83  F016         	call	_SetChanADC
  3591                           
  3592                           ;FastBuggy17_Main_Code.c: 281: break;
  3593  002172  D057               	goto	l233
  3594  002174                     l3756:
  3595                           
  3596                           ;FastBuggy17_Main_Code.c: 283: SetChanADC(0b10111111);
  3597  002174  0EBF               	movlw	191
  3598  002176  EC83  F016         	call	_SetChanADC
  3599                           
  3600                           ;FastBuggy17_Main_Code.c: 284: break;
  3601  00217A  D053               	goto	l233
  3602  00217C                     l3758:
  3603                           
  3604                           ;FastBuggy17_Main_Code.c: 286: SetChanADC(0b11000111);
  3605  00217C  0EC7               	movlw	199
  3606  00217E  EC83  F016         	call	_SetChanADC
  3607                           
  3608                           ;FastBuggy17_Main_Code.c: 287: break;
  3609  002182  D04F               	goto	l233
  3610  002184                     l3760:
  3611                           
  3612                           ;FastBuggy17_Main_Code.c: 289: SetChanADC(0b11001111);
  3613  002184  0ECF               	movlw	207
  3614  002186  EC83  F016         	call	_SetChanADC
  3615                           
  3616                           ;FastBuggy17_Main_Code.c: 290: break;
  3617  00218A  D04B               	goto	l233
  3618  00218C                     l3762:
  3619                           
  3620                           ;FastBuggy17_Main_Code.c: 292: SetChanADC(0b11010111);
  3621  00218C  0ED7               	movlw	215
  3622  00218E  EC83  F016         	call	_SetChanADC
  3623                           
  3624                           ;FastBuggy17_Main_Code.c: 293: break;
  3625  002192  D047               	goto	l233
  3626  002194                     l3764:
  3627                           
  3628                           ;FastBuggy17_Main_Code.c: 295: SetChanADC(0b11011111);
  3629  002194  0EDF               	movlw	223
  3630  002196  EC83  F016         	call	_SetChanADC
  3631                           
  3632                           ;FastBuggy17_Main_Code.c: 296: break;
  3633  00219A  D043               	goto	l233
  3634  00219C                     l3766:
  3635                           
  3636                           ;FastBuggy17_Main_Code.c: 298: SetChanADC(0b11100111);
  3637  00219C  0EE7               	movlw	231
  3638  00219E  EC83  F016         	call	_SetChanADC
  3639                           
  3640                           ;FastBuggy17_Main_Code.c: 299: break;
  3641  0021A2  D03F               	goto	l233
  3642  0021A4                     l3768:
  3643                           
  3644                           ;FastBuggy17_Main_Code.c: 301: SetChanADC(0b11101111);
  3645  0021A4  0EEF               	movlw	239
  3646  0021A6  EC83  F016         	call	_SetChanADC
  3647                           
  3648                           ;FastBuggy17_Main_Code.c: 302: break;
  3649  0021AA  D03B               	goto	l233
  3650  0021AC                     l3770:
  3651                           
  3652                           ;FastBuggy17_Main_Code.c: 304: SetChanADC(0b11110111);
  3653  0021AC  0EF7               	movlw	247
  3654  0021AE  EC83  F016         	call	_SetChanADC
  3655                           
  3656                           ;FastBuggy17_Main_Code.c: 305: break;
  3657  0021B2  D037               	goto	l233
  3658  0021B4                     l3772:
  3659                           
  3660                           ;FastBuggy17_Main_Code.c: 307: SetChanADC(0b11111111);
  3661  0021B4  0EFF               	movlw	255
  3662  0021B6  EC83  F016         	call	_SetChanADC
  3663                           
  3664                           ;FastBuggy17_Main_Code.c: 311: }
  3665                           
  3666                           ;FastBuggy17_Main_Code.c: 310: break;
  3667                           
  3668                           ;FastBuggy17_Main_Code.c: 309: default:
  3669                           
  3670                           ;FastBuggy17_Main_Code.c: 308: break;
  3671  0021BA  D033               	goto	l233
  3672  0021BC                     l3776:
  3673  0021BC  0100               	movlb	0	; () banked
  3674  0021BE  5162               	movf	SetADCChannel@channel& (0+255),w,b
  3675                           
  3676                           ; Switch size 1, requested type "space"
  3677                           ; Number of cases is 16, Range of values is 0 to 15
  3678                           ; switch strategies available:
  3679                           ; Name         Instructions Cycles
  3680                           ; simple_byte           49    25 (average)
  3681                           ;	Chosen strategy is simple_byte
  3682  0021C0  0A00               	xorlw	0	; case 0
  3683  0021C2  B4D8               	btfsc	status,2,c
  3684  0021C4  D7BB               	goto	l3742
  3685  0021C6  0A01               	xorlw	1	; case 1
  3686  0021C8  B4D8               	btfsc	status,2,c
  3687  0021CA  D7BC               	goto	l3744
  3688  0021CC  0A03               	xorlw	3	; case 2
  3689  0021CE  B4D8               	btfsc	status,2,c
  3690  0021D0  D7BD               	goto	l3746
  3691  0021D2  0A01               	xorlw	1	; case 3
  3692  0021D4  B4D8               	btfsc	status,2,c
  3693  0021D6  D7BE               	goto	l3748
  3694  0021D8  0A07               	xorlw	7	; case 4
  3695  0021DA  B4D8               	btfsc	status,2,c
  3696  0021DC  D7BF               	goto	l3750
  3697  0021DE  0A01               	xorlw	1	; case 5
  3698  0021E0  B4D8               	btfsc	status,2,c
  3699  0021E2  D7C0               	goto	l3752
  3700  0021E4  0A03               	xorlw	3	; case 6
  3701  0021E6  B4D8               	btfsc	status,2,c
  3702  0021E8  D7C1               	goto	l3754
  3703  0021EA  0A01               	xorlw	1	; case 7
  3704  0021EC  B4D8               	btfsc	status,2,c
  3705  0021EE  D7C2               	goto	l3756
  3706  0021F0  0A0F               	xorlw	15	; case 8
  3707  0021F2  B4D8               	btfsc	status,2,c
  3708  0021F4  D7C3               	goto	l3758
  3709  0021F6  0A01               	xorlw	1	; case 9
  3710  0021F8  B4D8               	btfsc	status,2,c
  3711  0021FA  D7C4               	goto	l3760
  3712  0021FC  0A03               	xorlw	3	; case 10
  3713  0021FE  B4D8               	btfsc	status,2,c
  3714  002200  D7C5               	goto	l3762
  3715  002202  0A01               	xorlw	1	; case 11
  3716  002204  B4D8               	btfsc	status,2,c
  3717  002206  D7C6               	goto	l3764
  3718  002208  0A07               	xorlw	7	; case 12
  3719  00220A  B4D8               	btfsc	status,2,c
  3720  00220C  D7C7               	goto	l3766
  3721  00220E  0A01               	xorlw	1	; case 13
  3722  002210  B4D8               	btfsc	status,2,c
  3723  002212  D7C8               	goto	l3768
  3724  002214  0A03               	xorlw	3	; case 14
  3725  002216  B4D8               	btfsc	status,2,c
  3726  002218  D7C9               	goto	l3770
  3727  00221A  0A01               	xorlw	1	; case 15
  3728  00221C  B4D8               	btfsc	status,2,c
  3729  00221E  D7CA               	goto	l3772
  3730  002220  D000               	goto	l233
  3731  002222                     l233:
  3732  002222  0012               	return		;funcret
  3733  002224                     __end_of_SetADCChannel:
  3734                           	opt stack 0
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           intcon2	equ	0xFF1
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _SetChanADC *****************
  3748 ;; Defined at:
  3749 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcsetch.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  channel         1    wreg     unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  channel         1    1[BANK0 ] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        2 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    6
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_SetADCChannel
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text32
  3778  002D06                     __ptext32:
  3779                           	opt stack 0
  3780  002D06                     _SetChanADC:
  3781                           	opt stack 22
  3782                           
  3783                           ;incstack = 0
  3784                           ;SetChanADC@channel stored from wreg
  3785  002D06  0100               	movlb	0	; () banked
  3786  002D08  6F61               	movwf	SetChanADC@channel& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789  002D0A  CFC2 F060          	movff	4034,??_SetChanADC	;volatile
  3790  002D0E  0EC3               	movlw	195
  3791  002D10  0100               	movlb	0	; () banked
  3792  002D12  1760               	andwf	??_SetChanADC& (0+255),f,b
  3793  002D14  0100               	movlb	0	; () banked
  3794  002D16  90D8               	bcf	status,0,c
  3795  002D18  3161               	rrcf	SetChanADC@channel& (0+255),w,b
  3796  002D1A  0B3C               	andlw	60
  3797  002D1C  0100               	movlb	0	; () banked
  3798  002D1E  1160               	iorwf	??_SetChanADC& (0+255),w,b
  3799  002D20  6EC2               	movwf	4034,c	;volatile
  3800                           
  3801                           ; BSR set to: 0
  3802  002D22  0012               	return		;funcret
  3803  002D24                     __end_of_SetChanADC:
  3804                           	opt stack 0
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           intcon	equ	0xFF2
  3808                           intcon2	equ	0xFF1
  3809                           postinc0	equ	0xFEE
  3810                           wreg	equ	0xFE8
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function _ConvertADC *****************
  3818 ;; Defined at:
  3819 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;		None
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;		None               void
  3826 ;; Registers used:
  3827 ;;		None
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;Total ram usage:        0 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    6
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_GetSensorReadings
  3844 ;;		_CalibrateLine
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text33
  3849  002E8A                     __ptext33:
  3850                           	opt stack 0
  3851  002E8A                     _ConvertADC:
  3852                           	opt stack 23
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;incstack = 0
  3856  002E8A  82C2               	bsf	4034,1,c	;volatile
  3857  002E8C  0012               	return		;funcret
  3858  002E8E                     __end_of_ConvertADC:
  3859                           	opt stack 0
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           intcon2	equ	0xFF1
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           postinc2	equ	0xFDE
  3867                           postdec2	equ	0xFDD
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _BusySensorAcq *****************
  3873 ;; Defined at:
  3874 ;;		line 327 in file "FastBuggy17_Main_Code.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      unsigned char 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;Total ram usage:        0 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    6
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_CalibrateSensors
  3899 ;;		_CalibrateLine
  3900 ;;		_main
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text34
  3905  002E0A                     __ptext34:
  3906                           	opt stack 0
  3907  002E0A                     _BusySensorAcq:
  3908                           	opt stack 23
  3909                           
  3910                           ;FastBuggy17_Main_Code.c: 329: return (!sensor_acq_done);
  3911                           
  3912                           ;incstack = 0
  3913  002E0A  5039               	movf	_sensor_acq_done,w,c	;volatile
  3914  002E0C  A4D8               	btfss	status,2,c
  3915  002E0E  D002               	goto	u3340
  3916  002E10  0E01               	movlw	1
  3917  002E12  D002               	goto	l239
  3918  002E14                     u3340:
  3919  002E14  0E00               	movlw	0
  3920  002E16  D000               	goto	l239
  3921  002E18                     l239:
  3922  002E18  0012               	return		;funcret
  3923  002E1A                     __end_of_BusySensorAcq:
  3924                           	opt stack 0
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           intcon2	equ	0xFF1
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _BusyADC *****************
  3938 ;; Defined at:
  3939 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    6
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_CalibrateLine
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text35
  3968  002E54                     __ptext35:
  3969                           	opt stack 0
  3970  002E54                     _BusyADC:
  3971                           	opt stack 23
  3972                           
  3973                           ;incstack = 0
  3974  002E54  A2C2               	btfss	4034,1,c	;volatile
  3975  002E56  D002               	goto	u3380
  3976  002E58  0E01               	movlw	1
  3977  002E5A  D002               	goto	l399
  3978  002E5C                     u3380:
  3979  002E5C  0E00               	movlw	0
  3980  002E5E  D000               	goto	l399
  3981  002E60                     l399:
  3982  002E60  0012               	return		;funcret
  3983  002E62                     __end_of_BusyADC:
  3984                           	opt stack 0
  3985                           prodh	equ	0xFF4
  3986                           prodl	equ	0xFF3
  3987                           intcon	equ	0xFF2
  3988                           intcon2	equ	0xFF1
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _CalculateSensorSums *****************
  3998 ;; Defined at:
  3999 ;;		line 430 in file "FastBuggy17_Main_Code.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  index           1   90[BANK0 ] unsigned char 
  4004 ;;  sum             1   89[BANK0 ] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      unsigned char 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        5 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:   11
  4021 ;; This function calls:
  4022 ;;		___ftmul
  4023 ;;		___fttol
  4024 ;;		___lbtoft
  4025 ;;		_pow
  4026 ;; This function is called by:
  4027 ;;		_main
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text36
  4032  00253C                     __ptext36:
  4033                           	opt stack 0
  4034  00253C                     _CalculateSensorSums:
  4035                           	opt stack 19
  4036                           
  4037                           ;FastBuggy17_Main_Code.c: 431: unsigned char index, sum = 0;
  4038                           
  4039                           ;incstack = 0
  4040  00253C  0E00               	movlw	0
  4041  00253E  0100               	movlb	0	; () banked
  4042  002540  6FB9               	movwf	CalculateSensorSums@sum& (0+255),b
  4043                           
  4044                           ;FastBuggy17_Main_Code.c: 433: for(index = 0; index < 5; index++) {
  4045  002542  0E00               	movlw	0
  4046  002544  0100               	movlb	0	; () banked
  4047  002546  6FBA               	movwf	CalculateSensorSums@index& (0+255),b
  4048  002548                     l4102:
  4049                           
  4050                           ; BSR set to: 0
  4051  002548  0E04               	movlw	4
  4052  00254A  0100               	movlb	0	; () banked
  4053  00254C  65BA               	cpfsgt	CalculateSensorSums@index& (0+255),b
  4054  00254E  D001               	goto	l4106
  4055                           
  4056                           ; BSR set to: 0
  4057  002550  D044               	goto	l4114
  4058  002552                     l4106:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;FastBuggy17_Main_Code.c: 435: sum += (unsigned char) (sensor_status[index] * pow(2, ind
      +                          ex));
  4062  002552  0100               	movlb	0	; () banked
  4063  002554  51BA               	movf	CalculateSensorSums@index& (0+255),w,b
  4064  002556  ECEF  F015         	call	___lbtoft
  4065  00255A  C068  F0A8         	movff	?___lbtoft,pow@y
  4066  00255E  C069  F0A9         	movff	?___lbtoft+1,pow@y+1
  4067  002562  C06A  F0AA         	movff	?___lbtoft+2,pow@y+2
  4068  002566  0E00               	movlw	0
  4069  002568  0100               	movlb	0	; () banked
  4070  00256A  6FA5               	movwf	pow@x& (0+255),b
  4071  00256C  0E00               	movlw	0
  4072  00256E  0100               	movlb	0	; () banked
  4073  002570  6FA6               	movwf	(pow@x+1)& (0+255),b
  4074  002572  0E40               	movlw	64
  4075  002574  0100               	movlb	0	; () banked
  4076  002576  6FA7               	movwf	(pow@x+2)& (0+255),b
  4077  002578  EC71  F00A         	call	_pow	;wreg free
  4078  00257C  C0A5  F0B6         	movff	?_pow,_CalculateSensorSums$2805
  4079  002580  C0A6  F0B7         	movff	?_pow+1,_CalculateSensorSums$2805+1
  4080  002584  C0A7  F0B8         	movff	?_pow+2,_CalculateSensorSums$2805+2
  4081                           
  4082                           ;FastBuggy17_Main_Code.c: 435: sum += (unsigned char) (sensor_status[index] * pow(2, ind
      +                          ex));
  4083  002588  C0B6  F06F         	movff	_CalculateSensorSums$2805,___ftmul@f2
  4084  00258C  C0B7  F070         	movff	_CalculateSensorSums$2805+1,___ftmul@f2+1
  4085  002590  C0B8  F071         	movff	_CalculateSensorSums$2805+2,___ftmul@f2+2
  4086  002594  0100               	movlb	0	; () banked
  4087  002596  51BA               	movf	CalculateSensorSums@index& (0+255),w,b
  4088  002598  0D01               	mullw	1
  4089  00259A  0E2E               	movlw	low _sensor_status
  4090  00259C  24F3               	addwf	prodl,w,c
  4091  00259E  6ED9               	movwf	fsr2l,c
  4092  0025A0  0E00               	movlw	high _sensor_status
  4093  0025A2  20F4               	addwfc	prodh,w,c
  4094  0025A4  6EDA               	movwf	fsr2h,c
  4095  0025A6  50DF               	movf	indf2,w,c
  4096  0025A8  ECEF  F015         	call	___lbtoft
  4097  0025AC  C068  F06C         	movff	?___lbtoft,___ftmul@f1
  4098  0025B0  C069  F06D         	movff	?___lbtoft+1,___ftmul@f1+1
  4099  0025B4  C06A  F06E         	movff	?___lbtoft+2,___ftmul@f1+2
  4100  0025B8  ECFF  F00B         	call	___ftmul	;wreg free
  4101  0025BC  C06C  F07B         	movff	?___ftmul,___fttol@f1
  4102  0025C0  C06D  F07C         	movff	?___ftmul+1,___fttol@f1+1
  4103  0025C4  C06E  F07D         	movff	?___ftmul+2,___fttol@f1+2
  4104  0025C8  ECEE  F00D         	call	___fttol	;wreg free
  4105  0025CC  0100               	movlb	0	; () banked
  4106  0025CE  517B               	movf	?___fttol& (0+255),w,b
  4107  0025D0  0100               	movlb	0	; () banked
  4108  0025D2  27B9               	addwf	CalculateSensorSums@sum& (0+255),f,b
  4109                           
  4110                           ; BSR set to: 0
  4111  0025D4  0100               	movlb	0	; () banked
  4112  0025D6  2BBA               	incf	CalculateSensorSums@index& (0+255),f,b
  4113  0025D8  D7B7               	goto	l4102
  4114  0025DA                     l4114:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;FastBuggy17_Main_Code.c: 437: }
  4118                           ;FastBuggy17_Main_Code.c: 439: return(sum);
  4119  0025DA  0100               	movlb	0	; () banked
  4120  0025DC  51B9               	movf	CalculateSensorSums@sum& (0+255),w,b
  4121  0025DE  D000               	goto	l276
  4122  0025E0                     l276:
  4123                           
  4124                           ; BSR set to: 0
  4125  0025E0  0012               	return		;funcret
  4126  0025E2                     __end_of_CalculateSensorSums:
  4127                           	opt stack 0
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           intcon2	equ	0xFF1
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           fsr2h	equ	0xFDA
  4138                           fsr2l	equ	0xFD9
  4139                           status	equ	0xFD8
  4140                           
  4141 ;; *************** function _pow *****************
  4142 ;; Defined at:
  4143 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  x               3   69[BANK0 ] unsigned char 
  4146 ;;  y               3   72[BANK0 ] unsigned char 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  yi              4   82[BANK0 ] unsigned long 
  4149 ;;  sign            1   81[BANK0 ] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  3   69[BANK0 ] unsigned char 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:       17 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:   10
  4166 ;; This function calls:
  4167 ;;		___ftge
  4168 ;;		___ftmul
  4169 ;;		___ftneg
  4170 ;;		___fttol
  4171 ;;		___lltoft
  4172 ;;		_exp
  4173 ;;		_log
  4174 ;; This function is called by:
  4175 ;;		_CalculateSensorSums
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text37
  4180  0014E2                     __ptext37:
  4181                           	opt stack 0
  4182  0014E2                     _pow:
  4183                           	opt stack 19
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;incstack = 0
  4187  0014E2  0E00               	movlw	0
  4188  0014E4  0100               	movlb	0	; () banked
  4189  0014E6  6FB1               	movwf	pow@sign& (0+255),b
  4190                           
  4191                           ; BSR set to: 0
  4192  0014E8  0100               	movlb	0	; () banked
  4193  0014EA  51A5               	movf	pow@x& (0+255),w,b
  4194  0014EC  0100               	movlb	0	; () banked
  4195  0014EE  11A6               	iorwf	(pow@x+1)& (0+255),w,b
  4196  0014F0  0100               	movlb	0	; () banked
  4197  0014F2  11A7               	iorwf	(pow@x+2)& (0+255),w,b
  4198  0014F4  A4D8               	btfss	status,2,c
  4199  0014F6  D016               	goto	l3978
  4200                           
  4201                           ; BSR set to: 0
  4202  0014F8  0E00               	movlw	0
  4203  0014FA  0100               	movlb	0	; () banked
  4204  0014FC  6F60               	movwf	___ftge@ff1& (0+255),b
  4205  0014FE  0E00               	movlw	0
  4206  001500  0100               	movlb	0	; () banked
  4207  001502  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  4208  001504  0E00               	movlw	0
  4209  001506  0100               	movlb	0	; () banked
  4210  001508  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  4211  00150A  C0A8  F063         	movff	pow@y,___ftge@ff2
  4212  00150E  C0A9  F064         	movff	pow@y+1,___ftge@ff2+1
  4213  001512  C0AA  F065         	movff	pow@y+2,___ftge@ff2+2
  4214  001516  EC87  F011         	call	___ftge	;wreg free
  4215  00151A  0100               	movlb	0	; () banked
  4216  00151C  A0D8               	btfss	status,0,c
  4217  00151E  D045               	goto	L3
  4218  001520  D03F               	goto	u3430
  4219                           
  4220                           ; BSR set to: 0
  4221                           
  4222                           ; BSR set to: 0
  4223                           
  4224                           ; BSR set to: 0
  4225  001522  D0AB               	goto	l1160
  4226  001524                     l3978:
  4227                           
  4228                           ; BSR set to: 0
  4229  001524  0100               	movlb	0	; () banked
  4230  001526  51A8               	movf	pow@y& (0+255),w,b
  4231  001528  0100               	movlb	0	; () banked
  4232  00152A  11A9               	iorwf	(pow@y+1)& (0+255),w,b
  4233  00152C  0100               	movlb	0	; () banked
  4234  00152E  11AA               	iorwf	(pow@y+2)& (0+255),w,b
  4235  001530  A4D8               	btfss	status,2,c
  4236  001532  D009               	goto	l3984
  4237                           
  4238                           ; BSR set to: 0
  4239  001534  0E00               	movlw	0
  4240  001536  0100               	movlb	0	; () banked
  4241  001538  6FA5               	movwf	?_pow& (0+255),b
  4242  00153A  0E80               	movlw	128
  4243  00153C  0100               	movlb	0	; () banked
  4244  00153E  6FA6               	movwf	(?_pow+1)& (0+255),b
  4245  001540  0E3F               	movlw	63
  4246  001542  D03A               	goto	L2
  4247                           
  4248                           ; BSR set to: 0
  4249  001544  D09A               	goto	l1160
  4250  001546                     l3984:
  4251                           
  4252                           ; BSR set to: 0
  4253  001546  0100               	movlb	0	; () banked
  4254  001548  AFA7               	btfss	(pow@x+2)& (0+255),7,b
  4255  00154A  D04D               	goto	l3996
  4256                           
  4257                           ; BSR set to: 0
  4258  00154C  C0A8  F07B         	movff	pow@y,___fttol@f1
  4259  001550  C0A9  F07C         	movff	pow@y+1,___fttol@f1+1
  4260  001554  C0AA  F07D         	movff	pow@y+2,___fttol@f1+2
  4261  001558  ECEE  F00D         	call	___fttol	;wreg free
  4262  00155C  C07B  F0B2         	movff	?___fttol,pow@yi
  4263  001560  C07C  F0B3         	movff	?___fttol+1,pow@yi+1
  4264  001564  C07D  F0B4         	movff	?___fttol+2,pow@yi+2
  4265  001568  C07E  F0B5         	movff	?___fttol+3,pow@yi+3
  4266  00156C  C0B2  F068         	movff	pow@yi,___lltoft@c
  4267  001570  C0B3  F069         	movff	pow@yi+1,___lltoft@c+1
  4268  001574  C0B4  F06A         	movff	pow@yi+2,___lltoft@c+2
  4269  001578  C0B5  F06B         	movff	pow@yi+3,___lltoft@c+3
  4270  00157C  EC92  F013         	call	___lltoft	;wreg free
  4271  001580  0100               	movlb	0	; () banked
  4272  001582  51A8               	movf	pow@y& (0+255),w,b
  4273  001584  0100               	movlb	0	; () banked
  4274  001586  1968               	xorwf	?___lltoft& (0+255),w,b
  4275  001588  E10B               	bnz	u3430
  4276  00158A  0100               	movlb	0	; () banked
  4277  00158C  51A9               	movf	(pow@y+1)& (0+255),w,b
  4278  00158E  0100               	movlb	0	; () banked
  4279  001590  1969               	xorwf	(?___lltoft+1)& (0+255),w,b
  4280  001592  E106               	bnz	u3430
  4281  001594  0100               	movlb	0	; () banked
  4282  001596  51AA               	movf	(pow@y+2)& (0+255),w,b
  4283  001598  0100               	movlb	0	; () banked
  4284  00159A  196A               	xorwf	(?___lltoft+2)& (0+255),w,b
  4285  00159C  B4D8               	btfsc	status,2,c
  4286  00159E  D00F               	goto	l3992
  4287  0015A0                     u3430:
  4288                           
  4289                           ; BSR set to: 0
  4290  0015A0  0E00               	movlw	0
  4291  0015A2  0100               	movlb	0	; () banked
  4292  0015A4  6FDE               	movwf	(_errno+1)& (0+255),b
  4293  0015A6  0E21               	movlw	33
  4294  0015A8  6FDD               	movwf	_errno& (0+255),b
  4295  0015AA                     L3:
  4296  0015AA  0E00               	movlw	0
  4297  0015AC  0100               	movlb	0	; () banked
  4298  0015AE  6FA5               	movwf	?_pow& (0+255),b
  4299  0015B0  0E00               	movlw	0
  4300  0015B2  0100               	movlb	0	; () banked
  4301  0015B4  6FA6               	movwf	(?_pow+1)& (0+255),b
  4302  0015B6  0E00               	movlw	0
  4303  0015B8                     L2:
  4304  0015B8  0100               	movlb	0	; () banked
  4305  0015BA  6FA7               	movwf	(?_pow+2)& (0+255),b
  4306                           
  4307                           ; BSR set to: 0
  4308  0015BC  D05E               	goto	l1160
  4309  0015BE                     l3992:
  4310                           
  4311                           ; BSR set to: 0
  4312  0015BE  0100               	movlb	0	; () banked
  4313  0015C0  51B2               	movf	pow@yi& (0+255),w,b
  4314  0015C2  0B01               	andlw	1
  4315  0015C4  0100               	movlb	0	; () banked
  4316  0015C6  6FB1               	movwf	pow@sign& (0+255),b
  4317                           
  4318                           ; BSR set to: 0
  4319  0015C8  C0A5  F060         	movff	pow@x,___ftneg@f1
  4320  0015CC  C0A6  F061         	movff	pow@x+1,___ftneg@f1+1
  4321  0015D0  C0A7  F062         	movff	pow@x+2,___ftneg@f1+2
  4322  0015D4  ECD7  F015         	call	___ftneg	;wreg free
  4323  0015D8  C060  F0A5         	movff	?___ftneg,pow@x
  4324  0015DC  C061  F0A6         	movff	?___ftneg+1,pow@x+1
  4325  0015E0  C062  F0A7         	movff	?___ftneg+2,pow@x+2
  4326  0015E4  D000               	goto	l3996
  4327  0015E6                     l3996:
  4328  0015E6  C0A5  F093         	movff	pow@x,log@x
  4329  0015EA  C0A6  F094         	movff	pow@x+1,log@x+1
  4330  0015EE  C0A7  F095         	movff	pow@x+2,log@x+2
  4331  0015F2  EC4E  F00D         	call	_log	;wreg free
  4332  0015F6  C093  F0AB         	movff	?_log,_pow$2806
  4333  0015FA  C094  F0AC         	movff	?_log+1,_pow$2806+1
  4334  0015FE  C095  F0AD         	movff	?_log+2,_pow$2806+2
  4335  001602  C0AB  F06C         	movff	_pow$2806,___ftmul@f1
  4336  001606  C0AC  F06D         	movff	_pow$2806+1,___ftmul@f1+1
  4337  00160A  C0AD  F06E         	movff	_pow$2806+2,___ftmul@f1+2
  4338  00160E  C0A8  F06F         	movff	pow@y,___ftmul@f2
  4339  001612  C0A9  F070         	movff	pow@y+1,___ftmul@f2+1
  4340  001616  C0AA  F071         	movff	pow@y+2,___ftmul@f2+2
  4341  00161A  ECFF  F00B         	call	___ftmul	;wreg free
  4342  00161E  C06C  F0AE         	movff	?___ftmul,_pow$2807
  4343  001622  C06D  F0AF         	movff	?___ftmul+1,_pow$2807+1
  4344  001626  C06E  F0B0         	movff	?___ftmul+2,_pow$2807+2
  4345  00162A  C0AE  F09C         	movff	_pow$2807,exp@x
  4346  00162E  C0AF  F09D         	movff	_pow$2807+1,exp@x+1
  4347  001632  C0B0  F09E         	movff	_pow$2807+2,exp@x+2
  4348  001636  EC5D  F009         	call	_exp	;wreg free
  4349  00163A  C09C  F0A5         	movff	?_exp,pow@x
  4350  00163E  C09D  F0A6         	movff	?_exp+1,pow@x+1
  4351  001642  C09E  F0A7         	movff	?_exp+2,pow@x+2
  4352  001646  0100               	movlb	0	; () banked
  4353  001648  51B1               	movf	pow@sign& (0+255),w,b
  4354  00164A  0100               	movlb	0	; () banked
  4355  00164C  B4D8               	btfsc	status,2,c
  4356  00164E  D00F               	goto	l1164
  4357                           
  4358                           ; BSR set to: 0
  4359  001650  C0A5  F060         	movff	pow@x,___ftneg@f1
  4360  001654  C0A6  F061         	movff	pow@x+1,___ftneg@f1+1
  4361  001658  C0A7  F062         	movff	pow@x+2,___ftneg@f1+2
  4362  00165C  ECD7  F015         	call	___ftneg	;wreg free
  4363  001660  C060  F0A5         	movff	?___ftneg,?_pow
  4364  001664  C061  F0A6         	movff	?___ftneg+1,?_pow+1
  4365  001668  C062  F0A7         	movff	?___ftneg+2,?_pow+2
  4366  00166C  D006               	goto	l1160
  4367  00166E                     l1164:
  4368                           
  4369                           ; BSR set to: 0
  4370  00166E  C0A5  F0A5         	movff	pow@x,?_pow
  4371  001672  C0A6  F0A6         	movff	pow@x+1,?_pow+1
  4372  001676  C0A7  F0A7         	movff	pow@x+2,?_pow+2
  4373  00167A                     l1160:
  4374  00167A  0012               	return		;funcret
  4375  00167C                     __end_of_pow:
  4376                           	opt stack 0
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           intcon2	equ	0xFF1
  4381                           postinc0	equ	0xFEE
  4382                           wreg	equ	0xFE8
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _log *****************
  4391 ;; Defined at:
  4392 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  x               3   51[BANK0 ] unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  exponent        2   54[BANK0 ] int 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  3   51[BANK0 ] int 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4406 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;Total ram usage:        5 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    9
  4413 ;; This function calls:
  4414 ;;		___awtoft
  4415 ;;		___ftadd
  4416 ;;		___ftmul
  4417 ;;		_eval_poly
  4418 ;;		_frexp
  4419 ;; This function is called by:
  4420 ;;		_pow
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text38
  4425  001A9C                     __ptext38:
  4426                           	opt stack 0
  4427  001A9C                     _log:
  4428                           	opt stack 19
  4429                           
  4430                           ;incstack = 0
  4431  001A9C  0100               	movlb	0	; () banked
  4432  001A9E  AF95               	btfss	(log@x+2)& (0+255),7,b
  4433  001AA0  D006               	goto	l3804
  4434                           
  4435                           ; BSR set to: 0
  4436  001AA2  0E00               	movlw	0
  4437  001AA4  0100               	movlb	0	; () banked
  4438  001AA6  6FDE               	movwf	(_errno+1)& (0+255),b
  4439  001AA8  0E21               	movlw	33
  4440  001AAA  D00D               	goto	L4
  4441                           
  4442                           ; BSR set to: 0
  4443  001AAC  D096               	goto	l1222
  4444  001AAE                     l3804:
  4445                           
  4446                           ; BSR set to: 0
  4447  001AAE  0100               	movlb	0	; () banked
  4448  001AB0  5193               	movf	log@x& (0+255),w,b
  4449  001AB2  0100               	movlb	0	; () banked
  4450  001AB4  1194               	iorwf	(log@x+1)& (0+255),w,b
  4451  001AB6  0100               	movlb	0	; () banked
  4452  001AB8  1195               	iorwf	(log@x+2)& (0+255),w,b
  4453  001ABA  A4D8               	btfss	status,2,c
  4454  001ABC  D00F               	goto	l3810
  4455                           
  4456                           ; BSR set to: 0
  4457  001ABE  0E00               	movlw	0
  4458  001AC0  0100               	movlb	0	; () banked
  4459  001AC2  6FDE               	movwf	(_errno+1)& (0+255),b
  4460  001AC4  0E22               	movlw	34
  4461  001AC6                     L4:
  4462  001AC6  6FDD               	movwf	_errno& (0+255),b
  4463  001AC8  0E00               	movlw	0
  4464  001ACA  0100               	movlb	0	; () banked
  4465  001ACC  6F93               	movwf	?_log& (0+255),b
  4466  001ACE  0E00               	movlw	0
  4467  001AD0  0100               	movlb	0	; () banked
  4468  001AD2  6F94               	movwf	(?_log+1)& (0+255),b
  4469  001AD4  0E00               	movlw	0
  4470  001AD6  0100               	movlb	0	; () banked
  4471  001AD8  6F95               	movwf	(?_log+2)& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474  001ADA  D07F               	goto	l1222
  4475  001ADC                     l3810:
  4476                           
  4477                           ; BSR set to: 0
  4478  001ADC  0E00               	movlw	0
  4479  001ADE  0100               	movlb	0	; () banked
  4480  001AE0  6F6F               	movwf	___ftmul@f2& (0+255),b
  4481  001AE2  0E00               	movlw	0
  4482  001AE4  0100               	movlb	0	; () banked
  4483  001AE6  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4484  001AE8  0E40               	movlw	64
  4485  001AEA  0100               	movlb	0	; () banked
  4486  001AEC  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4487  001AEE  0E96               	movlw	low log@exponent
  4488  001AF0  0100               	movlb	0	; () banked
  4489  001AF2  6F63               	movwf	frexp@eptr& (0+255),b
  4490  001AF4  0E00               	movlw	high log@exponent
  4491  001AF6  0100               	movlb	0	; () banked
  4492  001AF8  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  4493  001AFA  C093  F060         	movff	log@x,frexp@value
  4494  001AFE  C094  F061         	movff	log@x+1,frexp@value+1
  4495  001B02  C095  F062         	movff	log@x+2,frexp@value+2
  4496  001B06  EC47  F012         	call	_frexp	;wreg free
  4497  001B0A  C060  F06C         	movff	?_frexp,___ftmul@f1
  4498  001B0E  C061  F06D         	movff	?_frexp+1,___ftmul@f1+1
  4499  001B12  C062  F06E         	movff	?_frexp+2,___ftmul@f1+2
  4500  001B16  ECFF  F00B         	call	___ftmul	;wreg free
  4501  001B1A  C06C  F07B         	movff	?___ftmul,___ftadd@f1
  4502  001B1E  C06D  F07C         	movff	?___ftmul+1,___ftadd@f1+1
  4503  001B22  C06E  F07D         	movff	?___ftmul+2,___ftadd@f1+2
  4504  001B26  0E00               	movlw	0
  4505  001B28  0100               	movlb	0	; () banked
  4506  001B2A  6F7E               	movwf	___ftadd@f2& (0+255),b
  4507  001B2C  0E80               	movlw	128
  4508  001B2E  0100               	movlb	0	; () banked
  4509  001B30  6F7F               	movwf	(___ftadd@f2+1)& (0+255),b
  4510  001B32  0EBF               	movlw	191
  4511  001B34  0100               	movlb	0	; () banked
  4512  001B36  6F80               	movwf	(___ftadd@f2+2)& (0+255),b
  4513  001B38  EC1E  F008         	call	___ftadd	;wreg free
  4514  001B3C  C07B  F093         	movff	?___ftadd,log@x
  4515  001B40  C07C  F094         	movff	?___ftadd+1,log@x+1
  4516  001B44  C07D  F095         	movff	?___ftadd+2,log@x+2
  4517  001B48  0100               	movlb	0	; () banked
  4518  001B4A  0796               	decf	log@exponent& (0+255),f,b
  4519  001B4C  A0D8               	btfss	status,0,c
  4520  001B4E  0797               	decf	(log@exponent+1)& (0+255),f,b
  4521                           
  4522                           ; BSR set to: 0
  4523  001B50  C093  F087         	movff	log@x,eval_poly@x
  4524  001B54  C094  F088         	movff	log@x+1,eval_poly@x+1
  4525  001B58  C095  F089         	movff	log@x+2,eval_poly@x+2
  4526  001B5C  0E1F               	movlw	low log@coeff
  4527  001B5E  0100               	movlb	0	; () banked
  4528  001B60  6F8A               	movwf	eval_poly@d& (0+255),b
  4529  001B62  0E10               	movlw	high log@coeff
  4530  001B64  0100               	movlb	0	; () banked
  4531  001B66  6F8B               	movwf	(eval_poly@d+1)& (0+255),b
  4532  001B68  0E00               	movlw	0
  4533  001B6A  0100               	movlb	0	; () banked
  4534  001B6C  6F8D               	movwf	(eval_poly@n+1)& (0+255),b
  4535  001B6E  0E08               	movlw	8
  4536  001B70  6F8C               	movwf	eval_poly@n& (0+255),b
  4537  001B72  EC20  F010         	call	_eval_poly	;wreg free
  4538  001B76  C087  F093         	movff	?_eval_poly,log@x
  4539  001B7A  C088  F094         	movff	?_eval_poly+1,log@x+1
  4540  001B7E  C089  F095         	movff	?_eval_poly+2,log@x+2
  4541  001B82  0E72               	movlw	114
  4542  001B84  0100               	movlb	0	; () banked
  4543  001B86  6F6F               	movwf	___ftmul@f2& (0+255),b
  4544  001B88  0E31               	movlw	49
  4545  001B8A  0100               	movlb	0	; () banked
  4546  001B8C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4547  001B8E  0E3F               	movlw	63
  4548  001B90  0100               	movlb	0	; () banked
  4549  001B92  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4550  001B94  C096  F068         	movff	log@exponent,___awtoft@c
  4551  001B98  C097  F069         	movff	log@exponent+1,___awtoft@c+1
  4552  001B9C  EC53  F015         	call	___awtoft	;wreg free
  4553  001BA0  C068  F06C         	movff	?___awtoft,___ftmul@f1
  4554  001BA4  C069  F06D         	movff	?___awtoft+1,___ftmul@f1+1
  4555  001BA8  C06A  F06E         	movff	?___awtoft+2,___ftmul@f1+2
  4556  001BAC  ECFF  F00B         	call	___ftmul	;wreg free
  4557  001BB0  C06C  F07B         	movff	?___ftmul,___ftadd@f1
  4558  001BB4  C06D  F07C         	movff	?___ftmul+1,___ftadd@f1+1
  4559  001BB8  C06E  F07D         	movff	?___ftmul+2,___ftadd@f1+2
  4560  001BBC  C093  F07E         	movff	log@x,___ftadd@f2
  4561  001BC0  C094  F07F         	movff	log@x+1,___ftadd@f2+1
  4562  001BC4  C095  F080         	movff	log@x+2,___ftadd@f2+2
  4563  001BC8  EC1E  F008         	call	___ftadd	;wreg free
  4564  001BCC  C07B  F093         	movff	?___ftadd,?_log
  4565  001BD0  C07C  F094         	movff	?___ftadd+1,?_log+1
  4566  001BD4  C07D  F095         	movff	?___ftadd+2,?_log+2
  4567  001BD8  D000               	goto	l1222
  4568  001BDA                     l1222:
  4569  001BDA  0012               	return		;funcret
  4570  001BDC                     __end_of_log:
  4571                           	opt stack 0
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon	equ	0xFF2
  4575                           intcon2	equ	0xFF1
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           indf2	equ	0xFDF
  4579                           postinc2	equ	0xFDE
  4580                           postdec2	equ	0xFDD
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _exp *****************
  4586 ;; Defined at:
  4587 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  x               3   60[BANK0 ] int 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;  exponent        2   66[BANK0 ] int 
  4592 ;;  sign            1   68[BANK0 ] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  3   60[BANK0 ] unsigned char 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        9 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    9
  4609 ;; This function calls:
  4610 ;;		___awtoft
  4611 ;;		___ftdiv
  4612 ;;		___ftge
  4613 ;;		___ftmul
  4614 ;;		___ftneg
  4615 ;;		___ftsub
  4616 ;;		___fttol
  4617 ;;		_eval_poly
  4618 ;;		_floor
  4619 ;;		_ldexp
  4620 ;; This function is called by:
  4621 ;;		_pow
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text39
  4626  0012BA                     __ptext39:
  4627                           	opt stack 0
  4628  0012BA                     _exp:
  4629                           	opt stack 19
  4630                           
  4631                           ;incstack = 0
  4632  0012BA  0100               	movlb	0	; () banked
  4633  0012BC  519C               	movf	exp@x& (0+255),w,b
  4634  0012BE  0100               	movlb	0	; () banked
  4635  0012C0  119D               	iorwf	(exp@x+1)& (0+255),w,b
  4636  0012C2  0100               	movlb	0	; () banked
  4637  0012C4  119E               	iorwf	(exp@x+2)& (0+255),w,b
  4638  0012C6  A4D8               	btfss	status,2,c
  4639  0012C8  D009               	goto	l3826
  4640                           
  4641                           ; BSR set to: 0
  4642  0012CA  0E00               	movlw	0
  4643  0012CC  0100               	movlb	0	; () banked
  4644  0012CE  6F9C               	movwf	?_exp& (0+255),b
  4645  0012D0  0E80               	movlw	128
  4646  0012D2  0100               	movlb	0	; () banked
  4647  0012D4  6F9D               	movwf	(?_exp+1)& (0+255),b
  4648  0012D6  0E3F               	movlw	63
  4649  0012D8  D03D               	goto	L6
  4650                           
  4651                           ; BSR set to: 0
  4652  0012DA  D102               	goto	l1180
  4653  0012DC                     l3826:
  4654                           
  4655                           ; BSR set to: 0
  4656  0012DC  0E72               	movlw	114
  4657  0012DE  0100               	movlb	0	; () banked
  4658  0012E0  6F60               	movwf	___ftge@ff1& (0+255),b
  4659  0012E2  0E31               	movlw	49
  4660  0012E4  0100               	movlb	0	; () banked
  4661  0012E6  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  4662  0012E8  0E44               	movlw	68
  4663  0012EA  0100               	movlb	0	; () banked
  4664  0012EC  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  4665  0012EE  C09C  F063         	movff	exp@x,___ftge@ff2
  4666  0012F2  C09D  F064         	movff	exp@x+1,___ftge@ff2+1
  4667  0012F6  C09E  F065         	movff	exp@x+2,___ftge@ff2+2
  4668  0012FA  EC87  F011         	call	___ftge	;wreg free
  4669  0012FE  0100               	movlb	0	; () banked
  4670  001300  B0D8               	btfsc	status,0,c
  4671  001302  D00E               	goto	l3832
  4672                           
  4673                           ; BSR set to: 0
  4674  001304  0E00               	movlw	0
  4675  001306  0100               	movlb	0	; () banked
  4676  001308  6FDE               	movwf	(_errno+1)& (0+255),b
  4677  00130A  0E22               	movlw	34
  4678  00130C  6FDD               	movwf	_errno& (0+255),b
  4679  00130E  0EFF               	movlw	255
  4680  001310  0100               	movlb	0	; () banked
  4681  001312  6F9C               	movwf	?_exp& (0+255),b
  4682  001314  0E7F               	movlw	127
  4683  001316  0100               	movlb	0	; () banked
  4684  001318  6F9D               	movwf	(?_exp+1)& (0+255),b
  4685  00131A  0E7F               	movlw	127
  4686  00131C  D01B               	goto	L6
  4687                           
  4688                           ; BSR set to: 0
  4689  00131E  D0E0               	goto	l1180
  4690  001320                     l3832:
  4691                           
  4692                           ; BSR set to: 0
  4693  001320  C09C  F060         	movff	exp@x,___ftge@ff1
  4694  001324  C09D  F061         	movff	exp@x+1,___ftge@ff1+1
  4695  001328  C09E  F062         	movff	exp@x+2,___ftge@ff1+2
  4696  00132C  0E49               	movlw	73
  4697  00132E  0100               	movlb	0	; () banked
  4698  001330  6F63               	movwf	___ftge@ff2& (0+255),b
  4699  001332  0E3A               	movlw	58
  4700  001334  0100               	movlb	0	; () banked
  4701  001336  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  4702  001338  0EC4               	movlw	196
  4703  00133A  0100               	movlb	0	; () banked
  4704  00133C  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  4705  00133E  EC87  F011         	call	___ftge	;wreg free
  4706  001342  0100               	movlb	0	; () banked
  4707  001344  B0D8               	btfsc	status,0,c
  4708  001346  D009               	goto	l3838
  4709                           
  4710                           ; BSR set to: 0
  4711  001348  0E00               	movlw	0
  4712  00134A  0100               	movlb	0	; () banked
  4713  00134C  6FDE               	movwf	(_errno+1)& (0+255),b
  4714  00134E  0E22               	movlw	34
  4715  001350  6FDD               	movwf	_errno& (0+255),b
  4716  001352  D09F               	goto	l3856
  4717  001354                     L6:
  4718  001354  0100               	movlb	0	; () banked
  4719  001356  6F9E               	movwf	(?_exp+2)& (0+255),b
  4720                           
  4721                           ; BSR set to: 0
  4722  001358  D0C3               	goto	l1180
  4723  00135A                     l3838:
  4724                           
  4725                           ; BSR set to: 0
  4726  00135A  0100               	movlb	0	; () banked
  4727  00135C  AF9E               	btfss	(exp@x+2)& (0+255),7,b
  4728  00135E  D002               	goto	u3220
  4729  001360  0E01               	movlw	1
  4730  001362  D001               	goto	u3230
  4731  001364                     u3220:
  4732  001364  0E00               	movlw	0
  4733  001366                     u3230:
  4734  001366  0100               	movlb	0	; () banked
  4735  001368  6FA4               	movwf	exp@sign& (0+255),b
  4736                           
  4737                           ; BSR set to: 0
  4738  00136A  0100               	movlb	0	; () banked
  4739  00136C  51A4               	movf	exp@sign& (0+255),w,b
  4740  00136E  0100               	movlb	0	; () banked
  4741  001370  B4D8               	btfsc	status,2,c
  4742  001372  D00E               	goto	l1183
  4743                           
  4744                           ; BSR set to: 0
  4745  001374  C09C  F060         	movff	exp@x,___ftneg@f1
  4746  001378  C09D  F061         	movff	exp@x+1,___ftneg@f1+1
  4747  00137C  C09E  F062         	movff	exp@x+2,___ftneg@f1+2
  4748  001380  ECD7  F015         	call	___ftneg	;wreg free
  4749  001384  C060  F09C         	movff	?___ftneg,exp@x
  4750  001388  C061  F09D         	movff	?___ftneg+1,exp@x+1
  4751  00138C  C062  F09E         	movff	?___ftneg+2,exp@x+2
  4752  001390                     l1183:
  4753  001390  C09C  F06C         	movff	exp@x,___ftmul@f1
  4754  001394  C09D  F06D         	movff	exp@x+1,___ftmul@f1+1
  4755  001398  C09E  F06E         	movff	exp@x+2,___ftmul@f1+2
  4756  00139C  0EAA               	movlw	170
  4757  00139E  0100               	movlb	0	; () banked
  4758  0013A0  6F6F               	movwf	___ftmul@f2& (0+255),b
  4759  0013A2  0EB8               	movlw	184
  4760  0013A4  0100               	movlb	0	; () banked
  4761  0013A6  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  4762  0013A8  0E3F               	movlw	63
  4763  0013AA  0100               	movlb	0	; () banked
  4764  0013AC  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  4765  0013AE  ECFF  F00B         	call	___ftmul	;wreg free
  4766  0013B2  C06C  F09C         	movff	?___ftmul,exp@x
  4767  0013B6  C06D  F09D         	movff	?___ftmul+1,exp@x+1
  4768  0013BA  C06E  F09E         	movff	?___ftmul+2,exp@x+2
  4769  0013BE  C09C  F094         	movff	exp@x,floor@x
  4770  0013C2  C09D  F095         	movff	exp@x+1,floor@x+1
  4771  0013C6  C09E  F096         	movff	exp@x+2,floor@x+2
  4772  0013CA  ECA2  F00F         	call	_floor	;wreg free
  4773  0013CE  C094  F09F         	movff	?_floor,_exp$2808
  4774  0013D2  C095  F0A0         	movff	?_floor+1,_exp$2808+1
  4775  0013D6  C096  F0A1         	movff	?_floor+2,_exp$2808+2
  4776  0013DA  C09F  F07B         	movff	_exp$2808,___fttol@f1
  4777  0013DE  C0A0  F07C         	movff	_exp$2808+1,___fttol@f1+1
  4778  0013E2  C0A1  F07D         	movff	_exp$2808+2,___fttol@f1+2
  4779  0013E6  ECEE  F00D         	call	___fttol	;wreg free
  4780  0013EA  C07B  F0A2         	movff	?___fttol,exp@exponent
  4781  0013EE  C07C  F0A3         	movff	?___fttol+1,exp@exponent+1
  4782  0013F2  C09C  F087         	movff	exp@x,___ftsub@f1
  4783  0013F6  C09D  F088         	movff	exp@x+1,___ftsub@f1+1
  4784  0013FA  C09E  F089         	movff	exp@x+2,___ftsub@f1+2
  4785  0013FE  C0A2  F068         	movff	exp@exponent,___awtoft@c
  4786  001402  C0A3  F069         	movff	exp@exponent+1,___awtoft@c+1
  4787  001406  EC53  F015         	call	___awtoft	;wreg free
  4788  00140A  C068  F08A         	movff	?___awtoft,___ftsub@f2
  4789  00140E  C069  F08B         	movff	?___awtoft+1,___ftsub@f2+1
  4790  001412  C06A  F08C         	movff	?___awtoft+2,___ftsub@f2+2
  4791  001416  EC2B  F015         	call	___ftsub	;wreg free
  4792  00141A  C087  F09C         	movff	?___ftsub,exp@x
  4793  00141E  C088  F09D         	movff	?___ftsub+1,exp@x+1
  4794  001422  C089  F09E         	movff	?___ftsub+2,exp@x+2
  4795  001426  C09C  F087         	movff	exp@x,eval_poly@x
  4796  00142A  C09D  F088         	movff	exp@x+1,eval_poly@x+1
  4797  00142E  C09E  F089         	movff	exp@x+2,eval_poly@x+2
  4798  001432  0E01               	movlw	low exp@coeff
  4799  001434  0100               	movlb	0	; () banked
  4800  001436  6F8A               	movwf	eval_poly@d& (0+255),b
  4801  001438  0E10               	movlw	high exp@coeff
  4802  00143A  0100               	movlb	0	; () banked
  4803  00143C  6F8B               	movwf	(eval_poly@d+1)& (0+255),b
  4804  00143E  0E00               	movlw	0
  4805  001440  0100               	movlb	0	; () banked
  4806  001442  6F8D               	movwf	(eval_poly@n+1)& (0+255),b
  4807  001444  0E09               	movlw	9
  4808  001446  6F8C               	movwf	eval_poly@n& (0+255),b
  4809  001448  EC20  F010         	call	_eval_poly	;wreg free
  4810  00144C  C087  F093         	movff	?_eval_poly,ldexp@value
  4811  001450  C088  F094         	movff	?_eval_poly+1,ldexp@value+1
  4812  001454  C089  F095         	movff	?_eval_poly+2,ldexp@value+2
  4813  001458  C0A2  F096         	movff	exp@exponent,ldexp@newexp
  4814  00145C  C0A3  F097         	movff	exp@exponent+1,ldexp@newexp+1
  4815  001460  EC17  F00F         	call	_ldexp	;wreg free
  4816  001464  C093  F09C         	movff	?_ldexp,exp@x
  4817  001468  C094  F09D         	movff	?_ldexp+1,exp@x+1
  4818  00146C  C095  F09E         	movff	?_ldexp+2,exp@x+2
  4819  001470  0100               	movlb	0	; () banked
  4820  001472  51A4               	movf	exp@sign& (0+255),w,b
  4821  001474  0100               	movlb	0	; () banked
  4822  001476  B4D8               	btfsc	status,2,c
  4823  001478  D02D               	goto	l1184
  4824                           
  4825                           ; BSR set to: 0
  4826  00147A  0100               	movlb	0	; () banked
  4827  00147C  299C               	incf	exp@x& (0+255),w,b
  4828  00147E  E112               	bnz	l3860
  4829  001480  0E7F               	movlw	127
  4830  001482  0100               	movlb	0	; () banked
  4831  001484  199D               	xorwf	(exp@x+1)& (0+255),w,b
  4832  001486  E10E               	bnz	l3860
  4833  001488  0E7F               	movlw	127
  4834  00148A  0100               	movlb	0	; () banked
  4835  00148C  199E               	xorwf	(exp@x+2)& (0+255),w,b
  4836  00148E  A4D8               	btfss	status,2,c
  4837  001490  D009               	goto	l3860
  4838  001492                     l3856:
  4839                           
  4840                           ; BSR set to: 0
  4841  001492  0E00               	movlw	0
  4842  001494  0100               	movlb	0	; () banked
  4843  001496  6F9C               	movwf	?_exp& (0+255),b
  4844  001498  0E00               	movlw	0
  4845  00149A  0100               	movlb	0	; () banked
  4846  00149C  6F9D               	movwf	(?_exp+1)& (0+255),b
  4847  00149E  0E00               	movlw	0
  4848  0014A0  D759               	goto	L6
  4849                           
  4850                           ; BSR set to: 0
  4851  0014A2  D01E               	goto	l1180
  4852  0014A4                     l3860:
  4853                           
  4854                           ; BSR set to: 0
  4855  0014A4  0E00               	movlw	0
  4856  0014A6  0100               	movlb	0	; () banked
  4857  0014A8  6F68               	movwf	___ftdiv@f1& (0+255),b
  4858  0014AA  0E80               	movlw	128
  4859  0014AC  0100               	movlb	0	; () banked
  4860  0014AE  6F69               	movwf	(___ftdiv@f1+1)& (0+255),b
  4861  0014B0  0E3F               	movlw	63
  4862  0014B2  0100               	movlb	0	; () banked
  4863  0014B4  6F6A               	movwf	(___ftdiv@f1+2)& (0+255),b
  4864  0014B6  C09C  F06B         	movff	exp@x,___ftdiv@f2
  4865  0014BA  C09D  F06C         	movff	exp@x+1,___ftdiv@f2+1
  4866  0014BE  C09E  F06D         	movff	exp@x+2,___ftdiv@f2+2
  4867  0014C2  ECAD  F00C         	call	___ftdiv	;wreg free
  4868  0014C6  C068  F09C         	movff	?___ftdiv,?_exp
  4869  0014CA  C069  F09D         	movff	?___ftdiv+1,?_exp+1
  4870  0014CE  C06A  F09E         	movff	?___ftdiv+2,?_exp+2
  4871  0014D2  D006               	goto	l1180
  4872  0014D4                     l1184:
  4873                           
  4874                           ; BSR set to: 0
  4875  0014D4  C09C  F09C         	movff	exp@x,?_exp
  4876  0014D8  C09D  F09D         	movff	exp@x+1,?_exp+1
  4877  0014DC  C09E  F09E         	movff	exp@x+2,?_exp+2
  4878  0014E0                     l1180:
  4879  0014E0  0012               	return		;funcret
  4880  0014E2                     __end_of_exp:
  4881                           	opt stack 0
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           intcon	equ	0xFF2
  4885                           intcon2	equ	0xFF1
  4886                           postinc0	equ	0xFEE
  4887                           wreg	equ	0xFE8
  4888                           indf2	equ	0xFDF
  4889                           postinc2	equ	0xFDE
  4890                           postdec2	equ	0xFDD
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _ldexp *****************
  4896 ;; Defined at:
  4897 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  value           3   51[BANK0 ] unsigned char 
  4900 ;;  newexp          2   54[BANK0 ] int 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  3   51[BANK0 ] int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:        7 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    6
  4919 ;; This function calls:
  4920 ;;		Nothing
  4921 ;; This function is called by:
  4922 ;;		_exp
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text40
  4927  001E2E                     __ptext40:
  4928                           	opt stack 0
  4929  001E2E                     _ldexp:
  4930                           	opt stack 21
  4931                           
  4932                           ;incstack = 0
  4933  001E2E  0100               	movlb	0	; () banked
  4934  001E30  5193               	movf	ldexp@value& (0+255),w,b
  4935  001E32  0100               	movlb	0	; () banked
  4936  001E34  1194               	iorwf	(ldexp@value+1)& (0+255),w,b
  4937  001E36  0100               	movlb	0	; () banked
  4938  001E38  1195               	iorwf	(ldexp@value+2)& (0+255),w,b
  4939  001E3A  A4D8               	btfss	status,2,c
  4940  001E3C  D002               	goto	l2772
  4941  001E3E  D02A               	goto	L7
  4942                           
  4943                           ; BSR set to: 0
  4944                           
  4945                           ; BSR set to: 0
  4946  001E40  D080               	goto	l1204
  4947  001E42                     l2772:
  4948                           
  4949                           ; BSR set to: 0
  4950  001E42  0100               	movlb	0	; () banked
  4951  001E44  5195               	movf	(ldexp@value+2)& (0+255),w,b
  4952  001E46  0B7F               	andlw	127
  4953  001E48  0100               	movlb	0	; () banked
  4954  001E4A  6F98               	movwf	??_ldexp& (0+255),b
  4955  001E4C  6B99               	clrf	(??_ldexp+1)& (0+255),b
  4956  001E4E  90D8               	bcf	status,0,c
  4957  001E50  0100               	movlb	0	; () banked
  4958  001E52  3798               	rlcf	??_ldexp& (0+255),f,b
  4959  001E54  3799               	rlcf	(??_ldexp+1)& (0+255),f,b
  4960  001E56  0100               	movlb	0	; () banked
  4961  001E58  5198               	movf	??_ldexp& (0+255),w,b
  4962  001E5A  0100               	movlb	0	; () banked
  4963  001E5C  2796               	addwf	ldexp@newexp& (0+255),f,b
  4964  001E5E  0100               	movlb	0	; () banked
  4965  001E60  5199               	movf	(??_ldexp+1)& (0+255),w,b
  4966  001E62  0100               	movlb	0	; () banked
  4967  001E64  2397               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4968  001E66  0100               	movlb	0	; () banked
  4969  001E68  AF94               	btfss	(ldexp@value+1)& (0+255),7,b
  4970  001E6A  D004               	goto	u1980
  4971  001E6C  0100               	movlb	0	; () banked
  4972  001E6E  6B98               	clrf	??_ldexp& (0+255),b
  4973  001E70  2B98               	incf	??_ldexp& (0+255),f,b
  4974  001E72  D002               	goto	u1988
  4975  001E74                     u1980:
  4976  001E74  0100               	movlb	0	; () banked
  4977  001E76  6B98               	clrf	??_ldexp& (0+255),b
  4978  001E78                     u1988:
  4979  001E78  0100               	movlb	0	; () banked
  4980  001E7A  5198               	movf	??_ldexp& (0+255),w,b
  4981  001E7C  0100               	movlb	0	; () banked
  4982  001E7E  2796               	addwf	ldexp@newexp& (0+255),f,b
  4983  001E80  0E00               	movlw	0
  4984  001E82  2397               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4985  001E84  0100               	movlb	0	; () banked
  4986  001E86  AF97               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4987  001E88  D00F               	goto	l2780
  4988                           
  4989                           ; BSR set to: 0
  4990  001E8A  0E00               	movlw	0
  4991  001E8C  0100               	movlb	0	; () banked
  4992  001E8E  6FDE               	movwf	(_errno+1)& (0+255),b
  4993  001E90  0E22               	movlw	34
  4994  001E92  6FDD               	movwf	_errno& (0+255),b
  4995  001E94                     L7:
  4996  001E94  0E00               	movlw	0
  4997  001E96  0100               	movlb	0	; () banked
  4998  001E98  6F93               	movwf	?_ldexp& (0+255),b
  4999  001E9A  0E00               	movlw	0
  5000  001E9C  0100               	movlb	0	; () banked
  5001  001E9E  6F94               	movwf	(?_ldexp+1)& (0+255),b
  5002  001EA0  0E00               	movlw	0
  5003  001EA2  D022               	goto	L9
  5004                           
  5005                           ; BSR set to: 0
  5006  001EA4  D04E               	goto	l1204
  5007                           
  5008                           ; BSR set to: 0
  5009  001EA6  D046               	goto	l2798
  5010  001EA8                     l2780:
  5011                           
  5012                           ; BSR set to: 0
  5013  001EA8  0100               	movlb	0	; () banked
  5014  001EAA  BF97               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  5015  001EAC  D021               	goto	l2796
  5016  001EAE  0100               	movlb	0	; () banked
  5017  001EB0  0597               	decf	(ldexp@newexp+1)& (0+255),w,b
  5018  001EB2  A0D8               	btfss	status,0,c
  5019  001EB4  D01D               	goto	l2796
  5020                           
  5021                           ; BSR set to: 0
  5022  001EB6  0E00               	movlw	0
  5023  001EB8  0100               	movlb	0	; () banked
  5024  001EBA  6FDE               	movwf	(_errno+1)& (0+255),b
  5025  001EBC  0E22               	movlw	34
  5026  001EBE  6FDD               	movwf	_errno& (0+255),b
  5027                           
  5028                           ; BSR set to: 0
  5029  001EC0  0100               	movlb	0	; () banked
  5030  001EC2  AF95               	btfss	(ldexp@value+2)& (0+255),7,b
  5031  001EC4  D00A               	goto	l2792
  5032                           
  5033                           ; BSR set to: 0
  5034  001EC6  0EFF               	movlw	255
  5035  001EC8  0100               	movlb	0	; () banked
  5036  001ECA  6F93               	movwf	?_ldexp& (0+255),b
  5037  001ECC  0E7F               	movlw	127
  5038  001ECE  0100               	movlb	0	; () banked
  5039  001ED0  6F94               	movwf	(?_ldexp+1)& (0+255),b
  5040  001ED2  0EFF               	movlw	255
  5041  001ED4  D009               	goto	L9
  5042                           
  5043                           ; BSR set to: 0
  5044  001ED6  D035               	goto	l1204
  5045                           
  5046                           ; BSR set to: 0
  5047  001ED8  D02D               	goto	l2798
  5048  001EDA                     l2792:
  5049                           
  5050                           ; BSR set to: 0
  5051  001EDA  0EFF               	movlw	255
  5052  001EDC  0100               	movlb	0	; () banked
  5053  001EDE  6F93               	movwf	?_ldexp& (0+255),b
  5054  001EE0  0E7F               	movlw	127
  5055  001EE2  0100               	movlb	0	; () banked
  5056  001EE4  6F94               	movwf	(?_ldexp+1)& (0+255),b
  5057  001EE6  0E7F               	movlw	127
  5058  001EE8                     L9:
  5059  001EE8  0100               	movlb	0	; () banked
  5060  001EEA  6F95               	movwf	(?_ldexp+2)& (0+255),b
  5061                           
  5062                           ; BSR set to: 0
  5063  001EEC  D02A               	goto	l1204
  5064                           
  5065                           ; BSR set to: 0
  5066  001EEE  D022               	goto	l2798
  5067  001EF0                     l2796:
  5068                           
  5069                           ; BSR set to: 0
  5070  001EF0  0100               	movlb	0	; () banked
  5071  001EF2  3597               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  5072  001EF4  3197               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  5073  001EF6  0100               	movlb	0	; () banked
  5074  001EF8  6F99               	movwf	(??_ldexp+1)& (0+255),b
  5075  001EFA  0100               	movlb	0	; () banked
  5076  001EFC  3196               	rrcf	ldexp@newexp& (0+255),w,b
  5077  001EFE  0100               	movlb	0	; () banked
  5078  001F00  6F98               	movwf	??_ldexp& (0+255),b
  5079  001F02  0100               	movlb	0	; () banked
  5080  001F04  5195               	movf	(ldexp@value+2)& (0+255),w,b
  5081  001F06  0100               	movlb	0	; () banked
  5082  001F08  1998               	xorwf	??_ldexp& (0+255),w,b
  5083  001F0A  0B80               	andlw	-128
  5084  001F0C  1998               	xorwf	??_ldexp& (0+255),w,b
  5085  001F0E  0100               	movlb	0	; () banked
  5086  001F10  6F95               	movwf	(ldexp@value+2)& (0+255),b
  5087  001F12  C096  F098         	movff	ldexp@newexp,??_ldexp
  5088  001F16  0E01               	movlw	1
  5089  001F18  0100               	movlb	0	; () banked
  5090  001F1A  1798               	andwf	??_ldexp& (0+255),f,b
  5091  001F1C  0100               	movlb	0	; () banked
  5092  001F1E  3398               	rrcf	??_ldexp& (0+255),f,b
  5093  001F20  3398               	rrcf	??_ldexp& (0+255),f,b
  5094  001F22  0100               	movlb	0	; () banked
  5095  001F24  5194               	movf	(ldexp@value+1)& (0+255),w,b
  5096  001F26  0100               	movlb	0	; () banked
  5097  001F28  1998               	xorwf	??_ldexp& (0+255),w,b
  5098  001F2A  0B7F               	andlw	-129
  5099  001F2C  1998               	xorwf	??_ldexp& (0+255),w,b
  5100  001F2E  0100               	movlb	0	; () banked
  5101  001F30  6F94               	movwf	(ldexp@value+1)& (0+255),b
  5102                           
  5103                           ; BSR set to: 0
  5104  001F32  D000               	goto	l2798
  5105  001F34                     l2798:
  5106                           
  5107                           ; BSR set to: 0
  5108  001F34  C093  F093         	movff	ldexp@value,?_ldexp
  5109  001F38  C094  F094         	movff	ldexp@value+1,?_ldexp+1
  5110  001F3C  C095  F095         	movff	ldexp@value+2,?_ldexp+2
  5111  001F40  D000               	goto	l1204
  5112  001F42                     l1204:
  5113                           
  5114                           ; BSR set to: 0
  5115  001F42  0012               	return		;funcret
  5116  001F44                     __end_of_ldexp:
  5117                           	opt stack 0
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           intcon2	equ	0xFF1
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _floor *****************
  5132 ;; Defined at:
  5133 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  x               3   52[BANK0 ] int 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  i               3   55[BANK0 ] int 
  5138 ;;  expon           2   58[BANK0 ] int 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  3   52[BANK0 ] int 
  5141 ;; Registers used:
  5142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5148 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;Total ram usage:        8 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    8
  5155 ;; This function calls:
  5156 ;;		___altoft
  5157 ;;		___ftadd
  5158 ;;		___ftge
  5159 ;;		___fttol
  5160 ;;		_frexp
  5161 ;; This function is called by:
  5162 ;;		_exp
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text41
  5167  001F44                     __ptext41:
  5168                           	opt stack 0
  5169  001F44                     _floor:
  5170                           	opt stack 19
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;incstack = 0
  5174  001F44  C094  F060         	movff	floor@x,frexp@value
  5175  001F48  C095  F061         	movff	floor@x+1,frexp@value+1
  5176  001F4C  C096  F062         	movff	floor@x+2,frexp@value+2
  5177  001F50  0E9A               	movlw	low floor@expon
  5178  001F52  0100               	movlb	0	; () banked
  5179  001F54  6F63               	movwf	frexp@eptr& (0+255),b
  5180  001F56  0E00               	movlw	high floor@expon
  5181  001F58  0100               	movlb	0	; () banked
  5182  001F5A  6F64               	movwf	(frexp@eptr+1)& (0+255),b
  5183  001F5C  EC47  F012         	call	_frexp	;wreg free
  5184  001F60  0100               	movlb	0	; () banked
  5185  001F62  AF9B               	btfss	(floor@expon+1)& (0+255),7,b
  5186  001F64  D016               	goto	l3724
  5187                           
  5188                           ; BSR set to: 0
  5189  001F66  0100               	movlb	0	; () banked
  5190  001F68  AF96               	btfss	(floor@x+2)& (0+255),7,b
  5191  001F6A  D009               	goto	l3720
  5192                           
  5193                           ; BSR set to: 0
  5194  001F6C  0E00               	movlw	0
  5195  001F6E  0100               	movlb	0	; () banked
  5196  001F70  6F94               	movwf	?_floor& (0+255),b
  5197  001F72  0E80               	movlw	128
  5198  001F74  0100               	movlb	0	; () banked
  5199  001F76  6F95               	movwf	(?_floor+1)& (0+255),b
  5200  001F78  0EBF               	movlw	191
  5201  001F7A  D008               	goto	L10
  5202                           
  5203                           ; BSR set to: 0
  5204  001F7C  D060               	goto	l1192
  5205  001F7E                     l3720:
  5206                           
  5207                           ; BSR set to: 0
  5208  001F7E  0E00               	movlw	0
  5209  001F80  0100               	movlb	0	; () banked
  5210  001F82  6F94               	movwf	?_floor& (0+255),b
  5211  001F84  0E00               	movlw	0
  5212  001F86  0100               	movlb	0	; () banked
  5213  001F88  6F95               	movwf	(?_floor+1)& (0+255),b
  5214  001F8A  0E00               	movlw	0
  5215  001F8C                     L10:
  5216  001F8C  0100               	movlb	0	; () banked
  5217  001F8E  6F96               	movwf	(?_floor+2)& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220  001F90  D056               	goto	l1192
  5221  001F92                     l3724:
  5222                           
  5223                           ; BSR set to: 0
  5224  001F92  0100               	movlb	0	; () banked
  5225  001F94  519B               	movf	(floor@expon+1)& (0+255),w,b
  5226  001F96  E105               	bnz	u3110
  5227  001F98  0E15               	movlw	21
  5228  001F9A  0100               	movlb	0	; () banked
  5229  001F9C  5D9A               	subwf	floor@expon& (0+255),w,b
  5230  001F9E  A0D8               	btfss	status,0,c
  5231  001FA0  D007               	goto	l3728
  5232  001FA2                     u3110:
  5233                           
  5234                           ; BSR set to: 0
  5235  001FA2  C094  F094         	movff	floor@x,?_floor
  5236  001FA6  C095  F095         	movff	floor@x+1,?_floor+1
  5237  001FAA  C096  F096         	movff	floor@x+2,?_floor+2
  5238  001FAE  D047               	goto	l1192
  5239  001FB0                     l3728:
  5240                           
  5241                           ; BSR set to: 0
  5242  001FB0  C094  F07B         	movff	floor@x,___fttol@f1
  5243  001FB4  C095  F07C         	movff	floor@x+1,___fttol@f1+1
  5244  001FB8  C096  F07D         	movff	floor@x+2,___fttol@f1+2
  5245  001FBC  ECEE  F00D         	call	___fttol	;wreg free
  5246  001FC0  C07B  F08A         	movff	?___fttol,___altoft@c
  5247  001FC4  C07C  F08B         	movff	?___fttol+1,___altoft@c+1
  5248  001FC8  C07D  F08C         	movff	?___fttol+2,___altoft@c+2
  5249  001FCC  C07E  F08D         	movff	?___fttol+3,___altoft@c+3
  5250  001FD0  ECF1  F012         	call	___altoft	;wreg free
  5251  001FD4  C08A  F097         	movff	?___altoft,floor@i
  5252  001FD8  C08B  F098         	movff	?___altoft+1,floor@i+1
  5253  001FDC  C08C  F099         	movff	?___altoft+2,floor@i+2
  5254  001FE0  C094  F060         	movff	floor@x,___ftge@ff1
  5255  001FE4  C095  F061         	movff	floor@x+1,___ftge@ff1+1
  5256  001FE8  C096  F062         	movff	floor@x+2,___ftge@ff1+2
  5257  001FEC  C097  F063         	movff	floor@i,___ftge@ff2
  5258  001FF0  C098  F064         	movff	floor@i+1,___ftge@ff2+1
  5259  001FF4  C099  F065         	movff	floor@i+2,___ftge@ff2+2
  5260  001FF8  EC87  F011         	call	___ftge	;wreg free
  5261  001FFC  0100               	movlb	0	; () banked
  5262  001FFE  B0D8               	btfsc	status,0,c
  5263  002000  D018               	goto	l1194
  5264                           
  5265                           ; BSR set to: 0
  5266  002002  C097  F07B         	movff	floor@i,___ftadd@f1
  5267  002006  C098  F07C         	movff	floor@i+1,___ftadd@f1+1
  5268  00200A  C099  F07D         	movff	floor@i+2,___ftadd@f1+2
  5269  00200E  0E00               	movlw	0
  5270  002010  0100               	movlb	0	; () banked
  5271  002012  6F7E               	movwf	___ftadd@f2& (0+255),b
  5272  002014  0E80               	movlw	128
  5273  002016  0100               	movlb	0	; () banked
  5274  002018  6F7F               	movwf	(___ftadd@f2+1)& (0+255),b
  5275  00201A  0EBF               	movlw	191
  5276  00201C  0100               	movlb	0	; () banked
  5277  00201E  6F80               	movwf	(___ftadd@f2+2)& (0+255),b
  5278  002020  EC1E  F008         	call	___ftadd	;wreg free
  5279  002024  C07B  F094         	movff	?___ftadd,?_floor
  5280  002028  C07C  F095         	movff	?___ftadd+1,?_floor+1
  5281  00202C  C07D  F096         	movff	?___ftadd+2,?_floor+2
  5282  002030  D006               	goto	l1192
  5283  002032                     l1194:
  5284                           
  5285                           ; BSR set to: 0
  5286  002032  C097  F094         	movff	floor@i,?_floor
  5287  002036  C098  F095         	movff	floor@i+1,?_floor+1
  5288  00203A  C099  F096         	movff	floor@i+2,?_floor+2
  5289  00203E                     l1192:
  5290  00203E  0012               	return		;funcret
  5291  002040                     __end_of_floor:
  5292                           	opt stack 0
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           intcon2	equ	0xFF1
  5297                           postinc0	equ	0xFEE
  5298                           wreg	equ	0xFE8
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _frexp *****************
  5307 ;; Defined at:
  5308 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  value           3    0[BANK0 ] int 
  5311 ;;  eptr            2    3[BANK0 ] PTR int 
  5312 ;;		 -> log@exponent(2), floor@expon(2), 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;		None
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  3    0[BANK0 ] PTR int 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5324 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;Total ram usage:        7 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    6
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_floor
  5335 ;;		_log
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text42
  5340  00248E                     __ptext42:
  5341                           	opt stack 0
  5342  00248E                     _frexp:
  5343                           	opt stack 21
  5344                           
  5345                           ;incstack = 0
  5346  00248E  0100               	movlb	0	; () banked
  5347  002490  5160               	movf	frexp@value& (0+255),w,b
  5348  002492  0100               	movlb	0	; () banked
  5349  002494  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  5350  002496  0100               	movlb	0	; () banked
  5351  002498  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  5352  00249A  A4D8               	btfss	status,2,c
  5353  00249C  D012               	goto	l3626
  5354                           
  5355                           ; BSR set to: 0
  5356  00249E  C063  FFD9         	movff	frexp@eptr,fsr2l
  5357  0024A2  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  5358  0024A6  0E00               	movlw	0
  5359  0024A8  6EDE               	movwf	postinc2,c
  5360  0024AA  0E00               	movlw	0
  5361  0024AC  6EDD               	movwf	postdec2,c
  5362                           
  5363                           ; BSR set to: 0
  5364  0024AE  0E00               	movlw	0
  5365  0024B0  0100               	movlb	0	; () banked
  5366  0024B2  6F60               	movwf	?_frexp& (0+255),b
  5367  0024B4  0E00               	movlw	0
  5368  0024B6  0100               	movlb	0	; () banked
  5369  0024B8  6F61               	movwf	(?_frexp+1)& (0+255),b
  5370  0024BA  0E00               	movlw	0
  5371  0024BC  0100               	movlb	0	; () banked
  5372  0024BE  6F62               	movwf	(?_frexp+2)& (0+255),b
  5373                           
  5374                           ; BSR set to: 0
  5375  0024C0  D03C               	goto	l1200
  5376  0024C2                     l3626:
  5377                           
  5378                           ; BSR set to: 0
  5379  0024C2  0100               	movlb	0	; () banked
  5380  0024C4  5162               	movf	(frexp@value+2)& (0+255),w,b
  5381  0024C6  0B7F               	andlw	127
  5382  0024C8  0100               	movlb	0	; () banked
  5383  0024CA  6F65               	movwf	??_frexp& (0+255),b
  5384  0024CC  6B66               	clrf	(??_frexp+1)& (0+255),b
  5385  0024CE  90D8               	bcf	status,0,c
  5386  0024D0  0100               	movlb	0	; () banked
  5387  0024D2  3765               	rlcf	??_frexp& (0+255),f,b
  5388  0024D4  3766               	rlcf	(??_frexp+1)& (0+255),f,b
  5389  0024D6  C063  FFD9         	movff	frexp@eptr,fsr2l
  5390  0024DA  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  5391  0024DE  C065  FFDE         	movff	??_frexp,postinc2
  5392  0024E2  C066  FFDD         	movff	??_frexp+1,postdec2
  5393  0024E6  0100               	movlb	0	; () banked
  5394  0024E8  AF61               	btfss	(frexp@value+1)& (0+255),7,b
  5395  0024EA  D004               	goto	u3000
  5396  0024EC  0100               	movlb	0	; () banked
  5397  0024EE  6B65               	clrf	??_frexp& (0+255),b
  5398  0024F0  2B65               	incf	??_frexp& (0+255),f,b
  5399  0024F2  D002               	goto	u3008
  5400  0024F4                     u3000:
  5401  0024F4  0100               	movlb	0	; () banked
  5402  0024F6  6B65               	clrf	??_frexp& (0+255),b
  5403  0024F8                     u3008:
  5404  0024F8  0100               	movlb	0	; () banked
  5405  0024FA  5165               	movf	??_frexp& (0+255),w,b
  5406  0024FC  C063  FFD9         	movff	frexp@eptr,fsr2l
  5407  002500  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  5408  002504  12DE               	iorwf	postinc2,f,c
  5409  002506  0E00               	movlw	0
  5410  002508  12DD               	iorwf	postdec2,f,c
  5411                           
  5412                           ; BSR set to: 0
  5413  00250A  C063  FFD9         	movff	frexp@eptr,fsr2l
  5414  00250E  C064  FFDA         	movff	frexp@eptr+1,fsr2h
  5415  002512  0E82               	movlw	130
  5416  002514  26DE               	addwf	postinc2,f,c
  5417  002516  0EFF               	movlw	255
  5418  002518  22DD               	addwfc	postdec2,f,c
  5419                           
  5420                           ; BSR set to: 0
  5421  00251A  8162               	bsf	(frexp@value+2)& (0+255),0,b
  5422  00251C  8362               	bsf	(frexp@value+2)& (0+255),1,b
  5423  00251E  8562               	bsf	(frexp@value+2)& (0+255),2,b
  5424  002520  8762               	bsf	(frexp@value+2)& (0+255),3,b
  5425  002522  8962               	bsf	(frexp@value+2)& (0+255),4,b
  5426  002524  8B62               	bsf	(frexp@value+2)& (0+255),5,b
  5427  002526  9D62               	bcf	(frexp@value+2)& (0+255),6,b
  5428                           
  5429                           ; BSR set to: 0
  5430  002528  0100               	movlb	0	; () banked
  5431  00252A  9F61               	bcf	(frexp@value+1)& (0+255),7,b
  5432                           
  5433                           ; BSR set to: 0
  5434  00252C  C060  F060         	movff	frexp@value,?_frexp
  5435  002530  C061  F061         	movff	frexp@value+1,?_frexp+1
  5436  002534  C062  F062         	movff	frexp@value+2,?_frexp+2
  5437  002538  D000               	goto	l1200
  5438  00253A                     l1200:
  5439                           
  5440                           ; BSR set to: 0
  5441  00253A  0012               	return		;funcret
  5442  00253C                     __end_of_frexp:
  5443                           	opt stack 0
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           intcon	equ	0xFF2
  5447                           intcon2	equ	0xFF1
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           indf2	equ	0xFDF
  5451                           postinc2	equ	0xFDE
  5452                           postdec2	equ	0xFDD
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function ___fttol *****************
  5458 ;; Defined at:
  5459 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  f1              3   27[BANK0 ] float 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  lval            4   37[BANK0 ] unsigned long 
  5464 ;;  exp1            1   41[BANK0 ] unsigned char 
  5465 ;;  sign1           1   36[BANK0 ] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  4   27[BANK0 ] long 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5475 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;Total ram usage:       15 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    6
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_CalculateSensorSums
  5486 ;;		_pow
  5487 ;;		_exp
  5488 ;;		_floor
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text43
  5493  001BDC                     __ptext43:
  5494                           	opt stack 0
  5495  001BDC                     ___fttol:
  5496                           	opt stack 20
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;incstack = 0
  5500  001BDC  C07D  F07F         	movff	___fttol@f1+2,??___fttol
  5501  001BE0  0100               	movlb	0	; () banked
  5502  001BE2  6B80               	clrf	(??___fttol+1)& (0+255),b
  5503  001BE4  6B81               	clrf	(??___fttol+2)& (0+255),b
  5504  001BE6  0100               	movlb	0	; () banked
  5505  001BE8  357C               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5506  001BEA  0100               	movlb	0	; () banked
  5507  001BEC  377F               	rlcf	??___fttol& (0+255),f,b
  5508  001BEE  E301               	bnc	u1741
  5509  001BF0  8180               	bsf	(??___fttol+1)& (0+255),0,b
  5510  001BF2                     u1741:
  5511  001BF2  0100               	movlb	0	; () banked
  5512  001BF4  517F               	movf	??___fttol& (0+255),w,b
  5513  001BF6  0100               	movlb	0	; () banked
  5514  001BF8  6F89               	movwf	___fttol@exp1& (0+255),b
  5515  001BFA  0100               	movlb	0	; () banked
  5516  001BFC  5189               	movf	___fttol@exp1& (0+255),w,b
  5517  001BFE  A4D8               	btfss	status,2,c
  5518  001C00  D002               	goto	l2604
  5519  001C02  D051               	goto	l2628
  5520                           
  5521                           ; BSR set to: 0
  5522                           
  5523                           ; BSR set to: 0
  5524  001C04  D083               	goto	l1020
  5525  001C06                     l2604:
  5526                           
  5527                           ; BSR set to: 0
  5528  001C06  0E17               	movlw	23
  5529  001C08  0100               	movlb	0	; () banked
  5530  001C0A  6F7F               	movwf	??___fttol& (0+255),b
  5531  001C0C  C07B  F080         	movff	___fttol@f1,??___fttol+1
  5532  001C10  C07C  F081         	movff	___fttol@f1+1,??___fttol+2
  5533  001C14  C07D  F082         	movff	___fttol@f1+2,??___fttol+3
  5534  001C18  0100               	movlb	0	; () banked
  5535  001C1A  297F               	incf	??___fttol& (0+255),w,b
  5536  001C1C  0100               	movlb	0	; () banked
  5537  001C1E  6F83               	movwf	(??___fttol+4)& (0+255),b
  5538  001C20  D005               	goto	u1760
  5539  001C22                     u1765:
  5540  001C22  0100               	movlb	0	; () banked
  5541  001C24  90D8               	bcf	status,0,c
  5542  001C26  3382               	rrcf	(??___fttol+3)& (0+255),f,b
  5543  001C28  3381               	rrcf	(??___fttol+2)& (0+255),f,b
  5544  001C2A  3380               	rrcf	(??___fttol+1)& (0+255),f,b
  5545  001C2C                     u1760:
  5546  001C2C  0100               	movlb	0	; () banked
  5547  001C2E  2F83               	decfsz	(??___fttol+4)& (0+255),f,b
  5548  001C30  D7F8               	goto	u1765
  5549  001C32  0100               	movlb	0	; () banked
  5550  001C34  5180               	movf	(??___fttol+1)& (0+255),w,b
  5551  001C36  0100               	movlb	0	; () banked
  5552  001C38  6F84               	movwf	___fttol@sign1& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555  001C3A  0100               	movlb	0	; () banked
  5556  001C3C  8F7C               	bsf	(___fttol@f1+1)& (0+255),7,b
  5557                           
  5558                           ; BSR set to: 0
  5559  001C3E  0EFF               	movlw	255
  5560  001C40  0100               	movlb	0	; () banked
  5561  001C42  177B               	andwf	___fttol@f1& (0+255),f,b
  5562  001C44  0EFF               	movlw	255
  5563  001C46  0100               	movlb	0	; () banked
  5564  001C48  177C               	andwf	(___fttol@f1+1)& (0+255),f,b
  5565  001C4A  0E00               	movlw	0
  5566  001C4C  0100               	movlb	0	; () banked
  5567  001C4E  177D               	andwf	(___fttol@f1+2)& (0+255),f,b
  5568                           
  5569                           ; BSR set to: 0
  5570  001C50  0100               	movlb	0	; () banked
  5571  001C52  517B               	movf	___fttol@f1& (0+255),w,b
  5572  001C54  0100               	movlb	0	; () banked
  5573  001C56  6F85               	movwf	___fttol@lval& (0+255),b
  5574  001C58  0100               	movlb	0	; () banked
  5575  001C5A  517C               	movf	(___fttol@f1+1)& (0+255),w,b
  5576  001C5C  0100               	movlb	0	; () banked
  5577  001C5E  6F86               	movwf	(___fttol@lval+1)& (0+255),b
  5578  001C60  0100               	movlb	0	; () banked
  5579  001C62  517D               	movf	(___fttol@f1+2)& (0+255),w,b
  5580  001C64  0100               	movlb	0	; () banked
  5581  001C66  6F87               	movwf	(___fttol@lval+2)& (0+255),b
  5582  001C68  0100               	movlb	0	; () banked
  5583  001C6A  6B88               	clrf	(___fttol@lval+3)& (0+255),b
  5584                           
  5585                           ; BSR set to: 0
  5586  001C6C  0E8E               	movlw	142
  5587  001C6E  0100               	movlb	0	; () banked
  5588  001C70  5F89               	subwf	___fttol@exp1& (0+255),f,b
  5589                           
  5590                           ; BSR set to: 0
  5591  001C72  0100               	movlb	0	; () banked
  5592  001C74  AF89               	btfss	___fttol@exp1& (0+255),7,b
  5593  001C76  D013               	goto	l2626
  5594                           
  5595                           ; BSR set to: 0
  5596  001C78  0100               	movlb	0	; () banked
  5597  001C7A  5189               	movf	___fttol@exp1& (0+255),w,b
  5598  001C7C  0A80               	xorlw	128
  5599  001C7E  0F8F               	addlw	143
  5600  001C80  B0D8               	btfsc	status,0,c
  5601  001C82  D003               	goto	l2622
  5602  001C84  D010               	goto	l2628
  5603                           
  5604                           ; BSR set to: 0
  5605                           
  5606                           ; BSR set to: 0
  5607  001C86  D042               	goto	l1020
  5608                           
  5609                           ; BSR set to: 0
  5610  001C88  D000               	goto	l2622
  5611  001C8A                     l2622:
  5612                           
  5613                           ; BSR set to: 0
  5614  001C8A  0100               	movlb	0	; () banked
  5615  001C8C  90D8               	bcf	status,0,c
  5616  001C8E  3388               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5617  001C90  3387               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5618  001C92  3386               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5619  001C94  3385               	rrcf	___fttol@lval& (0+255),f,b
  5620                           
  5621                           ; BSR set to: 0
  5622  001C96  0100               	movlb	0	; () banked
  5623  001C98  3F89               	incfsz	___fttol@exp1& (0+255),f,b
  5624  001C9A  D7F7               	goto	l2622
  5625                           
  5626                           ; BSR set to: 0
  5627  001C9C  D01F               	goto	l2636
  5628  001C9E                     l2626:
  5629                           
  5630                           ; BSR set to: 0
  5631  001C9E  0E17               	movlw	23
  5632  001CA0  0100               	movlb	0	; () banked
  5633  001CA2  6589               	cpfsgt	___fttol@exp1& (0+255),b
  5634  001CA4  D014               	goto	l2634
  5635  001CA6                     l2628:
  5636                           
  5637                           ; BSR set to: 0
  5638  001CA6  0E00               	movlw	0
  5639  001CA8  0100               	movlb	0	; () banked
  5640  001CAA  6F7B               	movwf	?___fttol& (0+255),b
  5641  001CAC  0E00               	movlw	0
  5642  001CAE  6F7C               	movwf	(?___fttol+1)& (0+255),b
  5643  001CB0  0E00               	movlw	0
  5644  001CB2  6F7D               	movwf	(?___fttol+2)& (0+255),b
  5645  001CB4  0E00               	movlw	0
  5646  001CB6  6F7E               	movwf	(?___fttol+3)& (0+255),b
  5647                           
  5648                           ; BSR set to: 0
  5649  001CB8  D029               	goto	l1020
  5650                           
  5651                           ; BSR set to: 0
  5652  001CBA  D009               	goto	l2634
  5653  001CBC                     l2632:
  5654                           
  5655                           ; BSR set to: 0
  5656  001CBC  0100               	movlb	0	; () banked
  5657  001CBE  90D8               	bcf	status,0,c
  5658  001CC0  3785               	rlcf	___fttol@lval& (0+255),f,b
  5659  001CC2  3786               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5660  001CC4  3787               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5661  001CC6  3788               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5662  001CC8  0100               	movlb	0	; () banked
  5663  001CCA  0789               	decf	___fttol@exp1& (0+255),f,b
  5664  001CCC  D000               	goto	l2634
  5665  001CCE                     l2634:
  5666                           
  5667                           ; BSR set to: 0
  5668  001CCE  0100               	movlb	0	; () banked
  5669  001CD0  5189               	movf	___fttol@exp1& (0+255),w,b
  5670  001CD2  0100               	movlb	0	; () banked
  5671  001CD4  B4D8               	btfsc	status,2,c
  5672  001CD6  D002               	goto	l2636
  5673  001CD8  D7F1               	goto	l2632
  5674                           
  5675                           ; BSR set to: 0
  5676  001CDA  D000               	goto	l2636
  5677  001CDC                     l2636:
  5678                           
  5679                           ; BSR set to: 0
  5680  001CDC  0100               	movlb	0	; () banked
  5681  001CDE  5184               	movf	___fttol@sign1& (0+255),w,b
  5682  001CE0  0100               	movlb	0	; () banked
  5683  001CE2  B4D8               	btfsc	status,2,c
  5684  001CE4  D00A               	goto	l2640
  5685                           
  5686                           ; BSR set to: 0
  5687  001CE6  0100               	movlb	0	; () banked
  5688  001CE8  1F88               	comf	(___fttol@lval+3)& (0+255),f,b
  5689  001CEA  1F87               	comf	(___fttol@lval+2)& (0+255),f,b
  5690  001CEC  1F86               	comf	(___fttol@lval+1)& (0+255),f,b
  5691  001CEE  6D85               	negf	___fttol@lval& (0+255),b
  5692  001CF0  0E00               	movlw	0
  5693  001CF2  2386               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5694  001CF4  2387               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5695  001CF6  2388               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5696  001CF8  D000               	goto	l2640
  5697  001CFA                     l2640:
  5698                           
  5699                           ; BSR set to: 0
  5700  001CFA  C085  F07B         	movff	___fttol@lval,?___fttol
  5701  001CFE  C086  F07C         	movff	___fttol@lval+1,?___fttol+1
  5702  001D02  C087  F07D         	movff	___fttol@lval+2,?___fttol+2
  5703  001D06  C088  F07E         	movff	___fttol@lval+3,?___fttol+3
  5704  001D0A  D000               	goto	l1020
  5705  001D0C                     l1020:
  5706                           
  5707                           ; BSR set to: 0
  5708  001D0C  0012               	return		;funcret
  5709  001D0E                     __end_of___fttol:
  5710                           	opt stack 0
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           intcon2	equ	0xFF1
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function ___ftge *****************
  5725 ;; Defined at:
  5726 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  ff1             3    0[BANK0 ] float 
  5729 ;;  ff2             3    3[BANK0 ] float 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;		None               void
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        9 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    6
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_pow
  5752 ;;		_exp
  5753 ;;		_floor
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text44
  5758  00230E                     __ptext44:
  5759                           	opt stack 0
  5760  00230E                     ___ftge:
  5761                           	opt stack 20
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;incstack = 0
  5765  00230E  0100               	movlb	0	; () banked
  5766  002310  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  5767  002312  D01E               	goto	l3604
  5768                           
  5769                           ; BSR set to: 0
  5770  002314  C060  F066         	movff	___ftge@ff1,??___ftge
  5771  002318  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  5772  00231C  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  5773  002320  0100               	movlb	0	; () banked
  5774  002322  1F66               	comf	??___ftge& (0+255),f,b
  5775  002324  1F67               	comf	(??___ftge+1)& (0+255),f,b
  5776  002326  1F68               	comf	(??___ftge+2)& (0+255),f,b
  5777  002328  2B66               	incf	??___ftge& (0+255),f,b
  5778  00232A  0E00               	movlw	0
  5779  00232C  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  5780  00232E  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  5781  002330  0E00               	movlw	0
  5782  002332  0100               	movlb	0	; () banked
  5783  002334  2566               	addwf	??___ftge& (0+255),w,b
  5784  002336  0100               	movlb	0	; () banked
  5785  002338  6F60               	movwf	___ftge@ff1& (0+255),b
  5786  00233A  0E00               	movlw	0
  5787  00233C  0100               	movlb	0	; () banked
  5788  00233E  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  5789  002340  0100               	movlb	0	; () banked
  5790  002342  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  5791  002344  0E80               	movlw	128
  5792  002346  0100               	movlb	0	; () banked
  5793  002348  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  5794  00234A  0100               	movlb	0	; () banked
  5795  00234C  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  5796  00234E  D000               	goto	l3604
  5797  002350                     l3604:
  5798                           
  5799                           ; BSR set to: 0
  5800  002350  0100               	movlb	0	; () banked
  5801  002352  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  5802  002354  D01E               	goto	l3608
  5803                           
  5804                           ; BSR set to: 0
  5805  002356  C063  F066         	movff	___ftge@ff2,??___ftge
  5806  00235A  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  5807  00235E  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  5808  002362  0100               	movlb	0	; () banked
  5809  002364  1F66               	comf	??___ftge& (0+255),f,b
  5810  002366  1F67               	comf	(??___ftge+1)& (0+255),f,b
  5811  002368  1F68               	comf	(??___ftge+2)& (0+255),f,b
  5812  00236A  2B66               	incf	??___ftge& (0+255),f,b
  5813  00236C  0E00               	movlw	0
  5814  00236E  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  5815  002370  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  5816  002372  0E00               	movlw	0
  5817  002374  0100               	movlb	0	; () banked
  5818  002376  2566               	addwf	??___ftge& (0+255),w,b
  5819  002378  0100               	movlb	0	; () banked
  5820  00237A  6F63               	movwf	___ftge@ff2& (0+255),b
  5821  00237C  0E00               	movlw	0
  5822  00237E  0100               	movlb	0	; () banked
  5823  002380  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  5824  002382  0100               	movlb	0	; () banked
  5825  002384  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  5826  002386  0E80               	movlw	128
  5827  002388  0100               	movlb	0	; () banked
  5828  00238A  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  5829  00238C  0100               	movlb	0	; () banked
  5830  00238E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  5831  002390  D000               	goto	l3608
  5832  002392                     l3608:
  5833                           
  5834                           ; BSR set to: 0
  5835  002392  0E00               	movlw	0
  5836  002394  0100               	movlb	0	; () banked
  5837  002396  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  5838  002398  0E00               	movlw	0
  5839  00239A  0100               	movlb	0	; () banked
  5840  00239C  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  5841  00239E  0E80               	movlw	128
  5842  0023A0  0100               	movlb	0	; () banked
  5843  0023A2  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  5844                           
  5845                           ; BSR set to: 0
  5846  0023A4  0E00               	movlw	0
  5847  0023A6  0100               	movlb	0	; () banked
  5848  0023A8  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  5849  0023AA  0E00               	movlw	0
  5850  0023AC  0100               	movlb	0	; () banked
  5851  0023AE  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  5852  0023B0  0E80               	movlw	128
  5853  0023B2  0100               	movlb	0	; () banked
  5854  0023B4  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  5855  0023B6  0100               	movlb	0	; () banked
  5856  0023B8  5163               	movf	___ftge@ff2& (0+255),w,b
  5857  0023BA  0100               	movlb	0	; () banked
  5858  0023BC  5D60               	subwf	___ftge@ff1& (0+255),w,b
  5859  0023BE  0100               	movlb	0	; () banked
  5860  0023C0  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  5861  0023C2  0100               	movlb	0	; () banked
  5862  0023C4  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  5863  0023C6  0100               	movlb	0	; () banked
  5864  0023C8  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  5865  0023CA  0100               	movlb	0	; () banked
  5866  0023CC  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  5867  0023CE  B0D8               	btfsc	status,0,c
  5868  0023D0  D002               	goto	l3614
  5869                           
  5870                           ; BSR set to: 0
  5871  0023D2  90D8               	bcf	status,0,c
  5872  0023D4  D002               	goto	l993
  5873  0023D6                     l3614:
  5874                           
  5875                           ; BSR set to: 0
  5876  0023D6  80D8               	bsf	status,0,c
  5877                           
  5878                           ; BSR set to: 0
  5879  0023D8  D000               	goto	l993
  5880  0023DA                     l993:
  5881                           
  5882                           ; BSR set to: 0
  5883  0023DA  0012               	return		;funcret
  5884  0023DC                     __end_of___ftge:
  5885                           	opt stack 0
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           intcon	equ	0xFF2
  5889                           intcon2	equ	0xFF1
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function ___altoft *****************
  5900 ;; Defined at:
  5901 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  c               4   42[BANK0 ] long 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  sign            1   51[BANK0 ] unsigned char 
  5906 ;;  exp             1   50[BANK0 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  3   42[BANK0 ] float 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5916 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;Total ram usage:       10 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    7
  5923 ;; This function calls:
  5924 ;;		___ftpack
  5925 ;; This function is called by:
  5926 ;;		_floor
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text45
  5931  0025E2                     __ptext45:
  5932                           	opt stack 0
  5933  0025E2                     ___altoft:
  5934                           	opt stack 19
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;incstack = 0
  5938  0025E2  0E00               	movlw	0
  5939  0025E4  0100               	movlb	0	; () banked
  5940  0025E6  6F93               	movwf	___altoft@sign& (0+255),b
  5941  0025E8  0E8E               	movlw	142
  5942  0025EA  0100               	movlb	0	; () banked
  5943  0025EC  6F92               	movwf	___altoft@exp& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946  0025EE  0100               	movlb	0	; () banked
  5947  0025F0  AF8D               	btfss	(___altoft@c+3)& (0+255),7,b
  5948  0025F2  D016               	goto	l3476
  5949                           
  5950                           ; BSR set to: 0
  5951  0025F4  0100               	movlb	0	; () banked
  5952  0025F6  1F8D               	comf	(___altoft@c+3)& (0+255),f,b
  5953  0025F8  1F8C               	comf	(___altoft@c+2)& (0+255),f,b
  5954  0025FA  1F8B               	comf	(___altoft@c+1)& (0+255),f,b
  5955  0025FC  6D8A               	negf	___altoft@c& (0+255),b
  5956  0025FE  0E00               	movlw	0
  5957  002600  238B               	addwfc	(___altoft@c+1)& (0+255),f,b
  5958  002602  238C               	addwfc	(___altoft@c+2)& (0+255),f,b
  5959  002604  238D               	addwfc	(___altoft@c+3)& (0+255),f,b
  5960                           
  5961                           ; BSR set to: 0
  5962  002606  0E01               	movlw	1
  5963  002608  0100               	movlb	0	; () banked
  5964  00260A  6F93               	movwf	___altoft@sign& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967  00260C  D009               	goto	l3476
  5968  00260E                     l3474:
  5969                           
  5970                           ; BSR set to: 0
  5971  00260E  0100               	movlb	0	; () banked
  5972  002610  90D8               	bcf	status,0,c
  5973  002612  338D               	rrcf	(___altoft@c+3)& (0+255),f,b
  5974  002614  338C               	rrcf	(___altoft@c+2)& (0+255),f,b
  5975  002616  338B               	rrcf	(___altoft@c+1)& (0+255),f,b
  5976  002618  338A               	rrcf	___altoft@c& (0+255),f,b
  5977  00261A  0100               	movlb	0	; () banked
  5978  00261C  2B92               	incf	___altoft@exp& (0+255),f,b
  5979  00261E  D000               	goto	l3476
  5980  002620                     l3476:
  5981                           
  5982                           ; BSR set to: 0
  5983  002620  0E00               	movlw	0
  5984  002622  0100               	movlb	0	; () banked
  5985  002624  158A               	andwf	___altoft@c& (0+255),w,b
  5986  002626  0100               	movlb	0	; () banked
  5987  002628  6F8E               	movwf	??___altoft& (0+255),b
  5988  00262A  0E00               	movlw	0
  5989  00262C  0100               	movlb	0	; () banked
  5990  00262E  158B               	andwf	(___altoft@c+1)& (0+255),w,b
  5991  002630  0100               	movlb	0	; () banked
  5992  002632  6F8F               	movwf	(??___altoft+1)& (0+255),b
  5993  002634  0E00               	movlw	0
  5994  002636  0100               	movlb	0	; () banked
  5995  002638  158C               	andwf	(___altoft@c+2)& (0+255),w,b
  5996  00263A  0100               	movlb	0	; () banked
  5997  00263C  6F90               	movwf	(??___altoft+2)& (0+255),b
  5998  00263E  0EFF               	movlw	255
  5999  002640  0100               	movlb	0	; () banked
  6000  002642  158D               	andwf	(___altoft@c+3)& (0+255),w,b
  6001  002644  0100               	movlb	0	; () banked
  6002  002646  6F91               	movwf	(??___altoft+3)& (0+255),b
  6003  002648  0100               	movlb	0	; () banked
  6004  00264A  518E               	movf	??___altoft& (0+255),w,b
  6005  00264C  0100               	movlb	0	; () banked
  6006  00264E  118F               	iorwf	(??___altoft+1)& (0+255),w,b
  6007  002650  0100               	movlb	0	; () banked
  6008  002652  1190               	iorwf	(??___altoft+2)& (0+255),w,b
  6009  002654  0100               	movlb	0	; () banked
  6010  002656  1191               	iorwf	(??___altoft+3)& (0+255),w,b
  6011  002658  A4D8               	btfss	status,2,c
  6012  00265A  D7D9               	goto	l3474
  6013                           
  6014                           ; BSR set to: 0
  6015                           
  6016                           ; BSR set to: 0
  6017  00265C  C08A  F060         	movff	___altoft@c,___ftpack@arg
  6018  002660  C08B  F061         	movff	___altoft@c+1,___ftpack@arg+1
  6019  002664  C08C  F062         	movff	___altoft@c+2,___ftpack@arg+2
  6020  002668  C092  F063         	movff	___altoft@exp,___ftpack@exp
  6021  00266C  C093  F064         	movff	___altoft@sign,___ftpack@sign
  6022  002670  EC87  F00E         	call	___ftpack	;wreg free
  6023  002674  C060  F08A         	movff	?___ftpack,?___altoft
  6024  002678  C061  F08B         	movff	?___ftpack+1,?___altoft+1
  6025  00267C  C062  F08C         	movff	?___ftpack+2,?___altoft+2
  6026  002680  D000               	goto	l687
  6027  002682                     l687:
  6028  002682  0012               	return		;funcret
  6029  002684                     __end_of___altoft:
  6030                           	opt stack 0
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           intcon2	equ	0xFF1
  6035                           postinc0	equ	0xFEE
  6036                           wreg	equ	0xFE8
  6037                           indf2	equ	0xFDF
  6038                           postinc2	equ	0xFDE
  6039                           postdec2	equ	0xFDD
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _eval_poly *****************
  6045 ;; Defined at:
  6046 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  x               3   39[BANK0 ] float 
  6049 ;;  d               2   42[BANK0 ] PTR const 
  6050 ;;		 -> log@coeff(27), exp@coeff(30), 
  6051 ;;  n               2   44[BANK0 ] int 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  res             3   48[BANK0 ] int 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  3   39[BANK0 ] int 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:       12 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    8
  6070 ;; This function calls:
  6071 ;;		___ftadd
  6072 ;;		___ftmul
  6073 ;;		___wmul
  6074 ;; This function is called by:
  6075 ;;		_exp
  6076 ;;		_log
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text46
  6081  002040                     __ptext46:
  6082                           	opt stack 0
  6083  002040                     _eval_poly:
  6084                           	opt stack 19
  6085                           
  6086                           ;incstack = 0
  6087  002040  C08C  F060         	movff	eval_poly@n,___wmul@multiplier
  6088  002044  C08D  F061         	movff	eval_poly@n+1,___wmul@multiplier+1
  6089  002048  0E00               	movlw	0
  6090  00204A  0100               	movlb	0	; () banked
  6091  00204C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6092  00204E  0E03               	movlw	3
  6093  002050  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6094  002052  ECBB  F015         	call	___wmul	;wreg free
  6095  002056  C08A  F08E         	movff	eval_poly@d,??_eval_poly
  6096  00205A  C08B  F08F         	movff	eval_poly@d+1,??_eval_poly+1
  6097  00205E  0100               	movlb	0	; () banked
  6098  002060  5160               	movf	?___wmul& (0+255),w,b
  6099  002062  0100               	movlb	0	; () banked
  6100  002064  278E               	addwf	??_eval_poly& (0+255),f,b
  6101  002066  0100               	movlb	0	; () banked
  6102  002068  5161               	movf	(?___wmul+1)& (0+255),w,b
  6103  00206A  0100               	movlb	0	; () banked
  6104  00206C  238F               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6105  00206E  C08E  FFF6         	movff	??_eval_poly,tblptrl
  6106  002072  C08F  FFF7         	movff	??_eval_poly+1,tblptrh
  6107  002076                     	if	0	;tblptru may be non-zero
  6108  002076                     	endif
  6109  002076                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6110  002076  0E00               	movlw	low (__mediumconst shr (0+16))
  6111  002078  6EF8               	movwf	tblptru,c
  6112  00207A                     	endif
  6113  00207A  0009               	tblrd		*+
  6114  00207C  CFF5 F090          	movff	tablat,eval_poly@res
  6115  002080  0009               	tblrd		*+
  6116  002082  CFF5 F091          	movff	tablat,eval_poly@res+1
  6117  002086  000A               	tblrd		*-
  6118  002088  CFF5 F092          	movff	tablat,eval_poly@res+2
  6119  00208C  D047               	goto	l3738
  6120  00208E                     l3736:
  6121                           
  6122                           ; BSR set to: 0
  6123  00208E  C090  F06F         	movff	eval_poly@res,___ftmul@f2
  6124  002092  C091  F070         	movff	eval_poly@res+1,___ftmul@f2+1
  6125  002096  C092  F071         	movff	eval_poly@res+2,___ftmul@f2+2
  6126  00209A  C087  F06C         	movff	eval_poly@x,___ftmul@f1
  6127  00209E  C088  F06D         	movff	eval_poly@x+1,___ftmul@f1+1
  6128  0020A2  C089  F06E         	movff	eval_poly@x+2,___ftmul@f1+2
  6129  0020A6  ECFF  F00B         	call	___ftmul	;wreg free
  6130  0020AA  C06C  F07B         	movff	?___ftmul,___ftadd@f1
  6131  0020AE  C06D  F07C         	movff	?___ftmul+1,___ftadd@f1+1
  6132  0020B2  C06E  F07D         	movff	?___ftmul+2,___ftadd@f1+2
  6133  0020B6  0E00               	movlw	0
  6134  0020B8  0100               	movlb	0	; () banked
  6135  0020BA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6136  0020BC  0E03               	movlw	3
  6137  0020BE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6138  0020C0  0100               	movlb	0	; () banked
  6139  0020C2  078C               	decf	eval_poly@n& (0+255),f,b
  6140  0020C4  A0D8               	btfss	status,0,c
  6141  0020C6  078D               	decf	(eval_poly@n+1)& (0+255),f,b
  6142  0020C8  C08C  F060         	movff	eval_poly@n,___wmul@multiplier
  6143  0020CC  C08D  F061         	movff	eval_poly@n+1,___wmul@multiplier+1
  6144  0020D0  ECBB  F015         	call	___wmul	;wreg free
  6145  0020D4  C08A  F08E         	movff	eval_poly@d,??_eval_poly
  6146  0020D8  C08B  F08F         	movff	eval_poly@d+1,??_eval_poly+1
  6147  0020DC  0100               	movlb	0	; () banked
  6148  0020DE  5160               	movf	?___wmul& (0+255),w,b
  6149  0020E0  0100               	movlb	0	; () banked
  6150  0020E2  278E               	addwf	??_eval_poly& (0+255),f,b
  6151  0020E4  0100               	movlb	0	; () banked
  6152  0020E6  5161               	movf	(?___wmul+1)& (0+255),w,b
  6153  0020E8  0100               	movlb	0	; () banked
  6154  0020EA  238F               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6155  0020EC  C08E  FFF6         	movff	??_eval_poly,tblptrl
  6156  0020F0  C08F  FFF7         	movff	??_eval_poly+1,tblptrh
  6157  0020F4                     	if	0	;tblptru may be non-zero
  6158  0020F4                     	endif
  6159  0020F4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6160  0020F4  0E00               	movlw	low (__mediumconst shr (0+16))
  6161  0020F6  6EF8               	movwf	tblptru,c
  6162  0020F8                     	endif
  6163  0020F8  0009               	tblrd		*+
  6164  0020FA  CFF5 F07E          	movff	tablat,___ftadd@f2
  6165  0020FE  0009               	tblrd		*+
  6166  002100  CFF5 F07F          	movff	tablat,___ftadd@f2+1
  6167  002104  000A               	tblrd		*-
  6168  002106  CFF5 F080          	movff	tablat,___ftadd@f2+2
  6169  00210A  EC1E  F008         	call	___ftadd	;wreg free
  6170  00210E  C07B  F090         	movff	?___ftadd,eval_poly@res
  6171  002112  C07C  F091         	movff	?___ftadd+1,eval_poly@res+1
  6172  002116  C07D  F092         	movff	?___ftadd+2,eval_poly@res+2
  6173  00211A  D000               	goto	l3738
  6174  00211C                     l3738:
  6175  00211C  0100               	movlb	0	; () banked
  6176  00211E  518C               	movf	eval_poly@n& (0+255),w,b
  6177  002120  0100               	movlb	0	; () banked
  6178  002122  118D               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6179  002124  A4D8               	btfss	status,2,c
  6180  002126  D7B3               	goto	l3736
  6181                           
  6182                           ; BSR set to: 0
  6183  002128  C090  F087         	movff	eval_poly@res,?_eval_poly
  6184  00212C  C091  F088         	movff	eval_poly@res+1,?_eval_poly+1
  6185  002130  C092  F089         	movff	eval_poly@res+2,?_eval_poly+2
  6186                           
  6187                           ; BSR set to: 0
  6188  002134  0012               	return		;funcret
  6189  002136                     __end_of_eval_poly:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           intcon2	equ	0xFF1
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           fsr2h	equ	0xFDA
  6205                           fsr2l	equ	0xFD9
  6206                           status	equ	0xFD8
  6207                           
  6208 ;; *************** function ___wmul *****************
  6209 ;; Defined at:
  6210 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6213 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  product         2    4[BANK0 ] unsigned int 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  2    0[BANK0 ] unsigned int 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0, prodl, prodh
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6225 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;Total ram usage:        6 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    6
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_main
  6236 ;;		_eval_poly
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text47
  6241  002B76                     __ptext47:
  6242                           	opt stack 0
  6243  002B76                     ___wmul:
  6244                           	opt stack 24
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;incstack = 0
  6248  002B76  0100               	movlb	0	; () banked
  6249  002B78  5160               	movf	___wmul@multiplier& (0+255),w,b
  6250  002B7A  0100               	movlb	0	; () banked
  6251  002B7C  0362               	mulwf	___wmul@multiplicand& (0+255),b
  6252  002B7E  CFF3 F064          	movff	prodl,___wmul@product
  6253  002B82  CFF4 F065          	movff	prodh,___wmul@product+1
  6254  002B86  0100               	movlb	0	; () banked
  6255  002B88  5160               	movf	___wmul@multiplier& (0+255),w,b
  6256  002B8A  0100               	movlb	0	; () banked
  6257  002B8C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6258  002B8E  50F3               	movf	prodl,w,c
  6259  002B90  0100               	movlb	0	; () banked
  6260  002B92  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  6261  002B94  0100               	movlb	0	; () banked
  6262  002B96  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6263  002B98  0100               	movlb	0	; () banked
  6264  002B9A  0362               	mulwf	___wmul@multiplicand& (0+255),b
  6265  002B9C  50F3               	movf	prodl,w,c
  6266  002B9E  0100               	movlb	0	; () banked
  6267  002BA0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  6268                           
  6269                           ; BSR set to: 0
  6270  002BA2  C064  F060         	movff	___wmul@product,?___wmul
  6271  002BA6  C065  F061         	movff	___wmul@product+1,?___wmul+1
  6272  002BAA  D000               	goto	l590
  6273  002BAC                     l590:
  6274                           
  6275                           ; BSR set to: 0
  6276  002BAC  0012               	return		;funcret
  6277  002BAE                     __end_of___wmul:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           intcon2	equ	0xFF1
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           indf2	equ	0xFDF
  6290                           postinc2	equ	0xFDE
  6291                           postdec2	equ	0xFDD
  6292                           fsr2h	equ	0xFDA
  6293                           fsr2l	equ	0xFD9
  6294                           status	equ	0xFD8
  6295                           
  6296 ;; *************** function ___ftmul *****************
  6297 ;; Defined at:
  6298 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  f1              3   12[BANK0 ] float 
  6301 ;;  f2              3   15[BANK0 ] float 
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  6304 ;;  sign            1   26[BANK0 ] unsigned char 
  6305 ;;  cntr            1   25[BANK0 ] unsigned char 
  6306 ;;  exp             1   21[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  3   12[BANK0 ] float 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:       15 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    7
  6323 ;; This function calls:
  6324 ;;		___ftpack
  6325 ;; This function is called by:
  6326 ;;		_CalculateSensorSums
  6327 ;;		_pow
  6328 ;;		_exp
  6329 ;;		_log
  6330 ;;		_eval_poly
  6331 ;;		_ConvertDistanceCM
  6332 ;;		_ConvertDistanceIN
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           	psect	text48
  6337  0017FE                     __ptext48:
  6338                           	opt stack 0
  6339  0017FE                     ___ftmul:
  6340                           	opt stack 19
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;incstack = 0
  6344  0017FE  C06E  F072         	movff	___ftmul@f1+2,??___ftmul
  6345  001802  0100               	movlb	0	; () banked
  6346  001804  6B73               	clrf	(??___ftmul+1)& (0+255),b
  6347  001806  6B74               	clrf	(??___ftmul+2)& (0+255),b
  6348  001808  0100               	movlb	0	; () banked
  6349  00180A  356D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6350  00180C  0100               	movlb	0	; () banked
  6351  00180E  3772               	rlcf	??___ftmul& (0+255),f,b
  6352  001810  E301               	bnc	u2901
  6353  001812  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  6354  001814                     u2901:
  6355  001814  0100               	movlb	0	; () banked
  6356  001816  5172               	movf	??___ftmul& (0+255),w,b
  6357  001818  0100               	movlb	0	; () banked
  6358  00181A  6F75               	movwf	___ftmul@exp& (0+255),b
  6359  00181C  0100               	movlb	0	; () banked
  6360  00181E  5175               	movf	___ftmul@exp& (0+255),w,b
  6361  001820  A4D8               	btfss	status,2,c
  6362  001822  D002               	goto	l3558
  6363  001824  D014               	goto	l3560
  6364                           
  6365                           ; BSR set to: 0
  6366                           
  6367                           ; BSR set to: 0
  6368  001826  D098               	goto	l999
  6369  001828                     l3558:
  6370                           
  6371                           ; BSR set to: 0
  6372  001828  C071  F072         	movff	___ftmul@f2+2,??___ftmul
  6373  00182C  0100               	movlb	0	; () banked
  6374  00182E  6B73               	clrf	(??___ftmul+1)& (0+255),b
  6375  001830  6B74               	clrf	(??___ftmul+2)& (0+255),b
  6376  001832  0100               	movlb	0	; () banked
  6377  001834  3570               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6378  001836  0100               	movlb	0	; () banked
  6379  001838  3772               	rlcf	??___ftmul& (0+255),f,b
  6380  00183A  E301               	bnc	u2921
  6381  00183C  8173               	bsf	(??___ftmul+1)& (0+255),0,b
  6382  00183E                     u2921:
  6383  00183E  0100               	movlb	0	; () banked
  6384  001840  5172               	movf	??___ftmul& (0+255),w,b
  6385  001842  0100               	movlb	0	; () banked
  6386  001844  6F7A               	movwf	___ftmul@sign& (0+255),b
  6387  001846  0100               	movlb	0	; () banked
  6388  001848  517A               	movf	___ftmul@sign& (0+255),w,b
  6389  00184A  A4D8               	btfss	status,2,c
  6390  00184C  D00A               	goto	l3564
  6391  00184E                     l3560:
  6392                           
  6393                           ; BSR set to: 0
  6394  00184E  0E00               	movlw	0
  6395  001850  0100               	movlb	0	; () banked
  6396  001852  6F6C               	movwf	?___ftmul& (0+255),b
  6397  001854  0E00               	movlw	0
  6398  001856  0100               	movlb	0	; () banked
  6399  001858  6F6D               	movwf	(?___ftmul+1)& (0+255),b
  6400  00185A  0E00               	movlw	0
  6401  00185C  0100               	movlb	0	; () banked
  6402  00185E  6F6E               	movwf	(?___ftmul+2)& (0+255),b
  6403                           
  6404                           ; BSR set to: 0
  6405  001860  D07B               	goto	l999
  6406  001862                     l3564:
  6407                           
  6408                           ; BSR set to: 0
  6409  001862  0100               	movlb	0	; () banked
  6410  001864  517A               	movf	___ftmul@sign& (0+255),w,b
  6411  001866  0F7B               	addlw	123
  6412  001868  0100               	movlb	0	; () banked
  6413  00186A  2775               	addwf	___ftmul@exp& (0+255),f,b
  6414                           
  6415                           ; BSR set to: 0
  6416  00186C  C06E  F07A         	movff	___ftmul@f1+2,___ftmul@sign
  6417  001870  0100               	movlb	0	; () banked
  6418  001872  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  6419  001874  0100               	movlb	0	; () banked
  6420  001876  1B7A               	xorwf	___ftmul@sign& (0+255),f,b
  6421  001878  0E80               	movlw	128
  6422  00187A  0100               	movlb	0	; () banked
  6423  00187C  177A               	andwf	___ftmul@sign& (0+255),f,b
  6424                           
  6425                           ; BSR set to: 0
  6426  00187E  0100               	movlb	0	; () banked
  6427  001880  8F6D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6428                           
  6429                           ; BSR set to: 0
  6430  001882  0100               	movlb	0	; () banked
  6431  001884  8F70               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6432                           
  6433                           ; BSR set to: 0
  6434  001886  0EFF               	movlw	255
  6435  001888  0100               	movlb	0	; () banked
  6436  00188A  176F               	andwf	___ftmul@f2& (0+255),f,b
  6437  00188C  0EFF               	movlw	255
  6438  00188E  0100               	movlb	0	; () banked
  6439  001890  1770               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6440  001892  0E00               	movlw	0
  6441  001894  0100               	movlb	0	; () banked
  6442  001896  1771               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6443                           
  6444                           ; BSR set to: 0
  6445  001898  0E00               	movlw	0
  6446  00189A  0100               	movlb	0	; () banked
  6447  00189C  6F76               	movwf	___ftmul@f3_as_product& (0+255),b
  6448  00189E  0E00               	movlw	0
  6449  0018A0  0100               	movlb	0	; () banked
  6450  0018A2  6F77               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6451  0018A4  0E00               	movlw	0
  6452  0018A6  0100               	movlb	0	; () banked
  6453  0018A8  6F78               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6454                           
  6455                           ; BSR set to: 0
  6456  0018AA  0E07               	movlw	7
  6457  0018AC  0100               	movlb	0	; () banked
  6458  0018AE  6F79               	movwf	___ftmul@cntr& (0+255),b
  6459  0018B0  D000               	goto	l3578
  6460  0018B2                     l3578:
  6461                           
  6462                           ; BSR set to: 0
  6463  0018B2  0100               	movlb	0	; () banked
  6464  0018B4  A16C               	btfss	___ftmul@f1& (0+255),0,b
  6465  0018B6  D00D               	goto	l3582
  6466                           
  6467                           ; BSR set to: 0
  6468  0018B8  0100               	movlb	0	; () banked
  6469  0018BA  516F               	movf	___ftmul@f2& (0+255),w,b
  6470  0018BC  0100               	movlb	0	; () banked
  6471  0018BE  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6472  0018C0  0100               	movlb	0	; () banked
  6473  0018C2  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  6474  0018C4  0100               	movlb	0	; () banked
  6475  0018C6  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6476  0018C8  0100               	movlb	0	; () banked
  6477  0018CA  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  6478  0018CC  0100               	movlb	0	; () banked
  6479  0018CE  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6480  0018D0  D000               	goto	l3582
  6481  0018D2                     l3582:
  6482                           
  6483                           ; BSR set to: 0
  6484  0018D2  0100               	movlb	0	; () banked
  6485  0018D4  90D8               	bcf	status,0,c
  6486  0018D6  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6487  0018D8  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6488  0018DA  336C               	rrcf	___ftmul@f1& (0+255),f,b
  6489  0018DC  0100               	movlb	0	; () banked
  6490  0018DE  90D8               	bcf	status,0,c
  6491  0018E0  376F               	rlcf	___ftmul@f2& (0+255),f,b
  6492  0018E2  3770               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6493  0018E4  3771               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6494                           
  6495                           ; BSR set to: 0
  6496  0018E6  0100               	movlb	0	; () banked
  6497  0018E8  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  6498  0018EA  D7E3               	goto	l3578
  6499  0018EC  D000               	goto	l3586
  6500  0018EE                     l3586:
  6501                           
  6502                           ; BSR set to: 0
  6503  0018EE  0E09               	movlw	9
  6504  0018F0  0100               	movlb	0	; () banked
  6505  0018F2  6F79               	movwf	___ftmul@cntr& (0+255),b
  6506  0018F4  D000               	goto	l3588
  6507  0018F6                     l3588:
  6508                           
  6509                           ; BSR set to: 0
  6510  0018F6  0100               	movlb	0	; () banked
  6511  0018F8  A16C               	btfss	___ftmul@f1& (0+255),0,b
  6512  0018FA  D00D               	goto	l3592
  6513                           
  6514                           ; BSR set to: 0
  6515  0018FC  0100               	movlb	0	; () banked
  6516  0018FE  516F               	movf	___ftmul@f2& (0+255),w,b
  6517  001900  0100               	movlb	0	; () banked
  6518  001902  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6519  001904  0100               	movlb	0	; () banked
  6520  001906  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
  6521  001908  0100               	movlb	0	; () banked
  6522  00190A  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6523  00190C  0100               	movlb	0	; () banked
  6524  00190E  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
  6525  001910  0100               	movlb	0	; () banked
  6526  001912  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6527  001914  D000               	goto	l3592
  6528  001916                     l3592:
  6529                           
  6530                           ; BSR set to: 0
  6531  001916  0100               	movlb	0	; () banked
  6532  001918  90D8               	bcf	status,0,c
  6533  00191A  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6534  00191C  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6535  00191E  336C               	rrcf	___ftmul@f1& (0+255),f,b
  6536  001920  0100               	movlb	0	; () banked
  6537  001922  90D8               	bcf	status,0,c
  6538  001924  3378               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6539  001926  3377               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6540  001928  3376               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6541                           
  6542                           ; BSR set to: 0
  6543  00192A  0100               	movlb	0	; () banked
  6544  00192C  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
  6545  00192E  D7E3               	goto	l3588
  6546  001930  D000               	goto	l3596
  6547  001932                     l3596:
  6548                           
  6549                           ; BSR set to: 0
  6550  001932  C076  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  6551  001936  C077  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6552  00193A  C078  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6553  00193E  C075  F063         	movff	___ftmul@exp,___ftpack@exp
  6554  001942  C07A  F064         	movff	___ftmul@sign,___ftpack@sign
  6555  001946  EC87  F00E         	call	___ftpack	;wreg free
  6556  00194A  C060  F06C         	movff	?___ftpack,?___ftmul
  6557  00194E  C061  F06D         	movff	?___ftpack+1,?___ftmul+1
  6558  001952  C062  F06E         	movff	?___ftpack+2,?___ftmul+2
  6559  001956  D000               	goto	l999
  6560  001958                     l999:
  6561  001958  0012               	return		;funcret
  6562  00195A                     __end_of___ftmul:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           intcon2	equ	0xFF1
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function ___ftsub *****************
  6582 ;; Defined at:
  6583 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  f1              3   39[BANK0 ] float 
  6586 ;;  f2              3   42[BANK0 ] float 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;                  3   39[BANK0 ] float 
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6598 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;Total ram usage:        6 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    8
  6605 ;; This function calls:
  6606 ;;		___ftadd
  6607 ;; This function is called by:
  6608 ;;		_exp
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text49
  6613  002A56                     __ptext49:
  6614                           	opt stack 0
  6615  002A56                     ___ftsub:
  6616                           	opt stack 19
  6617                           
  6618                           ;incstack = 0
  6619  002A56  0100               	movlb	0	; () banked
  6620  002A58  518A               	movf	___ftsub@f2& (0+255),w,b
  6621  002A5A  0100               	movlb	0	; () banked
  6622  002A5C  118B               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6623  002A5E  0100               	movlb	0	; () banked
  6624  002A60  118C               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6625  002A62  B4D8               	btfsc	status,2,c
  6626  002A64  D00A               	goto	l3690
  6627                           
  6628                           ; BSR set to: 0
  6629  002A66  0E00               	movlw	0
  6630  002A68  0100               	movlb	0	; () banked
  6631  002A6A  1B8A               	xorwf	___ftsub@f2& (0+255),f,b
  6632  002A6C  0E00               	movlw	0
  6633  002A6E  0100               	movlb	0	; () banked
  6634  002A70  1B8B               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6635  002A72  0E80               	movlw	128
  6636  002A74  0100               	movlb	0	; () banked
  6637  002A76  1B8C               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6638  002A78  D000               	goto	l3690
  6639  002A7A                     l3690:
  6640                           
  6641                           ; BSR set to: 0
  6642  002A7A  C087  F07B         	movff	___ftsub@f1,___ftadd@f1
  6643  002A7E  C088  F07C         	movff	___ftsub@f1+1,___ftadd@f1+1
  6644  002A82  C089  F07D         	movff	___ftsub@f1+2,___ftadd@f1+2
  6645  002A86  C08A  F07E         	movff	___ftsub@f2,___ftadd@f2
  6646  002A8A  C08B  F07F         	movff	___ftsub@f2+1,___ftadd@f2+1
  6647  002A8E  C08C  F080         	movff	___ftsub@f2+2,___ftadd@f2+2
  6648  002A92  EC1E  F008         	call	___ftadd	;wreg free
  6649  002A96  C07B  F087         	movff	?___ftadd,?___ftsub
  6650  002A9A  C07C  F088         	movff	?___ftadd+1,?___ftsub+1
  6651  002A9E  C07D  F089         	movff	?___ftadd+2,?___ftsub+2
  6652  002AA2  D000               	goto	l1016
  6653  002AA4                     l1016:
  6654  002AA4  0012               	return		;funcret
  6655  002AA6                     __end_of___ftsub:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           intcon	equ	0xFF2
  6664                           intcon2	equ	0xFF1
  6665                           postinc0	equ	0xFEE
  6666                           wreg	equ	0xFE8
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function ___ftadd *****************
  6675 ;; Defined at:
  6676 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  f1              3   27[BANK0 ] float 
  6679 ;;  f2              3   30[BANK0 ] float 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  exp1            1   38[BANK0 ] unsigned char 
  6682 ;;  exp2            1   37[BANK0 ] unsigned char 
  6683 ;;  sign            1   36[BANK0 ] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  3   27[BANK0 ] float 
  6686 ;; Registers used:
  6687 ;;		wreg, status,2, status,0, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6693 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;Total ram usage:       12 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    7
  6700 ;; This function calls:
  6701 ;;		___ftpack
  6702 ;; This function is called by:
  6703 ;;		___ftsub
  6704 ;;		_floor
  6705 ;;		_log
  6706 ;;		_eval_poly
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text50
  6711  00103C                     __ptext50:
  6712                           	opt stack 0
  6713  00103C                     ___ftadd:
  6714                           	opt stack 19
  6715                           
  6716                           ;incstack = 0
  6717  00103C  C07D  F081         	movff	___ftadd@f1+2,??___ftadd
  6718  001040  0100               	movlb	0	; () banked
  6719  001042  6B82               	clrf	(??___ftadd+1)& (0+255),b
  6720  001044  6B83               	clrf	(??___ftadd+2)& (0+255),b
  6721  001046  0100               	movlb	0	; () banked
  6722  001048  357C               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6723  00104A  0100               	movlb	0	; () banked
  6724  00104C  3781               	rlcf	??___ftadd& (0+255),f,b
  6725  00104E  E301               	bnc	u2691
  6726  001050  8182               	bsf	(??___ftadd+1)& (0+255),0,b
  6727  001052                     u2691:
  6728  001052  0100               	movlb	0	; () banked
  6729  001054  5181               	movf	??___ftadd& (0+255),w,b
  6730  001056  0100               	movlb	0	; () banked
  6731  001058  6F86               	movwf	___ftadd@exp1& (0+255),b
  6732  00105A  C080  F081         	movff	___ftadd@f2+2,??___ftadd
  6733  00105E  0100               	movlb	0	; () banked
  6734  001060  6B82               	clrf	(??___ftadd+1)& (0+255),b
  6735  001062  6B83               	clrf	(??___ftadd+2)& (0+255),b
  6736  001064  0100               	movlb	0	; () banked
  6737  001066  357F               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6738  001068  0100               	movlb	0	; () banked
  6739  00106A  3781               	rlcf	??___ftadd& (0+255),f,b
  6740  00106C  E301               	bnc	u2701
  6741  00106E  8182               	bsf	(??___ftadd+1)& (0+255),0,b
  6742  001070                     u2701:
  6743  001070  0100               	movlb	0	; () banked
  6744  001072  5181               	movf	??___ftadd& (0+255),w,b
  6745  001074  0100               	movlb	0	; () banked
  6746  001076  6F85               	movwf	___ftadd@exp2& (0+255),b
  6747                           
  6748                           ; BSR set to: 0
  6749  001078  0100               	movlb	0	; () banked
  6750  00107A  5186               	movf	___ftadd@exp1& (0+255),w,b
  6751  00107C  0100               	movlb	0	; () banked
  6752  00107E  B4D8               	btfsc	status,2,c
  6753  001080  D011               	goto	l952
  6754                           
  6755                           ; BSR set to: 0
  6756  001082  0100               	movlb	0	; () banked
  6757  001084  5185               	movf	___ftadd@exp2& (0+255),w,b
  6758  001086  0100               	movlb	0	; () banked
  6759  001088  5D86               	subwf	___ftadd@exp1& (0+255),w,b
  6760  00108A  B0D8               	btfsc	status,0,c
  6761  00108C  D012               	goto	l3490
  6762                           
  6763                           ; BSR set to: 0
  6764  00108E  0100               	movlb	0	; () banked
  6765  001090  5186               	movf	___ftadd@exp1& (0+255),w,b
  6766  001092  0800               	sublw	0
  6767  001094  0100               	movlb	0	; () banked
  6768  001096  2585               	addwf	___ftadd@exp2& (0+255),w,b
  6769  001098  0100               	movlb	0	; () banked
  6770  00109A  6F81               	movwf	??___ftadd& (0+255),b
  6771  00109C  0E18               	movlw	24
  6772  00109E  0100               	movlb	0	; () banked
  6773  0010A0  6581               	cpfsgt	??___ftadd& (0+255),b
  6774  0010A2  D007               	goto	l3490
  6775  0010A4                     l952:
  6776                           
  6777                           ; BSR set to: 0
  6778  0010A4  C07E  F07B         	movff	___ftadd@f2,?___ftadd
  6779  0010A8  C07F  F07C         	movff	___ftadd@f2+1,?___ftadd+1
  6780  0010AC  C080  F07D         	movff	___ftadd@f2+2,?___ftadd+2
  6781  0010B0  D103               	goto	l953
  6782  0010B2                     l3490:
  6783                           
  6784                           ; BSR set to: 0
  6785  0010B2  0100               	movlb	0	; () banked
  6786  0010B4  5185               	movf	___ftadd@exp2& (0+255),w,b
  6787  0010B6  0100               	movlb	0	; () banked
  6788  0010B8  B4D8               	btfsc	status,2,c
  6789  0010BA  D011               	goto	l956
  6790                           
  6791                           ; BSR set to: 0
  6792  0010BC  0100               	movlb	0	; () banked
  6793  0010BE  5186               	movf	___ftadd@exp1& (0+255),w,b
  6794  0010C0  0100               	movlb	0	; () banked
  6795  0010C2  5D85               	subwf	___ftadd@exp2& (0+255),w,b
  6796  0010C4  B0D8               	btfsc	status,0,c
  6797  0010C6  D012               	goto	l3496
  6798                           
  6799                           ; BSR set to: 0
  6800  0010C8  0100               	movlb	0	; () banked
  6801  0010CA  5185               	movf	___ftadd@exp2& (0+255),w,b
  6802  0010CC  0800               	sublw	0
  6803  0010CE  0100               	movlb	0	; () banked
  6804  0010D0  2586               	addwf	___ftadd@exp1& (0+255),w,b
  6805  0010D2  0100               	movlb	0	; () banked
  6806  0010D4  6F81               	movwf	??___ftadd& (0+255),b
  6807  0010D6  0E18               	movlw	24
  6808  0010D8  0100               	movlb	0	; () banked
  6809  0010DA  6581               	cpfsgt	??___ftadd& (0+255),b
  6810  0010DC  D007               	goto	l3496
  6811  0010DE                     l956:
  6812                           
  6813                           ; BSR set to: 0
  6814  0010DE  C07B  F07B         	movff	___ftadd@f1,?___ftadd
  6815  0010E2  C07C  F07C         	movff	___ftadd@f1+1,?___ftadd+1
  6816  0010E6  C07D  F07D         	movff	___ftadd@f1+2,?___ftadd+2
  6817  0010EA  D0E6               	goto	l953
  6818  0010EC                     l3496:
  6819                           
  6820                           ; BSR set to: 0
  6821  0010EC  0E06               	movlw	6
  6822  0010EE  0100               	movlb	0	; () banked
  6823  0010F0  6F84               	movwf	___ftadd@sign& (0+255),b
  6824                           
  6825                           ; BSR set to: 0
  6826  0010F2  0100               	movlb	0	; () banked
  6827  0010F4  AF7D               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6828  0010F6  D003               	goto	l3502
  6829                           
  6830                           ; BSR set to: 0
  6831  0010F8  0100               	movlb	0	; () banked
  6832  0010FA  8F84               	bsf	___ftadd@sign& (0+255),7,b
  6833  0010FC  D000               	goto	l3502
  6834  0010FE                     l3502:
  6835                           
  6836                           ; BSR set to: 0
  6837  0010FE  0100               	movlb	0	; () banked
  6838  001100  AF80               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6839  001102  D002               	goto	l958
  6840                           
  6841                           ; BSR set to: 0
  6842  001104  0100               	movlb	0	; () banked
  6843  001106  8D84               	bsf	___ftadd@sign& (0+255),6,b
  6844  001108                     l958:
  6845                           
  6846                           ; BSR set to: 0
  6847  001108  0100               	movlb	0	; () banked
  6848  00110A  8F7C               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6849                           
  6850                           ; BSR set to: 0
  6851  00110C  0EFF               	movlw	255
  6852  00110E  0100               	movlb	0	; () banked
  6853  001110  177B               	andwf	___ftadd@f1& (0+255),f,b
  6854  001112  0EFF               	movlw	255
  6855  001114  0100               	movlb	0	; () banked
  6856  001116  177C               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6857  001118  0E00               	movlw	0
  6858  00111A  0100               	movlb	0	; () banked
  6859  00111C  177D               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6860  00111E  0100               	movlb	0	; () banked
  6861  001120  8F7F               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6862                           
  6863                           ; BSR set to: 0
  6864  001122  0EFF               	movlw	255
  6865  001124  0100               	movlb	0	; () banked
  6866  001126  177E               	andwf	___ftadd@f2& (0+255),f,b
  6867  001128  0EFF               	movlw	255
  6868  00112A  0100               	movlb	0	; () banked
  6869  00112C  177F               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6870  00112E  0E00               	movlw	0
  6871  001130  0100               	movlb	0	; () banked
  6872  001132  1780               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6873                           
  6874                           ; BSR set to: 0
  6875  001134  0100               	movlb	0	; () banked
  6876  001136  5185               	movf	___ftadd@exp2& (0+255),w,b
  6877  001138  0100               	movlb	0	; () banked
  6878  00113A  5D86               	subwf	___ftadd@exp1& (0+255),w,b
  6879  00113C  B0D8               	btfsc	status,0,c
  6880  00113E  D028               	goto	l3522
  6881  001140                     l3512:
  6882                           
  6883                           ; BSR set to: 0
  6884  001140  0100               	movlb	0	; () banked
  6885  001142  90D8               	bcf	status,0,c
  6886  001144  377E               	rlcf	___ftadd@f2& (0+255),f,b
  6887  001146  377F               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6888  001148  3780               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6889  00114A  0100               	movlb	0	; () banked
  6890  00114C  0785               	decf	___ftadd@exp2& (0+255),f,b
  6891                           
  6892                           ; BSR set to: 0
  6893  00114E  0100               	movlb	0	; () banked
  6894  001150  5186               	movf	___ftadd@exp1& (0+255),w,b
  6895  001152  0100               	movlb	0	; () banked
  6896  001154  1985               	xorwf	___ftadd@exp2& (0+255),w,b
  6897  001156  B4D8               	btfsc	status,2,c
  6898  001158  D013               	goto	l3520
  6899                           
  6900                           ; BSR set to: 0
  6901  00115A  0100               	movlb	0	; () banked
  6902  00115C  0784               	decf	___ftadd@sign& (0+255),f,b
  6903  00115E  C084  F081         	movff	___ftadd@sign,??___ftadd
  6904  001162  0E07               	movlw	7
  6905  001164  0100               	movlb	0	; () banked
  6906  001166  1781               	andwf	??___ftadd& (0+255),f,b
  6907  001168  B4D8               	btfsc	status,2,c
  6908  00116A  D00A               	goto	l3520
  6909  00116C  D7E9               	goto	l3512
  6910                           
  6911                           ; BSR set to: 0
  6912                           
  6913                           ; BSR set to: 0
  6914  00116E  D008               	goto	l3520
  6915  001170                     l3518:
  6916                           
  6917                           ; BSR set to: 0
  6918  001170  0100               	movlb	0	; () banked
  6919  001172  90D8               	bcf	status,0,c
  6920  001174  337D               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6921  001176  337C               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6922  001178  337B               	rrcf	___ftadd@f1& (0+255),f,b
  6923  00117A  0100               	movlb	0	; () banked
  6924  00117C  2B86               	incf	___ftadd@exp1& (0+255),f,b
  6925  00117E  D000               	goto	l3520
  6926  001180                     l3520:
  6927                           
  6928                           ; BSR set to: 0
  6929  001180  0100               	movlb	0	; () banked
  6930  001182  5185               	movf	___ftadd@exp2& (0+255),w,b
  6931  001184  0100               	movlb	0	; () banked
  6932  001186  1986               	xorwf	___ftadd@exp1& (0+255),w,b
  6933  001188  B4D8               	btfsc	status,2,c
  6934  00118A  D030               	goto	l967
  6935  00118C  D7F1               	goto	l3518
  6936                           
  6937                           ; BSR set to: 0
  6938  00118E  D02E               	goto	l967
  6939  001190                     l3522:
  6940                           
  6941                           ; BSR set to: 0
  6942  001190  0100               	movlb	0	; () banked
  6943  001192  5186               	movf	___ftadd@exp1& (0+255),w,b
  6944  001194  0100               	movlb	0	; () banked
  6945  001196  5D85               	subwf	___ftadd@exp2& (0+255),w,b
  6946  001198  B0D8               	btfsc	status,0,c
  6947  00119A  D028               	goto	l967
  6948  00119C                     l3524:
  6949                           
  6950                           ; BSR set to: 0
  6951  00119C  0100               	movlb	0	; () banked
  6952  00119E  90D8               	bcf	status,0,c
  6953  0011A0  377B               	rlcf	___ftadd@f1& (0+255),f,b
  6954  0011A2  377C               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6955  0011A4  377D               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6956  0011A6  0100               	movlb	0	; () banked
  6957  0011A8  0786               	decf	___ftadd@exp1& (0+255),f,b
  6958                           
  6959                           ; BSR set to: 0
  6960  0011AA  0100               	movlb	0	; () banked
  6961  0011AC  5186               	movf	___ftadd@exp1& (0+255),w,b
  6962  0011AE  0100               	movlb	0	; () banked
  6963  0011B0  1985               	xorwf	___ftadd@exp2& (0+255),w,b
  6964  0011B2  B4D8               	btfsc	status,2,c
  6965  0011B4  D013               	goto	l3532
  6966                           
  6967                           ; BSR set to: 0
  6968  0011B6  0100               	movlb	0	; () banked
  6969  0011B8  0784               	decf	___ftadd@sign& (0+255),f,b
  6970  0011BA  C084  F081         	movff	___ftadd@sign,??___ftadd
  6971  0011BE  0E07               	movlw	7
  6972  0011C0  0100               	movlb	0	; () banked
  6973  0011C2  1781               	andwf	??___ftadd& (0+255),f,b
  6974  0011C4  B4D8               	btfsc	status,2,c
  6975  0011C6  D00A               	goto	l3532
  6976  0011C8  D7E9               	goto	l3524
  6977                           
  6978                           ; BSR set to: 0
  6979                           
  6980                           ; BSR set to: 0
  6981  0011CA  D008               	goto	l3532
  6982  0011CC                     l3530:
  6983                           
  6984                           ; BSR set to: 0
  6985  0011CC  0100               	movlb	0	; () banked
  6986  0011CE  90D8               	bcf	status,0,c
  6987  0011D0  3380               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6988  0011D2  337F               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6989  0011D4  337E               	rrcf	___ftadd@f2& (0+255),f,b
  6990  0011D6  0100               	movlb	0	; () banked
  6991  0011D8  2B85               	incf	___ftadd@exp2& (0+255),f,b
  6992  0011DA  D000               	goto	l3532
  6993  0011DC                     l3532:
  6994                           
  6995                           ; BSR set to: 0
  6996  0011DC  0100               	movlb	0	; () banked
  6997  0011DE  5185               	movf	___ftadd@exp2& (0+255),w,b
  6998  0011E0  0100               	movlb	0	; () banked
  6999  0011E2  1986               	xorwf	___ftadd@exp1& (0+255),w,b
  7000  0011E4  B4D8               	btfsc	status,2,c
  7001  0011E6  D002               	goto	l967
  7002  0011E8  D7F1               	goto	l3530
  7003                           
  7004                           ; BSR set to: 0
  7005  0011EA  D000               	goto	l967
  7006  0011EC                     l967:
  7007                           
  7008                           ; BSR set to: 0
  7009  0011EC  0100               	movlb	0	; () banked
  7010  0011EE  AF84               	btfss	___ftadd@sign& (0+255),7,b
  7011  0011F0  D012               	goto	l976
  7012                           
  7013                           ; BSR set to: 0
  7014  0011F2  0EFF               	movlw	255
  7015  0011F4  0100               	movlb	0	; () banked
  7016  0011F6  1B7B               	xorwf	___ftadd@f1& (0+255),f,b
  7017  0011F8  0EFF               	movlw	255
  7018  0011FA  0100               	movlb	0	; () banked
  7019  0011FC  1B7C               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7020  0011FE  0EFF               	movlw	255
  7021  001200  0100               	movlb	0	; () banked
  7022  001202  1B7D               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7023  001204  0E01               	movlw	1
  7024  001206  0100               	movlb	0	; () banked
  7025  001208  277B               	addwf	___ftadd@f1& (0+255),f,b
  7026  00120A  0E00               	movlw	0
  7027  00120C  0100               	movlb	0	; () banked
  7028  00120E  237C               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7029  001210  0E00               	movlw	0
  7030  001212  0100               	movlb	0	; () banked
  7031  001214  237D               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7032  001216                     l976:
  7033                           
  7034                           ; BSR set to: 0
  7035  001216  0100               	movlb	0	; () banked
  7036  001218  AD84               	btfss	___ftadd@sign& (0+255),6,b
  7037  00121A  D013               	goto	l3538
  7038                           
  7039                           ; BSR set to: 0
  7040  00121C  0EFF               	movlw	255
  7041  00121E  0100               	movlb	0	; () banked
  7042  001220  1B7E               	xorwf	___ftadd@f2& (0+255),f,b
  7043  001222  0EFF               	movlw	255
  7044  001224  0100               	movlb	0	; () banked
  7045  001226  1B7F               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7046  001228  0EFF               	movlw	255
  7047  00122A  0100               	movlb	0	; () banked
  7048  00122C  1B80               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7049  00122E  0E01               	movlw	1
  7050  001230  0100               	movlb	0	; () banked
  7051  001232  277E               	addwf	___ftadd@f2& (0+255),f,b
  7052  001234  0E00               	movlw	0
  7053  001236  0100               	movlb	0	; () banked
  7054  001238  237F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7055  00123A  0E00               	movlw	0
  7056  00123C  0100               	movlb	0	; () banked
  7057  00123E  2380               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7058  001240  D000               	goto	l3538
  7059  001242                     l3538:
  7060                           
  7061                           ; BSR set to: 0
  7062  001242  0E00               	movlw	0
  7063  001244  0100               	movlb	0	; () banked
  7064  001246  6F84               	movwf	___ftadd@sign& (0+255),b
  7065                           
  7066                           ; BSR set to: 0
  7067  001248  0100               	movlb	0	; () banked
  7068  00124A  517B               	movf	___ftadd@f1& (0+255),w,b
  7069  00124C  0100               	movlb	0	; () banked
  7070  00124E  277E               	addwf	___ftadd@f2& (0+255),f,b
  7071  001250  0100               	movlb	0	; () banked
  7072  001252  517C               	movf	(___ftadd@f1+1)& (0+255),w,b
  7073  001254  0100               	movlb	0	; () banked
  7074  001256  237F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7075  001258  0100               	movlb	0	; () banked
  7076  00125A  517D               	movf	(___ftadd@f1+2)& (0+255),w,b
  7077  00125C  0100               	movlb	0	; () banked
  7078  00125E  2380               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7079                           
  7080                           ; BSR set to: 0
  7081  001260  0100               	movlb	0	; () banked
  7082  001262  AF80               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7083  001264  D016               	goto	l3548
  7084                           
  7085                           ; BSR set to: 0
  7086  001266  0EFF               	movlw	255
  7087  001268  0100               	movlb	0	; () banked
  7088  00126A  1B7E               	xorwf	___ftadd@f2& (0+255),f,b
  7089  00126C  0EFF               	movlw	255
  7090  00126E  0100               	movlb	0	; () banked
  7091  001270  1B7F               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7092  001272  0EFF               	movlw	255
  7093  001274  0100               	movlb	0	; () banked
  7094  001276  1B80               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7095  001278  0E01               	movlw	1
  7096  00127A  0100               	movlb	0	; () banked
  7097  00127C  277E               	addwf	___ftadd@f2& (0+255),f,b
  7098  00127E  0E00               	movlw	0
  7099  001280  0100               	movlb	0	; () banked
  7100  001282  237F               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7101  001284  0E00               	movlw	0
  7102  001286  0100               	movlb	0	; () banked
  7103  001288  2380               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7104                           
  7105                           ; BSR set to: 0
  7106  00128A  0E01               	movlw	1
  7107  00128C  0100               	movlb	0	; () banked
  7108  00128E  6F84               	movwf	___ftadd@sign& (0+255),b
  7109  001290  D000               	goto	l3548
  7110  001292                     l3548:
  7111                           
  7112                           ; BSR set to: 0
  7113  001292  C07E  F060         	movff	___ftadd@f2,___ftpack@arg
  7114  001296  C07F  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  7115  00129A  C080  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  7116  00129E  C086  F063         	movff	___ftadd@exp1,___ftpack@exp
  7117  0012A2  C084  F064         	movff	___ftadd@sign,___ftpack@sign
  7118  0012A6  EC87  F00E         	call	___ftpack	;wreg free
  7119  0012AA  C060  F07B         	movff	?___ftpack,?___ftadd
  7120  0012AE  C061  F07C         	movff	?___ftpack+1,?___ftadd+1
  7121  0012B2  C062  F07D         	movff	?___ftpack+2,?___ftadd+2
  7122  0012B6  D000               	goto	l953
  7123  0012B8                     l953:
  7124  0012B8  0012               	return		;funcret
  7125  0012BA                     __end_of___ftadd:
  7126                           	opt stack 0
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           intcon2	equ	0xFF1
  7135                           postinc0	equ	0xFEE
  7136                           wreg	equ	0xFE8
  7137                           indf2	equ	0xFDF
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function ___ftneg *****************
  7145 ;; Defined at:
  7146 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  f1              3    0[BANK0 ] float 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;		None
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  3    0[BANK0 ] float 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7160 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;Total ram usage:        3 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    6
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_pow
  7171 ;;		_exp
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text51
  7176  002BAE                     __ptext51:
  7177                           	opt stack 0
  7178  002BAE                     ___ftneg:
  7179                           	opt stack 21
  7180                           
  7181                           ;incstack = 0
  7182  002BAE  0100               	movlb	0	; () banked
  7183  002BB0  5160               	movf	___ftneg@f1& (0+255),w,b
  7184  002BB2  0100               	movlb	0	; () banked
  7185  002BB4  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  7186  002BB6  0100               	movlb	0	; () banked
  7187  002BB8  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  7188  002BBA  B4D8               	btfsc	status,2,c
  7189  002BBC  D009               	goto	l1009
  7190                           
  7191                           ; BSR set to: 0
  7192  002BBE  0E00               	movlw	0
  7193  002BC0  0100               	movlb	0	; () banked
  7194  002BC2  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  7195  002BC4  0E00               	movlw	0
  7196  002BC6  0100               	movlb	0	; () banked
  7197  002BC8  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  7198  002BCA  0E80               	movlw	128
  7199  002BCC  0100               	movlb	0	; () banked
  7200  002BCE  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  7201  002BD0                     l1009:
  7202                           
  7203                           ; BSR set to: 0
  7204  002BD0  C060  F060         	movff	___ftneg@f1,?___ftneg
  7205  002BD4  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  7206  002BD8  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  7207                           
  7208                           ; BSR set to: 0
  7209  002BDC  0012               	return		;funcret
  7210  002BDE                     __end_of___ftneg:
  7211                           	opt stack 0
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           intcon	equ	0xFF2
  7219                           intcon2	equ	0xFF1
  7220                           postinc0	equ	0xFEE
  7221                           wreg	equ	0xFE8
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function ___ftdiv *****************
  7230 ;; Defined at:
  7231 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  f1              3    8[BANK0 ] float 
  7234 ;;  f2              3   11[BANK0 ] float 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  f3              3   18[BANK0 ] float 
  7237 ;;  sign            1   22[BANK0 ] unsigned char 
  7238 ;;  exp             1   21[BANK0 ] unsigned char 
  7239 ;;  cntr            1   17[BANK0 ] unsigned char 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  3    8[BANK0 ] float 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:       15 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    7
  7256 ;; This function calls:
  7257 ;;		___ftpack
  7258 ;; This function is called by:
  7259 ;;		_exp
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text52
  7264  00195A                     __ptext52:
  7265                           	opt stack 0
  7266  00195A                     ___ftdiv:
  7267                           	opt stack 20
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  00195A  C06A  F06E         	movff	___ftdiv@f1+2,??___ftdiv
  7272  00195E  0100               	movlb	0	; () banked
  7273  001960  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
  7274  001962  6B70               	clrf	(??___ftdiv+2)& (0+255),b
  7275  001964  0100               	movlb	0	; () banked
  7276  001966  3569               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7277  001968  0100               	movlb	0	; () banked
  7278  00196A  376E               	rlcf	??___ftdiv& (0+255),f,b
  7279  00196C  E301               	bnc	u3011
  7280  00196E  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
  7281  001970                     u3011:
  7282  001970  0100               	movlb	0	; () banked
  7283  001972  516E               	movf	??___ftdiv& (0+255),w,b
  7284  001974  0100               	movlb	0	; () banked
  7285  001976  6F75               	movwf	___ftdiv@exp& (0+255),b
  7286  001978  0100               	movlb	0	; () banked
  7287  00197A  5175               	movf	___ftdiv@exp& (0+255),w,b
  7288  00197C  A4D8               	btfss	status,2,c
  7289  00197E  D002               	goto	l3646
  7290  001980  D014               	goto	l3648
  7291                           
  7292                           ; BSR set to: 0
  7293                           
  7294                           ; BSR set to: 0
  7295  001982  D08B               	goto	l984
  7296  001984                     l3646:
  7297                           
  7298                           ; BSR set to: 0
  7299  001984  C06D  F06E         	movff	___ftdiv@f2+2,??___ftdiv
  7300  001988  0100               	movlb	0	; () banked
  7301  00198A  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
  7302  00198C  6B70               	clrf	(??___ftdiv+2)& (0+255),b
  7303  00198E  0100               	movlb	0	; () banked
  7304  001990  356C               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7305  001992  0100               	movlb	0	; () banked
  7306  001994  376E               	rlcf	??___ftdiv& (0+255),f,b
  7307  001996  E301               	bnc	u3031
  7308  001998  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
  7309  00199A                     u3031:
  7310  00199A  0100               	movlb	0	; () banked
  7311  00199C  516E               	movf	??___ftdiv& (0+255),w,b
  7312  00199E  0100               	movlb	0	; () banked
  7313  0019A0  6F76               	movwf	___ftdiv@sign& (0+255),b
  7314  0019A2  0100               	movlb	0	; () banked
  7315  0019A4  5176               	movf	___ftdiv@sign& (0+255),w,b
  7316  0019A6  A4D8               	btfss	status,2,c
  7317  0019A8  D00A               	goto	l3652
  7318  0019AA                     l3648:
  7319                           
  7320                           ; BSR set to: 0
  7321  0019AA  0E00               	movlw	0
  7322  0019AC  0100               	movlb	0	; () banked
  7323  0019AE  6F68               	movwf	?___ftdiv& (0+255),b
  7324  0019B0  0E00               	movlw	0
  7325  0019B2  0100               	movlb	0	; () banked
  7326  0019B4  6F69               	movwf	(?___ftdiv+1)& (0+255),b
  7327  0019B6  0E00               	movlw	0
  7328  0019B8  0100               	movlb	0	; () banked
  7329  0019BA  6F6A               	movwf	(?___ftdiv+2)& (0+255),b
  7330                           
  7331                           ; BSR set to: 0
  7332  0019BC  D06E               	goto	l984
  7333  0019BE                     l3652:
  7334                           
  7335                           ; BSR set to: 0
  7336  0019BE  0E00               	movlw	0
  7337  0019C0  0100               	movlb	0	; () banked
  7338  0019C2  6F72               	movwf	___ftdiv@f3& (0+255),b
  7339  0019C4  0E00               	movlw	0
  7340  0019C6  0100               	movlb	0	; () banked
  7341  0019C8  6F73               	movwf	(___ftdiv@f3+1)& (0+255),b
  7342  0019CA  0E00               	movlw	0
  7343  0019CC  0100               	movlb	0	; () banked
  7344  0019CE  6F74               	movwf	(___ftdiv@f3+2)& (0+255),b
  7345                           
  7346                           ; BSR set to: 0
  7347  0019D0  0100               	movlb	0	; () banked
  7348  0019D2  5176               	movf	___ftdiv@sign& (0+255),w,b
  7349  0019D4  0F89               	addlw	137
  7350  0019D6  0100               	movlb	0	; () banked
  7351  0019D8  5F75               	subwf	___ftdiv@exp& (0+255),f,b
  7352                           
  7353                           ; BSR set to: 0
  7354  0019DA  C06A  F076         	movff	___ftdiv@f1+2,___ftdiv@sign
  7355                           
  7356                           ; BSR set to: 0
  7357  0019DE  0100               	movlb	0	; () banked
  7358  0019E0  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7359  0019E2  0100               	movlb	0	; () banked
  7360  0019E4  1B76               	xorwf	___ftdiv@sign& (0+255),f,b
  7361                           
  7362                           ; BSR set to: 0
  7363  0019E6  0E80               	movlw	128
  7364  0019E8  0100               	movlb	0	; () banked
  7365  0019EA  1776               	andwf	___ftdiv@sign& (0+255),f,b
  7366                           
  7367                           ; BSR set to: 0
  7368  0019EC  0100               	movlb	0	; () banked
  7369  0019EE  8F69               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7370                           
  7371                           ; BSR set to: 0
  7372  0019F0  0EFF               	movlw	255
  7373  0019F2  0100               	movlb	0	; () banked
  7374  0019F4  1768               	andwf	___ftdiv@f1& (0+255),f,b
  7375  0019F6  0EFF               	movlw	255
  7376  0019F8  0100               	movlb	0	; () banked
  7377  0019FA  1769               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7378  0019FC  0E00               	movlw	0
  7379  0019FE  0100               	movlb	0	; () banked
  7380  001A00  176A               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7381                           
  7382                           ; BSR set to: 0
  7383  001A02  0100               	movlb	0	; () banked
  7384  001A04  8F6C               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7385                           
  7386                           ; BSR set to: 0
  7387  001A06  0EFF               	movlw	255
  7388  001A08  0100               	movlb	0	; () banked
  7389  001A0A  176B               	andwf	___ftdiv@f2& (0+255),f,b
  7390  001A0C  0EFF               	movlw	255
  7391  001A0E  0100               	movlb	0	; () banked
  7392  001A10  176C               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7393  001A12  0E00               	movlw	0
  7394  001A14  0100               	movlb	0	; () banked
  7395  001A16  176D               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7396                           
  7397                           ; BSR set to: 0
  7398  001A18  0E18               	movlw	24
  7399  001A1A  0100               	movlb	0	; () banked
  7400  001A1C  6F71               	movwf	___ftdiv@cntr& (0+255),b
  7401  001A1E  D000               	goto	l3672
  7402  001A20                     l3672:
  7403                           
  7404                           ; BSR set to: 0
  7405  001A20  0100               	movlb	0	; () banked
  7406  001A22  90D8               	bcf	status,0,c
  7407  001A24  3772               	rlcf	___ftdiv@f3& (0+255),f,b
  7408  001A26  3773               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7409  001A28  3774               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7410                           
  7411                           ; BSR set to: 0
  7412  001A2A  0100               	movlb	0	; () banked
  7413  001A2C  516B               	movf	___ftdiv@f2& (0+255),w,b
  7414  001A2E  0100               	movlb	0	; () banked
  7415  001A30  5D68               	subwf	___ftdiv@f1& (0+255),w,b
  7416  001A32  0100               	movlb	0	; () banked
  7417  001A34  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7418  001A36  0100               	movlb	0	; () banked
  7419  001A38  5969               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7420  001A3A  0100               	movlb	0	; () banked
  7421  001A3C  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7422  001A3E  0100               	movlb	0	; () banked
  7423  001A40  596A               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7424  001A42  A0D8               	btfss	status,0,c
  7425  001A44  D00E               	goto	l987
  7426                           
  7427                           ; BSR set to: 0
  7428  001A46  0100               	movlb	0	; () banked
  7429  001A48  516B               	movf	___ftdiv@f2& (0+255),w,b
  7430  001A4A  0100               	movlb	0	; () banked
  7431  001A4C  5F68               	subwf	___ftdiv@f1& (0+255),f,b
  7432  001A4E  0100               	movlb	0	; () banked
  7433  001A50  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7434  001A52  0100               	movlb	0	; () banked
  7435  001A54  5B69               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7436  001A56  0100               	movlb	0	; () banked
  7437  001A58  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7438  001A5A  0100               	movlb	0	; () banked
  7439  001A5C  5B6A               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7440                           
  7441                           ; BSR set to: 0
  7442  001A5E  0100               	movlb	0	; () banked
  7443  001A60  8172               	bsf	___ftdiv@f3& (0+255),0,b
  7444  001A62                     l987:
  7445                           
  7446                           ; BSR set to: 0
  7447  001A62  0100               	movlb	0	; () banked
  7448  001A64  90D8               	bcf	status,0,c
  7449  001A66  3768               	rlcf	___ftdiv@f1& (0+255),f,b
  7450  001A68  3769               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7451  001A6A  376A               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7452                           
  7453                           ; BSR set to: 0
  7454  001A6C  0100               	movlb	0	; () banked
  7455  001A6E  2F71               	decfsz	___ftdiv@cntr& (0+255),f,b
  7456  001A70  D7D7               	goto	l3672
  7457  001A72  D000               	goto	l3682
  7458  001A74                     l3682:
  7459                           
  7460                           ; BSR set to: 0
  7461  001A74  C072  F060         	movff	___ftdiv@f3,___ftpack@arg
  7462  001A78  C073  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7463  001A7C  C074  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7464  001A80  C075  F063         	movff	___ftdiv@exp,___ftpack@exp
  7465  001A84  C076  F064         	movff	___ftdiv@sign,___ftpack@sign
  7466  001A88  EC87  F00E         	call	___ftpack	;wreg free
  7467  001A8C  C060  F068         	movff	?___ftpack,?___ftdiv
  7468  001A90  C061  F069         	movff	?___ftpack+1,?___ftdiv+1
  7469  001A94  C062  F06A         	movff	?___ftpack+2,?___ftdiv+2
  7470  001A98  D000               	goto	l984
  7471  001A9A                     l984:
  7472  001A9A  0012               	return		;funcret
  7473  001A9C                     __end_of___ftdiv:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           intcon2	equ	0xFF1
  7483                           postinc0	equ	0xFEE
  7484                           wreg	equ	0xFE8
  7485                           indf2	equ	0xFDF
  7486                           postinc2	equ	0xFDE
  7487                           postdec2	equ	0xFDD
  7488                           fsr2h	equ	0xFDA
  7489                           fsr2l	equ	0xFD9
  7490                           status	equ	0xFD8
  7491                           
  7492 ;; *************** function ___awtoft *****************
  7493 ;; Defined at:
  7494 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  c               2    8[BANK0 ] int 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  sign            1   11[BANK0 ] unsigned char 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  3    8[BANK0 ] float 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;Total ram usage:        4 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    7
  7515 ;; This function calls:
  7516 ;;		___ftpack
  7517 ;; This function is called by:
  7518 ;;		_exp
  7519 ;;		_log
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text53
  7524  002AA6                     __ptext53:
  7525                           	opt stack 0
  7526  002AA6                     ___awtoft:
  7527                           	opt stack 20
  7528                           
  7529                           ;incstack = 0
  7530  002AA6  0E00               	movlw	0
  7531  002AA8  0100               	movlb	0	; () banked
  7532  002AAA  6F6B               	movwf	___awtoft@sign& (0+255),b
  7533                           
  7534                           ; BSR set to: 0
  7535  002AAC  0100               	movlb	0	; () banked
  7536  002AAE  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
  7537  002AB0  D009               	goto	l3702
  7538                           
  7539                           ; BSR set to: 0
  7540  002AB2  0100               	movlb	0	; () banked
  7541  002AB4  6D68               	negf	___awtoft@c& (0+255),b
  7542  002AB6  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
  7543  002AB8  B0D8               	btfsc	status,0,c
  7544  002ABA  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
  7545                           
  7546                           ; BSR set to: 0
  7547  002ABC  0E01               	movlw	1
  7548  002ABE  0100               	movlb	0	; () banked
  7549  002AC0  6F6B               	movwf	___awtoft@sign& (0+255),b
  7550  002AC2  D000               	goto	l3702
  7551  002AC4                     l3702:
  7552                           
  7553                           ; BSR set to: 0
  7554  002AC4  C068  F060         	movff	___awtoft@c,___ftpack@arg
  7555  002AC8  C069  F061         	movff	___awtoft@c+1,___ftpack@arg+1
  7556  002ACC  0100               	movlb	0	; () banked
  7557  002ACE  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  7558  002AD0  0E8E               	movlw	142
  7559  002AD2  0100               	movlb	0	; () banked
  7560  002AD4  6F63               	movwf	___ftpack@exp& (0+255),b
  7561  002AD6  C06B  F064         	movff	___awtoft@sign,___ftpack@sign
  7562  002ADA  EC87  F00E         	call	___ftpack	;wreg free
  7563  002ADE  C060  F068         	movff	?___ftpack,?___awtoft
  7564  002AE2  C061  F069         	movff	?___ftpack+1,?___awtoft+1
  7565  002AE6  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
  7566  002AEA  D000               	goto	l808
  7567  002AEC                     l808:
  7568  002AEC  0012               	return		;funcret
  7569  002AEE                     __end_of___awtoft:
  7570                           	opt stack 0
  7571                           tblptru	equ	0xFF8
  7572                           tblptrh	equ	0xFF7
  7573                           tblptrl	equ	0xFF6
  7574                           tablat	equ	0xFF5
  7575                           prodh	equ	0xFF4
  7576                           prodl	equ	0xFF3
  7577                           intcon	equ	0xFF2
  7578                           intcon2	equ	0xFF1
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function ___lltoft *****************
  7589 ;; Defined at:
  7590 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  c               4    8[BANK0 ] unsigned long 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  exp             1   16[BANK0 ] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;                  3    8[BANK0 ] float 
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;Total ram usage:        9 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    7
  7611 ;; This function calls:
  7612 ;;		___ftpack
  7613 ;; This function is called by:
  7614 ;;		_pow
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text54
  7619  002724                     __ptext54:
  7620                           	opt stack 0
  7621  002724                     ___lltoft:
  7622                           	opt stack 21
  7623                           
  7624                           ;incstack = 0
  7625  002724  0E8E               	movlw	142
  7626  002726  0100               	movlb	0	; () banked
  7627  002728  6F70               	movwf	___lltoft@exp& (0+255),b
  7628  00272A  D009               	goto	l3792
  7629  00272C                     l3790:
  7630                           
  7631                           ; BSR set to: 0
  7632  00272C  0100               	movlb	0	; () banked
  7633  00272E  90D8               	bcf	status,0,c
  7634  002730  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7635  002732  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7636  002734  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7637  002736  3368               	rrcf	___lltoft@c& (0+255),f,b
  7638  002738  0100               	movlb	0	; () banked
  7639  00273A  2B70               	incf	___lltoft@exp& (0+255),f,b
  7640  00273C  D000               	goto	l3792
  7641  00273E                     l3792:
  7642                           
  7643                           ; BSR set to: 0
  7644  00273E  0E00               	movlw	0
  7645  002740  0100               	movlb	0	; () banked
  7646  002742  1568               	andwf	___lltoft@c& (0+255),w,b
  7647  002744  0100               	movlb	0	; () banked
  7648  002746  6F6C               	movwf	??___lltoft& (0+255),b
  7649  002748  0E00               	movlw	0
  7650  00274A  0100               	movlb	0	; () banked
  7651  00274C  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  7652  00274E  0100               	movlb	0	; () banked
  7653  002750  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  7654  002752  0E00               	movlw	0
  7655  002754  0100               	movlb	0	; () banked
  7656  002756  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7657  002758  0100               	movlb	0	; () banked
  7658  00275A  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  7659  00275C  0EFF               	movlw	255
  7660  00275E  0100               	movlb	0	; () banked
  7661  002760  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7662  002762  0100               	movlb	0	; () banked
  7663  002764  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  7664  002766  0100               	movlb	0	; () banked
  7665  002768  516C               	movf	??___lltoft& (0+255),w,b
  7666  00276A  0100               	movlb	0	; () banked
  7667  00276C  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7668  00276E  0100               	movlb	0	; () banked
  7669  002770  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7670  002772  0100               	movlb	0	; () banked
  7671  002774  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7672  002776  A4D8               	btfss	status,2,c
  7673  002778  D7D9               	goto	l3790
  7674                           
  7675                           ; BSR set to: 0
  7676                           
  7677                           ; BSR set to: 0
  7678  00277A  C068  F060         	movff	___lltoft@c,___ftpack@arg
  7679  00277E  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  7680  002782  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  7681  002786  C070  F063         	movff	___lltoft@exp,___ftpack@exp
  7682  00278A  0E00               	movlw	0
  7683  00278C  0100               	movlb	0	; () banked
  7684  00278E  6F64               	movwf	___ftpack@sign& (0+255),b
  7685  002790  EC87  F00E         	call	___ftpack	;wreg free
  7686  002794  C060  F068         	movff	?___ftpack,?___lltoft
  7687  002798  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  7688  00279C  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  7689  0027A0  D000               	goto	l1089
  7690  0027A2                     l1089:
  7691  0027A2  0012               	return		;funcret
  7692  0027A4                     __end_of___lltoft:
  7693                           	opt stack 0
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           intcon2	equ	0xFF1
  7702                           postinc0	equ	0xFEE
  7703                           wreg	equ	0xFE8
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function ___lbtoft *****************
  7712 ;; Defined at:
  7713 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  c               1    wreg     unsigned char 
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  c               1   11[BANK0 ] unsigned char 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  3    8[BANK0 ] float 
  7720 ;; Registers used:
  7721 ;;		wreg, status,2, status,0, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7727 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;Total ram usage:        4 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    7
  7734 ;; This function calls:
  7735 ;;		___ftpack
  7736 ;; This function is called by:
  7737 ;;		_CalculateSensorSums
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           	psect	text55
  7742  002BDE                     __ptext55:
  7743                           	opt stack 0
  7744  002BDE                     ___lbtoft:
  7745                           	opt stack 22
  7746                           
  7747                           ;incstack = 0
  7748                           ;___lbtoft@c stored from wreg
  7749  002BDE  0100               	movlb	0	; () banked
  7750  002BE0  6F6B               	movwf	___lbtoft@c& (0+255),b
  7751                           
  7752                           ; BSR set to: 0
  7753  002BE2  0100               	movlb	0	; () banked
  7754  002BE4  516B               	movf	___lbtoft@c& (0+255),w,b
  7755  002BE6  0100               	movlb	0	; () banked
  7756  002BE8  6F60               	movwf	___ftpack@arg& (0+255),b
  7757  002BEA  6B61               	clrf	(___ftpack@arg+1)& (0+255),b
  7758  002BEC  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
  7759  002BEE  0E8E               	movlw	142
  7760  002BF0  0100               	movlb	0	; () banked
  7761  002BF2  6F63               	movwf	___ftpack@exp& (0+255),b
  7762  002BF4  0E00               	movlw	0
  7763  002BF6  0100               	movlb	0	; () banked
  7764  002BF8  6F64               	movwf	___ftpack@sign& (0+255),b
  7765  002BFA  EC87  F00E         	call	___ftpack	;wreg free
  7766  002BFE  C060  F068         	movff	?___ftpack,?___lbtoft
  7767  002C02  C061  F069         	movff	?___ftpack+1,?___lbtoft+1
  7768  002C06  C062  F06A         	movff	?___ftpack+2,?___lbtoft+2
  7769  002C0A  D000               	goto	l1056
  7770  002C0C                     l1056:
  7771  002C0C  0012               	return		;funcret
  7772  002C0E                     __end_of___lbtoft:
  7773                           	opt stack 0
  7774                           tblptru	equ	0xFF8
  7775                           tblptrh	equ	0xFF7
  7776                           tblptrl	equ	0xFF6
  7777                           tablat	equ	0xFF5
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           indf2	equ	0xFDF
  7785                           postinc2	equ	0xFDE
  7786                           postdec2	equ	0xFDD
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function ___ftpack *****************
  7792 ;; Defined at:
  7793 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  arg             3    0[BANK0 ] unsigned um
  7796 ;;  exp             1    3[BANK0 ] unsigned char 
  7797 ;;  sign            1    4[BANK0 ] unsigned char 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  3    0[BANK0 ] float 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7809 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;Total ram usage:        8 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    6
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		___altoft
  7820 ;;		___awtoft
  7821 ;;		___ftadd
  7822 ;;		___ftdiv
  7823 ;;		___ftmul
  7824 ;;		___lbtoft
  7825 ;;		___lltoft
  7826 ;;		___lwtoft
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text56
  7831  001D0E                     __ptext56:
  7832                           	opt stack 0
  7833  001D0E                     ___ftpack:
  7834                           	opt stack 19
  7835                           
  7836                           ;incstack = 0
  7837  001D0E  0100               	movlb	0	; () banked
  7838  001D10  5163               	movf	___ftpack@exp& (0+255),w,b
  7839  001D12  0100               	movlb	0	; () banked
  7840  001D14  B4D8               	btfsc	status,2,c
  7841  001D16  D008               	goto	l3428
  7842                           
  7843                           ; BSR set to: 0
  7844  001D18  0100               	movlb	0	; () banked
  7845  001D1A  5160               	movf	___ftpack@arg& (0+255),w,b
  7846  001D1C  0100               	movlb	0	; () banked
  7847  001D1E  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7848  001D20  0100               	movlb	0	; () banked
  7849  001D22  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7850  001D24  A4D8               	btfss	status,2,c
  7851  001D26  D013               	goto	l3434
  7852  001D28                     l3428:
  7853                           
  7854                           ; BSR set to: 0
  7855  001D28  0E00               	movlw	0
  7856  001D2A  0100               	movlb	0	; () banked
  7857  001D2C  6F60               	movwf	?___ftpack& (0+255),b
  7858  001D2E  0E00               	movlw	0
  7859  001D30  0100               	movlb	0	; () banked
  7860  001D32  6F61               	movwf	(?___ftpack+1)& (0+255),b
  7861  001D34  0E00               	movlw	0
  7862  001D36  0100               	movlb	0	; () banked
  7863  001D38  6F62               	movwf	(?___ftpack+2)& (0+255),b
  7864                           
  7865                           ; BSR set to: 0
  7866  001D3A  D078               	goto	l912
  7867                           
  7868                           ; BSR set to: 0
  7869  001D3C  D008               	goto	l3434
  7870  001D3E                     l3432:
  7871                           
  7872                           ; BSR set to: 0
  7873  001D3E  0100               	movlb	0	; () banked
  7874  001D40  2B63               	incf	___ftpack@exp& (0+255),f,b
  7875  001D42  0100               	movlb	0	; () banked
  7876  001D44  90D8               	bcf	status,0,c
  7877  001D46  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7878  001D48  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7879  001D4A  3360               	rrcf	___ftpack@arg& (0+255),f,b
  7880  001D4C  D000               	goto	l3434
  7881  001D4E                     l3434:
  7882                           
  7883                           ; BSR set to: 0
  7884  001D4E  0E00               	movlw	0
  7885  001D50  0100               	movlb	0	; () banked
  7886  001D52  1560               	andwf	___ftpack@arg& (0+255),w,b
  7887  001D54  0100               	movlb	0	; () banked
  7888  001D56  6F65               	movwf	??___ftpack& (0+255),b
  7889  001D58  0E00               	movlw	0
  7890  001D5A  0100               	movlb	0	; () banked
  7891  001D5C  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7892  001D5E  0100               	movlb	0	; () banked
  7893  001D60  6F66               	movwf	(??___ftpack+1)& (0+255),b
  7894  001D62  0EFE               	movlw	254
  7895  001D64  0100               	movlb	0	; () banked
  7896  001D66  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7897  001D68  0100               	movlb	0	; () banked
  7898  001D6A  6F67               	movwf	(??___ftpack+2)& (0+255),b
  7899  001D6C  0100               	movlb	0	; () banked
  7900  001D6E  5165               	movf	??___ftpack& (0+255),w,b
  7901  001D70  0100               	movlb	0	; () banked
  7902  001D72  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  7903  001D74  0100               	movlb	0	; () banked
  7904  001D76  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  7905  001D78  B4D8               	btfsc	status,2,c
  7906  001D7A  D013               	goto	l3440
  7907  001D7C  D7E0               	goto	l3432
  7908                           
  7909                           ; BSR set to: 0
  7910  001D7E  D011               	goto	l3440
  7911  001D80                     l3436:
  7912                           
  7913                           ; BSR set to: 0
  7914  001D80  0100               	movlb	0	; () banked
  7915  001D82  2B63               	incf	___ftpack@exp& (0+255),f,b
  7916                           
  7917                           ; BSR set to: 0
  7918  001D84  0E01               	movlw	1
  7919  001D86  0100               	movlb	0	; () banked
  7920  001D88  2760               	addwf	___ftpack@arg& (0+255),f,b
  7921  001D8A  0E00               	movlw	0
  7922  001D8C  0100               	movlb	0	; () banked
  7923  001D8E  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7924  001D90  0E00               	movlw	0
  7925  001D92  0100               	movlb	0	; () banked
  7926  001D94  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7927  001D96  0100               	movlb	0	; () banked
  7928  001D98  90D8               	bcf	status,0,c
  7929  001D9A  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7930  001D9C  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7931  001D9E  3360               	rrcf	___ftpack@arg& (0+255),f,b
  7932  001DA0  D000               	goto	l3440
  7933  001DA2                     l3440:
  7934                           
  7935                           ; BSR set to: 0
  7936  001DA2  0E00               	movlw	0
  7937  001DA4  0100               	movlb	0	; () banked
  7938  001DA6  1560               	andwf	___ftpack@arg& (0+255),w,b
  7939  001DA8  0100               	movlb	0	; () banked
  7940  001DAA  6F65               	movwf	??___ftpack& (0+255),b
  7941  001DAC  0E00               	movlw	0
  7942  001DAE  0100               	movlb	0	; () banked
  7943  001DB0  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7944  001DB2  0100               	movlb	0	; () banked
  7945  001DB4  6F66               	movwf	(??___ftpack+1)& (0+255),b
  7946  001DB6  0EFF               	movlw	255
  7947  001DB8  0100               	movlb	0	; () banked
  7948  001DBA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7949  001DBC  0100               	movlb	0	; () banked
  7950  001DBE  6F67               	movwf	(??___ftpack+2)& (0+255),b
  7951  001DC0  0100               	movlb	0	; () banked
  7952  001DC2  5165               	movf	??___ftpack& (0+255),w,b
  7953  001DC4  0100               	movlb	0	; () banked
  7954  001DC6  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  7955  001DC8  0100               	movlb	0	; () banked
  7956  001DCA  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  7957  001DCC  B4D8               	btfsc	status,2,c
  7958  001DCE  D00A               	goto	l3444
  7959  001DD0  D7D7               	goto	l3436
  7960                           
  7961                           ; BSR set to: 0
  7962  001DD2  D008               	goto	l3444
  7963  001DD4                     l3442:
  7964                           
  7965                           ; BSR set to: 0
  7966  001DD4  0100               	movlb	0	; () banked
  7967  001DD6  0763               	decf	___ftpack@exp& (0+255),f,b
  7968  001DD8  0100               	movlb	0	; () banked
  7969  001DDA  90D8               	bcf	status,0,c
  7970  001DDC  3760               	rlcf	___ftpack@arg& (0+255),f,b
  7971  001DDE  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7972  001DE0  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7973  001DE2  D000               	goto	l3444
  7974  001DE4                     l3444:
  7975                           
  7976                           ; BSR set to: 0
  7977  001DE4  0100               	movlb	0	; () banked
  7978  001DE6  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7979  001DE8  D005               	goto	l923
  7980                           
  7981                           ; BSR set to: 0
  7982  001DEA  0E02               	movlw	2
  7983  001DEC  0100               	movlb	0	; () banked
  7984  001DEE  6163               	cpfslt	___ftpack@exp& (0+255),b
  7985  001DF0  D7F1               	goto	l3442
  7986  001DF2  D000               	goto	l923
  7987  001DF4                     l923:
  7988                           
  7989                           ; BSR set to: 0
  7990  001DF4  0100               	movlb	0	; () banked
  7991  001DF6  B163               	btfsc	___ftpack@exp& (0+255),0,b
  7992  001DF8  D003               	goto	l3450
  7993                           
  7994                           ; BSR set to: 0
  7995  001DFA  0100               	movlb	0	; () banked
  7996  001DFC  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7997  001DFE  D000               	goto	l3450
  7998  001E00                     l3450:
  7999                           
  8000                           ; BSR set to: 0
  8001  001E00  0100               	movlb	0	; () banked
  8002  001E02  90D8               	bcf	status,0,c
  8003  001E04  3363               	rrcf	___ftpack@exp& (0+255),f,b
  8004  001E06  0100               	movlb	0	; () banked
  8005  001E08  5163               	movf	___ftpack@exp& (0+255),w,b
  8006  001E0A  0100               	movlb	0	; () banked
  8007  001E0C  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8008                           
  8009                           ; BSR set to: 0
  8010  001E0E  0100               	movlb	0	; () banked
  8011  001E10  5164               	movf	___ftpack@sign& (0+255),w,b
  8012  001E12  0100               	movlb	0	; () banked
  8013  001E14  B4D8               	btfsc	status,2,c
  8014  001E16  D003               	goto	l3456
  8015                           
  8016                           ; BSR set to: 0
  8017  001E18  0100               	movlb	0	; () banked
  8018  001E1A  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8019  001E1C  D000               	goto	l3456
  8020  001E1E                     l3456:
  8021                           
  8022                           ; BSR set to: 0
  8023  001E1E  C060  F060         	movff	___ftpack@arg,?___ftpack
  8024  001E22  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  8025  001E26  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  8026  001E2A  D000               	goto	l912
  8027  001E2C                     l912:
  8028                           
  8029                           ; BSR set to: 0
  8030  001E2C  0012               	return		;funcret
  8031  001E2E                     __end_of___ftpack:
  8032                           	opt stack 0
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           prodh	equ	0xFF4
  8038                           prodl	equ	0xFF3
  8039                           intcon	equ	0xFF2
  8040                           intcon2	equ	0xFF1
  8041                           postinc0	equ	0xFEE
  8042                           wreg	equ	0xFE8
  8043                           indf2	equ	0xFDF
  8044                           postinc2	equ	0xFDE
  8045                           postdec2	equ	0xFDD
  8046                           fsr2h	equ	0xFDA
  8047                           fsr2l	equ	0xFD9
  8048                           status	equ	0xFD8
  8049                           
  8050 ;; *************** function _CalculateSensorStatuses *****************
  8051 ;; Defined at:
  8052 ;;		line 399 in file "FastBuggy17_Main_Code.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;		None
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  index           1    3[BANK0 ] unsigned char 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;		None               void
  8059 ;; Registers used:
  8060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8070 ;;Total ram usage:        4 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    6
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_main
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           	psect	text57
  8081  00297C                     __ptext57:
  8082                           	opt stack 0
  8083  00297C                     _CalculateSensorStatuses:
  8084                           	opt stack 24
  8085                           
  8086                           ;FastBuggy17_Main_Code.c: 400: unsigned char index;
  8087                           ;FastBuggy17_Main_Code.c: 415: for(index = 0; index < 5; index++) {
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;incstack = 0
  8091  00297C  0E00               	movlw	0
  8092  00297E  0100               	movlb	0	; () banked
  8093  002980  6F63               	movwf	CalculateSensorStatuses@index& (0+255),b
  8094  002982                     l4086:
  8095                           
  8096                           ; BSR set to: 0
  8097  002982  0E04               	movlw	4
  8098  002984  0100               	movlb	0	; () banked
  8099  002986  6563               	cpfsgt	CalculateSensorStatuses@index& (0+255),b
  8100  002988  D001               	goto	l4090
  8101                           
  8102                           ; BSR set to: 0
  8103  00298A  D02F               	goto	l271
  8104  00298C                     l4090:
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;FastBuggy17_Main_Code.c: 417: if(sensor_readings_normalised[index] < sensor_threshold) 
      +                          {
  8108  00298C  0100               	movlb	0	; () banked
  8109  00298E  5163               	movf	CalculateSensorStatuses@index& (0+255),w,b
  8110  002990  0D02               	mullw	2
  8111  002992  0ECB               	movlw	low _sensor_readings_normalised
  8112  002994  24F3               	addwf	prodl,w,c
  8113  002996  6ED9               	movwf	fsr2l,c
  8114  002998  0E00               	movlw	high _sensor_readings_normalised
  8115  00299A  20F4               	addwfc	prodh,w,c
  8116  00299C  6EDA               	movwf	fsr2h,c
  8117  00299E  5035               	movf	_sensor_threshold,w,c
  8118  0029A0  5CDE               	subwf	postinc2,w,c
  8119  0029A2  50DE               	movf	postinc2,w,c
  8120  0029A4  0A80               	xorlw	128
  8121  0029A6  0100               	movlb	0	; () banked
  8122  0029A8  6F62               	movwf	(??_CalculateSensorStatuses+2)& (0+255),b
  8123  0029AA  5036               	movf	_sensor_threshold+1,w,c
  8124  0029AC  0A80               	xorlw	128
  8125  0029AE  0100               	movlb	0	; () banked
  8126  0029B0  5962               	subwfb	(??_CalculateSensorStatuses+2)& (0+255),w,b
  8127  0029B2  B0D8               	btfsc	status,0,c
  8128  0029B4  D00B               	goto	l4094
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;FastBuggy17_Main_Code.c: 418: sensor_status[index] = 1;
  8132  0029B6  0100               	movlb	0	; () banked
  8133  0029B8  5163               	movf	CalculateSensorStatuses@index& (0+255),w,b
  8134  0029BA  0D01               	mullw	1
  8135  0029BC  0E2E               	movlw	low _sensor_status
  8136  0029BE  24F3               	addwf	prodl,w,c
  8137  0029C0  6ED9               	movwf	fsr2l,c
  8138  0029C2  0E00               	movlw	high _sensor_status
  8139  0029C4  20F4               	addwfc	prodh,w,c
  8140  0029C6  6EDA               	movwf	fsr2h,c
  8141  0029C8  0E01               	movlw	1
  8142  0029CA  D00A               	goto	L11
  8143  0029CC                     l4094:
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;FastBuggy17_Main_Code.c: 420: else {
  8147                           ;FastBuggy17_Main_Code.c: 421: sensor_status[index] = 0;
  8148  0029CC  0100               	movlb	0	; () banked
  8149  0029CE  5163               	movf	CalculateSensorStatuses@index& (0+255),w,b
  8150  0029D0  0D01               	mullw	1
  8151  0029D2  0E2E               	movlw	low _sensor_status
  8152  0029D4  24F3               	addwf	prodl,w,c
  8153  0029D6  6ED9               	movwf	fsr2l,c
  8154  0029D8  0E00               	movlw	high _sensor_status
  8155  0029DA  20F4               	addwfc	prodh,w,c
  8156  0029DC  6EDA               	movwf	fsr2h,c
  8157  0029DE  0E00               	movlw	0
  8158  0029E0                     L11:
  8159  0029E0  6EDF               	movwf	indf2,c
  8160  0029E2  D000               	goto	l4096
  8161  0029E4                     l4096:
  8162                           
  8163                           ; BSR set to: 0
  8164  0029E4  0100               	movlb	0	; () banked
  8165  0029E6  2B63               	incf	CalculateSensorStatuses@index& (0+255),f,b
  8166  0029E8  D7CC               	goto	l4086
  8167  0029EA                     l271:
  8168                           
  8169                           ; BSR set to: 0
  8170  0029EA  0012               	return		;funcret
  8171  0029EC                     __end_of_CalculateSensorStatuses:
  8172                           	opt stack 0
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           intcon2	equ	0xFF1
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _CalculateSensorError *****************
  8191 ;; Defined at:
  8192 ;;		line 444 in file "FastBuggy17_Main_Code.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  sum             1    wreg     unsigned char 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  sum             1    2[BANK0 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  2    0[BANK0 ] int 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        3 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    6
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_main
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text58
  8221  0023DC                     __ptext58:
  8222                           	opt stack 0
  8223  0023DC                     _CalculateSensorError:
  8224                           	opt stack 24
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;incstack = 0
  8228                           ;CalculateSensorError@sum stored from wreg
  8229  0023DC  0100               	movlb	0	; () banked
  8230  0023DE  6F62               	movwf	CalculateSensorError@sum& (0+255),b
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;FastBuggy17_Main_Code.c: 446: switch(sum) {
  8234  0023E0  D031               	goto	l4154
  8235  0023E2                     l4120:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;FastBuggy17_Main_Code.c: 448: return(16);
  8239  0023E2  0E00               	movlw	0
  8240  0023E4  0100               	movlb	0	; () banked
  8241  0023E6  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8242  0023E8  0E10               	movlw	16
  8243  0023EA  D04E               	goto	L19
  8244                           
  8245                           ; BSR set to: 0
  8246  0023EC  D04F               	goto	l281
  8247  0023EE                     l4124:
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;FastBuggy17_Main_Code.c: 450: return(9);
  8251  0023EE  0E00               	movlw	0
  8252  0023F0  0100               	movlb	0	; () banked
  8253  0023F2  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8254  0023F4  0E09               	movlw	9
  8255  0023F6  D048               	goto	L19
  8256                           
  8257                           ; BSR set to: 0
  8258  0023F8  D049               	goto	l281
  8259  0023FA                     l4128:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;FastBuggy17_Main_Code.c: 452: return(4);
  8263  0023FA  0E00               	movlw	0
  8264  0023FC  0100               	movlb	0	; () banked
  8265  0023FE  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8266  002400  0E04               	movlw	4
  8267  002402  D042               	goto	L19
  8268                           
  8269                           ; BSR set to: 0
  8270  002404  D043               	goto	l281
  8271  002406                     l4132:
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;FastBuggy17_Main_Code.c: 454: return(1);
  8275  002406  0E00               	movlw	0
  8276  002408  0100               	movlb	0	; () banked
  8277  00240A  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8278  00240C  0E01               	movlw	1
  8279  00240E  D03C               	goto	L19
  8280                           
  8281                           ; BSR set to: 0
  8282  002410  D03D               	goto	l281
  8283                           
  8284                           ; BSR set to: 0
  8285                           
  8286                           ;FastBuggy17_Main_Code.c: 455: case(4) :
  8287  002412  D036               	goto	l4156
  8288                           
  8289                           ; BSR set to: 0
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;FastBuggy17_Main_Code.c: 456: return(0);
  8293  002414  D03B               	goto	l281
  8294  002416                     l286:
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;FastBuggy17_Main_Code.c: 458: return(-1);
  8298  002416  0100               	movlb	0	; () banked
  8299  002418  6960               	setf	?_CalculateSensorError& (0+255),b
  8300  00241A  6961               	setf	(?_CalculateSensorError+1)& (0+255),b
  8301  00241C  D037               	goto	l281
  8302  00241E                     l4140:
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;FastBuggy17_Main_Code.c: 460: return(-4);
  8306  00241E  0EFF               	movlw	255
  8307  002420  0100               	movlb	0	; () banked
  8308  002422  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8309  002424  0EFC               	movlw	252
  8310  002426  D030               	goto	L19
  8311                           
  8312                           ; BSR set to: 0
  8313  002428  D031               	goto	l281
  8314  00242A                     l4144:
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;FastBuggy17_Main_Code.c: 462: return(-9);
  8318  00242A  0EFF               	movlw	255
  8319  00242C  0100               	movlb	0	; () banked
  8320  00242E  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8321  002430  0EF7               	movlw	247
  8322  002432  D02A               	goto	L19
  8323                           
  8324                           ; BSR set to: 0
  8325  002434  D02B               	goto	l281
  8326  002436                     l4148:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;FastBuggy17_Main_Code.c: 464: return(-16);
  8330  002436  0EFF               	movlw	255
  8331  002438  0100               	movlb	0	; () banked
  8332  00243A  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8333  00243C  0EF0               	movlw	240
  8334  00243E  D024               	goto	L19
  8335                           
  8336                           ; BSR set to: 0
  8337  002440  D025               	goto	l281
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;FastBuggy17_Main_Code.c: 467: }
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;FastBuggy17_Main_Code.c: 466: break;
  8344                           
  8345                           ;FastBuggy17_Main_Code.c: 465: default :
  8346  002442  D01E               	goto	l4156
  8347  002444                     l4154:
  8348                           
  8349                           ; BSR set to: 0
  8350  002444  0100               	movlb	0	; () banked
  8351  002446  5162               	movf	CalculateSensorError@sum& (0+255),w,b
  8352                           
  8353                           ; Switch size 1, requested type "space"
  8354                           ; Number of cases is 9, Range of values is 1 to 24
  8355                           ; switch strategies available:
  8356                           ; Name         Instructions Cycles
  8357                           ; simple_byte           28    15 (average)
  8358                           ;	Chosen strategy is simple_byte
  8359  002448  0A01               	xorlw	1	; case 1
  8360  00244A  B4D8               	btfsc	status,2,c
  8361  00244C  D7F4               	goto	l4148
  8362  00244E  0A03               	xorlw	3	; case 2
  8363  002450  B4D8               	btfsc	status,2,c
  8364  002452  D7E5               	goto	l4140
  8365  002454  0A01               	xorlw	1	; case 3
  8366  002456  B4D8               	btfsc	status,2,c
  8367  002458  D7E8               	goto	l4144
  8368  00245A  0A07               	xorlw	7	; case 4
  8369  00245C  B4D8               	btfsc	status,2,c
  8370  00245E  D010               	goto	l4156
  8371  002460  0A02               	xorlw	2	; case 6
  8372  002462  B4D8               	btfsc	status,2,c
  8373  002464  D7D8               	goto	l286
  8374  002466  0A0E               	xorlw	14	; case 8
  8375  002468  B4D8               	btfsc	status,2,c
  8376  00246A  D7C7               	goto	l4128
  8377  00246C  0A04               	xorlw	4	; case 12
  8378  00246E  B4D8               	btfsc	status,2,c
  8379  002470  D7CA               	goto	l4132
  8380  002472  0A1C               	xorlw	28	; case 16
  8381  002474  B4D8               	btfsc	status,2,c
  8382  002476  D7B5               	goto	l4120
  8383  002478  0A08               	xorlw	8	; case 24
  8384  00247A  B4D8               	btfsc	status,2,c
  8385  00247C  D7B8               	goto	l4124
  8386  00247E  D000               	goto	l4156
  8387  002480                     l4156:
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;FastBuggy17_Main_Code.c: 469: return(0);
  8391  002480  0E00               	movlw	0
  8392  002482  0100               	movlb	0	; () banked
  8393  002484  6F61               	movwf	(?_CalculateSensorError+1)& (0+255),b
  8394  002486  0E00               	movlw	0
  8395  002488                     L19:
  8396  002488  6F60               	movwf	?_CalculateSensorError& (0+255),b
  8397  00248A  D000               	goto	l281
  8398  00248C                     l281:
  8399                           
  8400                           ; BSR set to: 0
  8401  00248C  0012               	return		;funcret
  8402  00248E                     __end_of_CalculateSensorError:
  8403                           	opt stack 0
  8404                           tblptru	equ	0xFF8
  8405                           tblptrh	equ	0xFF7
  8406                           tblptrl	equ	0xFF6
  8407                           tablat	equ	0xFF5
  8408                           prodh	equ	0xFF4
  8409                           prodl	equ	0xFF3
  8410                           intcon	equ	0xFF2
  8411                           intcon2	equ	0xFF1
  8412                           postinc0	equ	0xFEE
  8413                           wreg	equ	0xFE8
  8414                           indf2	equ	0xFDF
  8415                           postinc2	equ	0xFDE
  8416                           postdec2	equ	0xFDD
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _isrLP *****************
  8422 ;; Defined at:
  8423 ;;		line 522 in file "FastBuggy17_Main_Code.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;		None               void
  8430 ;; Registers used:
  8431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:       17 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    5
  8444 ;; This function calls:
  8445 ;;		i1_ConvertADC
  8446 ;;		i1_ReadADC
  8447 ;;		i1_SetADCChannel
  8448 ;; This function is called by:
  8449 ;;		Interrupt level 1
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           	psect	intcodelo
  8454  000018                     __pintcodelo:
  8455                           	opt stack 0
  8456  000018                     _isrLP:
  8457                           	opt stack 19
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;incstack = 0
  8461  000018  CFD8 F005          	movff	status,??_isrLP
  8462  00001C  CFE8 F006          	movff	wreg,??_isrLP+1
  8463  000020  CFE0 F007          	movff	bsr,??_isrLP+2
  8464  000024  CFFA F008          	movff	pclath,??_isrLP+3
  8465  000028  CFFB F009          	movff	pclatu,??_isrLP+4
  8466  00002C  CFE9 F00A          	movff	fsr0l,??_isrLP+5
  8467  000030  CFEA F00B          	movff	fsr0h,??_isrLP+6
  8468  000034  CFE1 F00C          	movff	fsr1l,??_isrLP+7
  8469  000038  CFE2 F00D          	movff	fsr1h,??_isrLP+8
  8470  00003C  CFD9 F00E          	movff	fsr2l,??_isrLP+9
  8471  000040  CFDA F00F          	movff	fsr2h,??_isrLP+10
  8472  000044  CFF3 F010          	movff	prodl,??_isrLP+11
  8473  000048  CFF4 F011          	movff	prodh,??_isrLP+12
  8474  00004C  CFF6 F012          	movff	tblptrl,??_isrLP+13
  8475  000050  CFF7 F013          	movff	tblptrh,??_isrLP+14
  8476  000054  CFF8 F014          	movff	tblptru,??_isrLP+15
  8477  000058  CFF5 F015          	movff	tablat,??_isrLP+16
  8478                           
  8479                           ;FastBuggy17_Main_Code.c: 537: if (PIR1bits.ADIF == 1) {
  8480  00005C  AC9E               	btfss	3998,6,c	;volatile
  8481  00005E  D01D               	goto	i1l310
  8482                           
  8483                           ;FastBuggy17_Main_Code.c: 538: PIR1bits.ADIF = 0;
  8484  000060  9C9E               	bcf	3998,6,c	;volatile
  8485                           
  8486                           ;FastBuggy17_Main_Code.c: 539: if (sensor_acq_index < 5) {
  8487  000062  0E05               	movlw	5
  8488  000064  603A               	cpfslt	_sensor_acq_index,c	;volatile
  8489  000066  D015               	goto	i1l3330
  8490                           
  8491                           ;FastBuggy17_Main_Code.c: 540: *(sensor_readings_ptr + sensor_acq_index) = ReadADC();
  8492  000068  EC0D  F017         	call	i1_ReadADC	;wreg free
  8493  00006C  503A               	movf	_sensor_acq_index,w,c	;volatile
  8494  00006E  0D02               	mullw	2
  8495  000070  50F3               	movf	prodl,w,c
  8496  000072  2446               	addwf	_sensor_readings_ptr,w,c
  8497  000074  6ED9               	movwf	fsr2l,c
  8498  000076  50F4               	movf	prodh,w,c
  8499  000078  2047               	addwfc	_sensor_readings_ptr+1,w,c
  8500  00007A  6EDA               	movwf	fsr2h,c
  8501  00007C  C001  FFDE         	movff	?i1_ReadADC,postinc2
  8502  000080  C002  FFDD         	movff	?i1_ReadADC+1,postdec2
  8503                           
  8504                           ;FastBuggy17_Main_Code.c: 541: sensor_acq_index++;
  8505  000084  2A3A               	incf	_sensor_acq_index,f,c	;volatile
  8506                           
  8507                           ;FastBuggy17_Main_Code.c: 542: SetADCChannel(sensor_acq_index);
  8508  000086  503A               	movf	_sensor_acq_index,w,c	;volatile
  8509  000088  EC12  F011         	call	i1_SetADCChannel
  8510                           
  8511                           ;FastBuggy17_Main_Code.c: 543: ConvertADC();
  8512  00008C  EC47  F017         	call	i1_ConvertADC	;wreg free
  8513                           
  8514                           ;FastBuggy17_Main_Code.c: 544: } else {
  8515  000090  D004               	goto	i1l310
  8516  000092                     i1l3330:
  8517                           
  8518                           ;FastBuggy17_Main_Code.c: 545: sensor_acq_done = 1;
  8519  000092  0E01               	movlw	1
  8520  000094  6E39               	movwf	_sensor_acq_done,c	;volatile
  8521                           
  8522                           ;FastBuggy17_Main_Code.c: 546: PIE1bits.ADIE = 0;
  8523  000096  9C9D               	bcf	3997,6,c	;volatile
  8524  000098  D000               	goto	i1l310
  8525  00009A                     i1l310:
  8526  00009A  C015  FFF5         	movff	??_isrLP+16,tablat
  8527  00009E  C014  FFF8         	movff	??_isrLP+15,tblptru
  8528  0000A2  C013  FFF7         	movff	??_isrLP+14,tblptrh
  8529  0000A6  C012  FFF6         	movff	??_isrLP+13,tblptrl
  8530  0000AA  C011  FFF4         	movff	??_isrLP+12,prodh
  8531  0000AE  C010  FFF3         	movff	??_isrLP+11,prodl
  8532  0000B2  C00F  FFDA         	movff	??_isrLP+10,fsr2h
  8533  0000B6  C00E  FFD9         	movff	??_isrLP+9,fsr2l
  8534  0000BA  C00D  FFE2         	movff	??_isrLP+8,fsr1h
  8535  0000BE  C00C  FFE1         	movff	??_isrLP+7,fsr1l
  8536  0000C2  C00B  FFEA         	movff	??_isrLP+6,fsr0h
  8537  0000C6  C00A  FFE9         	movff	??_isrLP+5,fsr0l
  8538  0000CA  C009  FFFB         	movff	??_isrLP+4,pclatu
  8539  0000CE  C008  FFFA         	movff	??_isrLP+3,pclath
  8540  0000D2  C007  FFE0         	movff	??_isrLP+2,bsr
  8541  0000D6  C006  FFE8         	movff	??_isrLP+1,wreg
  8542  0000DA  C005  FFD8         	movff	??_isrLP,status
  8543  0000DE  0010               	retfie	
  8544  0000E0                     __end_of_isrLP:
  8545                           	opt stack 0
  8546                           pclatu	equ	0xFFB
  8547                           pclath	equ	0xFFA
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           intcon	equ	0xFF2
  8555                           intcon2	equ	0xFF1
  8556                           postinc0	equ	0xFEE
  8557                           fsr0h	equ	0xFEA
  8558                           fsr0l	equ	0xFE9
  8559                           wreg	equ	0xFE8
  8560                           fsr1h	equ	0xFE2
  8561                           fsr1l	equ	0xFE1
  8562                           bsr	equ	0xFE0
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function i1_SetADCChannel *****************
  8571 ;; Defined at:
  8572 ;;		line 258 in file "FastBuggy17_Main_Code.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  channel         1    wreg     unsigned char 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  channel         1    2[COMRAM] unsigned char 
  8577 ;; Return value:  Size  Location     Type
  8578 ;;		None               void
  8579 ;; Registers used:
  8580 ;;		wreg, status,2, status,0, cstack
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;Total ram usage:        1 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    4
  8593 ;; This function calls:
  8594 ;;		i1_SetChanADC
  8595 ;; This function is called by:
  8596 ;;		_isrLP
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text60
  8601  002224                     __ptext60:
  8602                           	opt stack 0
  8603  002224                     i1_SetADCChannel:
  8604                           	opt stack 19
  8605                           
  8606                           ;incstack = 0
  8607                           ;i1SetADCChannel@channel stored from wreg
  8608  002224  6E03               	movwf	i1SetADCChannel@channel,c
  8609                           
  8610                           ;FastBuggy17_Main_Code.c: 260: switch (channel) {
  8611  002226  D040               	goto	i1l3294
  8612  002228                     i1l3260:
  8613                           
  8614                           ;FastBuggy17_Main_Code.c: 262: SetChanADC(0b10000111);
  8615  002228  0E87               	movlw	135
  8616  00222A  ECC1  F016         	call	i1_SetChanADC
  8617                           
  8618                           ;FastBuggy17_Main_Code.c: 263: break;
  8619  00222E  D06E               	goto	i1l233
  8620  002230                     i1l3262:
  8621                           
  8622                           ;FastBuggy17_Main_Code.c: 265: SetChanADC(0b10001111);
  8623  002230  0E8F               	movlw	143
  8624  002232  ECC1  F016         	call	i1_SetChanADC
  8625                           
  8626                           ;FastBuggy17_Main_Code.c: 266: break;
  8627  002236  D06A               	goto	i1l233
  8628  002238                     i1l3264:
  8629                           
  8630                           ;FastBuggy17_Main_Code.c: 268: SetChanADC(0b10010111);
  8631  002238  0E97               	movlw	151
  8632  00223A  ECC1  F016         	call	i1_SetChanADC
  8633                           
  8634                           ;FastBuggy17_Main_Code.c: 269: break;
  8635  00223E  D066               	goto	i1l233
  8636  002240                     i1l3266:
  8637                           
  8638                           ;FastBuggy17_Main_Code.c: 271: SetChanADC(0b10011111);
  8639  002240  0E9F               	movlw	159
  8640  002242  ECC1  F016         	call	i1_SetChanADC
  8641                           
  8642                           ;FastBuggy17_Main_Code.c: 272: break;
  8643  002246  D062               	goto	i1l233
  8644  002248                     i1l3268:
  8645                           
  8646                           ;FastBuggy17_Main_Code.c: 274: SetChanADC(0b10100111);
  8647  002248  0EA7               	movlw	167
  8648  00224A  ECC1  F016         	call	i1_SetChanADC
  8649                           
  8650                           ;FastBuggy17_Main_Code.c: 275: break;
  8651  00224E  D05E               	goto	i1l233
  8652  002250                     i1l3270:
  8653                           
  8654                           ;FastBuggy17_Main_Code.c: 277: SetChanADC(0b10101111);
  8655  002250  0EAF               	movlw	175
  8656  002252  ECC1  F016         	call	i1_SetChanADC
  8657                           
  8658                           ;FastBuggy17_Main_Code.c: 278: break;
  8659  002256  D05A               	goto	i1l233
  8660  002258                     i1l3272:
  8661                           
  8662                           ;FastBuggy17_Main_Code.c: 280: SetChanADC(0b10110111);
  8663  002258  0EB7               	movlw	183
  8664  00225A  ECC1  F016         	call	i1_SetChanADC
  8665                           
  8666                           ;FastBuggy17_Main_Code.c: 281: break;
  8667  00225E  D056               	goto	i1l233
  8668  002260                     i1l3274:
  8669                           
  8670                           ;FastBuggy17_Main_Code.c: 283: SetChanADC(0b10111111);
  8671  002260  0EBF               	movlw	191
  8672  002262  ECC1  F016         	call	i1_SetChanADC
  8673                           
  8674                           ;FastBuggy17_Main_Code.c: 284: break;
  8675  002266  D052               	goto	i1l233
  8676  002268                     i1l3276:
  8677                           
  8678                           ;FastBuggy17_Main_Code.c: 286: SetChanADC(0b11000111);
  8679  002268  0EC7               	movlw	199
  8680  00226A  ECC1  F016         	call	i1_SetChanADC
  8681                           
  8682                           ;FastBuggy17_Main_Code.c: 287: break;
  8683  00226E  D04E               	goto	i1l233
  8684  002270                     i1l3278:
  8685                           
  8686                           ;FastBuggy17_Main_Code.c: 289: SetChanADC(0b11001111);
  8687  002270  0ECF               	movlw	207
  8688  002272  ECC1  F016         	call	i1_SetChanADC
  8689                           
  8690                           ;FastBuggy17_Main_Code.c: 290: break;
  8691  002276  D04A               	goto	i1l233
  8692  002278                     i1l3280:
  8693                           
  8694                           ;FastBuggy17_Main_Code.c: 292: SetChanADC(0b11010111);
  8695  002278  0ED7               	movlw	215
  8696  00227A  ECC1  F016         	call	i1_SetChanADC
  8697                           
  8698                           ;FastBuggy17_Main_Code.c: 293: break;
  8699  00227E  D046               	goto	i1l233
  8700  002280                     i1l3282:
  8701                           
  8702                           ;FastBuggy17_Main_Code.c: 295: SetChanADC(0b11011111);
  8703  002280  0EDF               	movlw	223
  8704  002282  ECC1  F016         	call	i1_SetChanADC
  8705                           
  8706                           ;FastBuggy17_Main_Code.c: 296: break;
  8707  002286  D042               	goto	i1l233
  8708  002288                     i1l3284:
  8709                           
  8710                           ;FastBuggy17_Main_Code.c: 298: SetChanADC(0b11100111);
  8711  002288  0EE7               	movlw	231
  8712  00228A  ECC1  F016         	call	i1_SetChanADC
  8713                           
  8714                           ;FastBuggy17_Main_Code.c: 299: break;
  8715  00228E  D03E               	goto	i1l233
  8716  002290                     i1l3286:
  8717                           
  8718                           ;FastBuggy17_Main_Code.c: 301: SetChanADC(0b11101111);
  8719  002290  0EEF               	movlw	239
  8720  002292  ECC1  F016         	call	i1_SetChanADC
  8721                           
  8722                           ;FastBuggy17_Main_Code.c: 302: break;
  8723  002296  D03A               	goto	i1l233
  8724  002298                     i1l3288:
  8725                           
  8726                           ;FastBuggy17_Main_Code.c: 304: SetChanADC(0b11110111);
  8727  002298  0EF7               	movlw	247
  8728  00229A  ECC1  F016         	call	i1_SetChanADC
  8729                           
  8730                           ;FastBuggy17_Main_Code.c: 305: break;
  8731  00229E  D036               	goto	i1l233
  8732  0022A0                     i1l3290:
  8733                           
  8734                           ;FastBuggy17_Main_Code.c: 307: SetChanADC(0b11111111);
  8735  0022A0  0EFF               	movlw	255
  8736  0022A2  ECC1  F016         	call	i1_SetChanADC
  8737                           
  8738                           ;FastBuggy17_Main_Code.c: 311: }
  8739                           
  8740                           ;FastBuggy17_Main_Code.c: 310: break;
  8741                           
  8742                           ;FastBuggy17_Main_Code.c: 309: default:
  8743                           
  8744                           ;FastBuggy17_Main_Code.c: 308: break;
  8745  0022A6  D032               	goto	i1l233
  8746  0022A8                     i1l3294:
  8747  0022A8  5003               	movf	i1SetADCChannel@channel,w,c
  8748                           
  8749                           ; Switch size 1, requested type "space"
  8750                           ; Number of cases is 16, Range of values is 0 to 15
  8751                           ; switch strategies available:
  8752                           ; Name         Instructions Cycles
  8753                           ; simple_byte           49    25 (average)
  8754                           ;	Chosen strategy is simple_byte
  8755  0022AA  0A00               	xorlw	0	; case 0
  8756  0022AC  B4D8               	btfsc	status,2,c
  8757  0022AE  D7BC               	goto	i1l3260
  8758  0022B0  0A01               	xorlw	1	; case 1
  8759  0022B2  B4D8               	btfsc	status,2,c
  8760  0022B4  D7BD               	goto	i1l3262
  8761  0022B6  0A03               	xorlw	3	; case 2
  8762  0022B8  B4D8               	btfsc	status,2,c
  8763  0022BA  D7BE               	goto	i1l3264
  8764  0022BC  0A01               	xorlw	1	; case 3
  8765  0022BE  B4D8               	btfsc	status,2,c
  8766  0022C0  D7BF               	goto	i1l3266
  8767  0022C2  0A07               	xorlw	7	; case 4
  8768  0022C4  B4D8               	btfsc	status,2,c
  8769  0022C6  D7C0               	goto	i1l3268
  8770  0022C8  0A01               	xorlw	1	; case 5
  8771  0022CA  B4D8               	btfsc	status,2,c
  8772  0022CC  D7C1               	goto	i1l3270
  8773  0022CE  0A03               	xorlw	3	; case 6
  8774  0022D0  B4D8               	btfsc	status,2,c
  8775  0022D2  D7C2               	goto	i1l3272
  8776  0022D4  0A01               	xorlw	1	; case 7
  8777  0022D6  B4D8               	btfsc	status,2,c
  8778  0022D8  D7C3               	goto	i1l3274
  8779  0022DA  0A0F               	xorlw	15	; case 8
  8780  0022DC  B4D8               	btfsc	status,2,c
  8781  0022DE  D7C4               	goto	i1l3276
  8782  0022E0  0A01               	xorlw	1	; case 9
  8783  0022E2  B4D8               	btfsc	status,2,c
  8784  0022E4  D7C5               	goto	i1l3278
  8785  0022E6  0A03               	xorlw	3	; case 10
  8786  0022E8  B4D8               	btfsc	status,2,c
  8787  0022EA  D7C6               	goto	i1l3280
  8788  0022EC  0A01               	xorlw	1	; case 11
  8789  0022EE  B4D8               	btfsc	status,2,c
  8790  0022F0  D7C7               	goto	i1l3282
  8791  0022F2  0A07               	xorlw	7	; case 12
  8792  0022F4  B4D8               	btfsc	status,2,c
  8793  0022F6  D7C8               	goto	i1l3284
  8794  0022F8  0A01               	xorlw	1	; case 13
  8795  0022FA  B4D8               	btfsc	status,2,c
  8796  0022FC  D7C9               	goto	i1l3286
  8797  0022FE  0A03               	xorlw	3	; case 14
  8798  002300  B4D8               	btfsc	status,2,c
  8799  002302  D7CA               	goto	i1l3288
  8800  002304  0A01               	xorlw	1	; case 15
  8801  002306  B4D8               	btfsc	status,2,c
  8802  002308  D7CB               	goto	i1l3290
  8803  00230A  D000               	goto	i1l233
  8804  00230C                     i1l233:
  8805  00230C  0012               	return		;funcret
  8806  00230E                     __end_ofi1_SetADCChannel:
  8807                           	opt stack 0
  8808                           pclatu	equ	0xFFB
  8809                           pclath	equ	0xFFA
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           intcon	equ	0xFF2
  8817                           intcon2	equ	0xFF1
  8818                           postinc0	equ	0xFEE
  8819                           fsr0h	equ	0xFEA
  8820                           fsr0l	equ	0xFE9
  8821                           wreg	equ	0xFE8
  8822                           fsr1h	equ	0xFE2
  8823                           fsr1l	equ	0xFE1
  8824                           bsr	equ	0xFE0
  8825                           indf2	equ	0xFDF
  8826                           postinc2	equ	0xFDE
  8827                           postdec2	equ	0xFDD
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function i1_SetChanADC *****************
  8833 ;; Defined at:
  8834 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcsetch.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  channel         1    wreg     unsigned char 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  channel         1    1[COMRAM] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;Total ram usage:        2 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    3
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		i1_SetADCChannel
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           	psect	text61
  8863  002D82                     __ptext61:
  8864                           	opt stack 0
  8865  002D82                     i1_SetChanADC:
  8866                           	opt stack 19
  8867                           
  8868                           ;incstack = 0
  8869                           ;i1SetChanADC@channel stored from wreg
  8870  002D82  6E02               	movwf	i1SetChanADC@channel,c
  8871  002D84  CFC2 F001          	movff	4034,??i1_SetChanADC	;volatile
  8872  002D88  0EC3               	movlw	195
  8873  002D8A  1601               	andwf	??i1_SetChanADC,f,c
  8874  002D8C  90D8               	bcf	status,0,c
  8875  002D8E  3002               	rrcf	i1SetChanADC@channel,w,c
  8876  002D90  0B3C               	andlw	60
  8877  002D92  1001               	iorwf	??i1_SetChanADC,w,c
  8878  002D94  6EC2               	movwf	4034,c	;volatile
  8879  002D96  0012               	return		;funcret
  8880  002D98                     __end_ofi1_SetChanADC:
  8881                           	opt stack 0
  8882                           pclatu	equ	0xFFB
  8883                           pclath	equ	0xFFA
  8884                           tblptru	equ	0xFF8
  8885                           tblptrh	equ	0xFF7
  8886                           tblptrl	equ	0xFF6
  8887                           tablat	equ	0xFF5
  8888                           prodh	equ	0xFF4
  8889                           prodl	equ	0xFF3
  8890                           intcon	equ	0xFF2
  8891                           intcon2	equ	0xFF1
  8892                           postinc0	equ	0xFEE
  8893                           fsr0h	equ	0xFEA
  8894                           fsr0l	equ	0xFE9
  8895                           wreg	equ	0xFE8
  8896                           fsr1h	equ	0xFE2
  8897                           fsr1l	equ	0xFE1
  8898                           bsr	equ	0xFE0
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           postdec2	equ	0xFDD
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function i1_ReadADC *****************
  8907 ;; Defined at:
  8908 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;		None
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  2    0[COMRAM] int 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;Total ram usage:        4 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    3
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_isrLP
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text62
  8937  002E1A                     __ptext62:
  8938                           	opt stack 0
  8939  002E1A                     i1_ReadADC:
  8940                           	opt stack 20
  8941                           
  8942                           ;incstack = 0
  8943  002E1A  50C4               	movf	4036,w,c	;volatile
  8944  002E1C  6E03               	movwf	??i1_ReadADC& (0+255),c
  8945  002E1E  50C3               	movf	4035,w,c	;volatile
  8946  002E20  6E01               	movwf	?i1_ReadADC,c
  8947  002E22  C003  F002         	movff	??i1_ReadADC,?i1_ReadADC+1
  8948  002E26  D000               	goto	i1l429
  8949  002E28                     i1l429:
  8950  002E28  0012               	return		;funcret
  8951  002E2A                     __end_ofi1_ReadADC:
  8952                           	opt stack 0
  8953                           pclatu	equ	0xFFB
  8954                           pclath	equ	0xFFA
  8955                           tblptru	equ	0xFF8
  8956                           tblptrh	equ	0xFF7
  8957                           tblptrl	equ	0xFF6
  8958                           tablat	equ	0xFF5
  8959                           prodh	equ	0xFF4
  8960                           prodl	equ	0xFF3
  8961                           intcon	equ	0xFF2
  8962                           intcon2	equ	0xFF1
  8963                           postinc0	equ	0xFEE
  8964                           fsr0h	equ	0xFEA
  8965                           fsr0l	equ	0xFE9
  8966                           wreg	equ	0xFE8
  8967                           fsr1h	equ	0xFE2
  8968                           fsr1l	equ	0xFE1
  8969                           bsr	equ	0xFE0
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           postdec2	equ	0xFDD
  8973                           fsr2h	equ	0xFDA
  8974                           fsr2l	equ	0xFD9
  8975                           status	equ	0xFD8
  8976                           
  8977 ;; *************** function i1_ConvertADC *****************
  8978 ;; Defined at:
  8979 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;		None
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;		None
  8984 ;; Return value:  Size  Location     Type
  8985 ;;		None               void
  8986 ;; Registers used:
  8987 ;;		None
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;Total ram usage:        0 bytes
  8998 ;; Hardware stack levels used:    1
  8999 ;; Hardware stack levels required when called:    3
  9000 ;; This function calls:
  9001 ;;		Nothing
  9002 ;; This function is called by:
  9003 ;;		_isrLP
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	text63
  9008  002E8E                     __ptext63:
  9009                           	opt stack 0
  9010  002E8E                     i1_ConvertADC:
  9011                           	opt stack 20
  9012                           
  9013                           ;incstack = 0
  9014  002E8E  82C2               	bsf	4034,1,c	;volatile
  9015  002E90  0012               	return		;funcret
  9016  002E92                     __end_ofi1_ConvertADC:
  9017                           	opt stack 0
  9018                           pclatu	equ	0xFFB
  9019                           pclath	equ	0xFFA
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           prodh	equ	0xFF4
  9025                           prodl	equ	0xFF3
  9026                           intcon	equ	0xFF2
  9027                           intcon2	equ	0xFF1
  9028                           postinc0	equ	0xFEE
  9029                           fsr0h	equ	0xFEA
  9030                           fsr0l	equ	0xFE9
  9031                           wreg	equ	0xFE8
  9032                           fsr1h	equ	0xFE2
  9033                           fsr1l	equ	0xFE1
  9034                           bsr	equ	0xFE0
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _isrHP *****************
  9043 ;; Defined at:
  9044 ;;		line 500 in file "FastBuggy17_Main_Code.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;		None
  9049 ;; Return value:  Size  Location     Type
  9050 ;;		None               void
  9051 ;; Registers used:
  9052 ;;		wreg, status,2, status,0, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9061 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9062 ;;Total ram usage:       14 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    2
  9065 ;; This function calls:
  9066 ;;		_MillisecondTimerISR
  9067 ;; This function is called by:
  9068 ;;		Interrupt level 2
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	intcode
  9073  000008                     __pintcode:
  9074                           	opt stack 0
  9075  000008                     _isrHP:
  9076                           	opt stack 19
  9077                           
  9078                           ;incstack = 0
  9079  000008  CFFA F01A          	movff	pclath,??_isrHP
  9080  00000C  CFFB F01B          	movff	pclatu,??_isrHP+1
  9081  000010  CFE9 F01C          	movff	fsr0l,??_isrHP+2
  9082  000014  ED4B  F014         	call	int_func,f	;refresh shadow registers
  9083                           pclatu	equ	0xFFB
  9084                           pclath	equ	0xFFA
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           intcon2	equ	0xFF1
  9093                           postinc0	equ	0xFEE
  9094                           fsr0h	equ	0xFEA
  9095                           fsr0l	equ	0xFE9
  9096                           wreg	equ	0xFE8
  9097                           fsr1h	equ	0xFE2
  9098                           fsr1l	equ	0xFE1
  9099                           bsr	equ	0xFE0
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107                           	psect	intcode_body
  9108  002896                     __pintcode_body:
  9109                           	opt stack 19
  9110  002896                     int_func:
  9111                           	opt stack 19
  9112  002896  0006               	pop		; remove dummy address from shadow register refresh
  9113  002898  CFEA F01D          	movff	fsr0h,??_isrHP+3
  9114  00289C  CFE1 F01E          	movff	fsr1l,??_isrHP+4
  9115  0028A0  CFE2 F01F          	movff	fsr1h,??_isrHP+5
  9116  0028A4  CFD9 F020          	movff	fsr2l,??_isrHP+6
  9117  0028A8  CFDA F021          	movff	fsr2h,??_isrHP+7
  9118  0028AC  CFF3 F022          	movff	prodl,??_isrHP+8
  9119  0028B0  CFF4 F023          	movff	prodh,??_isrHP+9
  9120  0028B4  CFF6 F024          	movff	tblptrl,??_isrHP+10
  9121  0028B8  CFF7 F025          	movff	tblptrh,??_isrHP+11
  9122  0028BC  CFF8 F026          	movff	tblptru,??_isrHP+12
  9123  0028C0  CFF5 F027          	movff	tablat,??_isrHP+13
  9124                           
  9125                           ;FastBuggy17_Main_Code.c: 503: if (INTCONbits.TMR0IF == 1) {
  9126  0028C4  A4F2               	btfss	intcon,2,c	;volatile
  9127  0028C6  D004               	goto	i2l304
  9128                           
  9129                           ;FastBuggy17_Main_Code.c: 504: INTCONbits.TMR0IF = 0;
  9130  0028C8  94F2               	bcf	intcon,2,c	;volatile
  9131                           
  9132                           ;FastBuggy17_Main_Code.c: 506: MillisecondTimerISR();
  9133  0028CA  ECF3  F016         	call	_MillisecondTimerISR	;wreg free
  9134  0028CE  D000               	goto	i2l304
  9135  0028D0                     i2l304:
  9136  0028D0  C027  FFF5         	movff	??_isrHP+13,tablat
  9137  0028D4  C026  FFF8         	movff	??_isrHP+12,tblptru
  9138  0028D8  C025  FFF7         	movff	??_isrHP+11,tblptrh
  9139  0028DC  C024  FFF6         	movff	??_isrHP+10,tblptrl
  9140  0028E0  C023  FFF4         	movff	??_isrHP+9,prodh
  9141  0028E4  C022  FFF3         	movff	??_isrHP+8,prodl
  9142  0028E8  C021  FFDA         	movff	??_isrHP+7,fsr2h
  9143  0028EC  C020  FFD9         	movff	??_isrHP+6,fsr2l
  9144  0028F0  C01F  FFE2         	movff	??_isrHP+5,fsr1h
  9145  0028F4  C01E  FFE1         	movff	??_isrHP+4,fsr1l
  9146  0028F8  C01D  FFEA         	movff	??_isrHP+3,fsr0h
  9147  0028FC  C01C  FFE9         	movff	??_isrHP+2,fsr0l
  9148  002900  C01B  FFFB         	movff	??_isrHP+1,pclatu
  9149  002904  C01A  FFFA         	movff	??_isrHP,pclath
  9150  002908  0011               	retfie		f
  9151  00290A                     __end_of_isrHP:
  9152                           	opt stack 0
  9153                           pclatu	equ	0xFFB
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           postinc0	equ	0xFEE
  9164                           fsr0h	equ	0xFEA
  9165                           fsr0l	equ	0xFE9
  9166                           wreg	equ	0xFE8
  9167                           fsr1h	equ	0xFE2
  9168                           fsr1l	equ	0xFE1
  9169                           bsr	equ	0xFE0
  9170                           indf2	equ	0xFDF
  9171                           postinc2	equ	0xFDE
  9172                           postdec2	equ	0xFDD
  9173                           fsr2h	equ	0xFDA
  9174                           fsr2l	equ	0xFD9
  9175                           status	equ	0xFD8
  9176                           
  9177 ;; *************** function _MillisecondTimerISR *****************
  9178 ;; Defined at:
  9179 ;;		line 22 in file "MillisecondTimer.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;		None
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;		None               void
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0, cstack
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;Total ram usage:        0 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    1
  9200 ;; This function calls:
  9201 ;;		i2_WriteTimer0
  9202 ;; This function is called by:
  9203 ;;		_isrHP
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text65
  9208  002DE6                     __ptext65:
  9209                           	opt stack 0
  9210  002DE6                     _MillisecondTimerISR:
  9211                           	opt stack 19
  9212                           
  9213                           ;MillisecondTimer.c: 24: WriteTimer0(63036);
  9214                           
  9215                           ;incstack = 0
  9216  002DE6  0EF6               	movlw	246
  9217  002DE8  6E17               	movwf	i2WriteTimer0@timer0+1,c
  9218  002DEA  0E3C               	movlw	60
  9219  002DEC  6E16               	movwf	i2WriteTimer0@timer0,c
  9220  002DEE  ECFC  F016         	call	i2_WriteTimer0	;wreg free
  9221                           
  9222                           ;MillisecondTimer.c: 25: millisecond_COUNT++;
  9223  002DF2  4A33               	infsnz	_millisecond_COUNT,f,c	;volatile
  9224  002DF4  2A34               	incf	_millisecond_COUNT+1,f,c	;volatile
  9225  002DF6  0012               	return		;funcret
  9226  002DF8                     __end_of_MillisecondTimerISR:
  9227                           	opt stack 0
  9228                           pclatu	equ	0xFFB
  9229                           pclath	equ	0xFFA
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon2	equ	0xFF1
  9238                           postinc0	equ	0xFEE
  9239                           fsr0h	equ	0xFEA
  9240                           fsr0l	equ	0xFE9
  9241                           wreg	equ	0xFE8
  9242                           fsr1h	equ	0xFE2
  9243                           fsr1l	equ	0xFE1
  9244                           bsr	equ	0xFE0
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function i2_WriteTimer0 *****************
  9253 ;; Defined at:
  9254 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0write.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  timer0          2   21[COMRAM] unsigned int 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  WriteTimer0     2   23[COMRAM] struct Timers
  9259 ;; Return value:  Size  Location     Type
  9260 ;;		None               void
  9261 ;; Registers used:
  9262 ;;		None
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;Total ram usage:        4 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; This function calls:
  9275 ;;		Nothing
  9276 ;; This function is called by:
  9277 ;;		_MillisecondTimerISR
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           	psect	text66
  9282  002DF8                     __ptext66:
  9283                           	opt stack 0
  9284  002DF8                     i2_WriteTimer0:
  9285                           	opt stack 19
  9286                           
  9287                           ;incstack = 0
  9288  002DF8  C016  F018         	movff	i2WriteTimer0@timer0,i2WriteTimer0@timer
  9289  002DFC  C017  F019         	movff	i2WriteTimer0@timer0+1,i2WriteTimer0@timer+1
  9290  002E00  C019  FFD7         	movff	i2WriteTimer0@timer+1,4055	;volatile
  9291  002E04  C018  FFD6         	movff	i2WriteTimer0@timer,4054	;volatile
  9292  002E08  0012               	return		;funcret
  9293  002E0A                     __end_ofi2_WriteTimer0:
  9294                           	opt stack 0
  9295                           pclatu	equ	0xFFB
  9296                           pclath	equ	0xFFA
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           intcon	equ	0xFF2
  9304                           intcon2	equ	0xFF1
  9305                           postinc0	equ	0xFEE
  9306                           fsr0h	equ	0xFEA
  9307                           fsr0l	equ	0xFE9
  9308                           wreg	equ	0xFE8
  9309                           fsr1h	equ	0xFE2
  9310                           fsr1l	equ	0xFE1
  9311                           bsr	equ	0xFE0
  9312                           indf2	equ	0xFDF
  9313                           postinc2	equ	0xFDE
  9314                           postdec2	equ	0xFDD
  9315                           fsr2h	equ	0xFDA
  9316                           fsr2l	equ	0xFD9
  9317                           status	equ	0xFD8
  9318                           pclatu	equ	0xFFB
  9319                           pclath	equ	0xFFA
  9320                           tblptru	equ	0xFF8
  9321                           tblptrh	equ	0xFF7
  9322                           tblptrl	equ	0xFF6
  9323                           tablat	equ	0xFF5
  9324                           prodh	equ	0xFF4
  9325                           prodl	equ	0xFF3
  9326                           intcon	equ	0xFF2
  9327                           intcon2	equ	0xFF1
  9328                           postinc0	equ	0xFEE
  9329                           fsr0h	equ	0xFEA
  9330                           fsr0l	equ	0xFE9
  9331                           wreg	equ	0xFE8
  9332                           fsr1h	equ	0xFE2
  9333                           fsr1l	equ	0xFE1
  9334                           bsr	equ	0xFE0
  9335                           indf2	equ	0xFDF
  9336                           postinc2	equ	0xFDE
  9337                           postdec2	equ	0xFDD
  9338                           fsr2h	equ	0xFDA
  9339                           fsr2l	equ	0xFD9
  9340                           status	equ	0xFD8
  9341                           
  9342                           	psect	rparam
  9343  0000                     pclatu	equ	0xFFB
  9344                           pclath	equ	0xFFA
  9345                           tblptru	equ	0xFF8
  9346                           tblptrh	equ	0xFF7
  9347                           tblptrl	equ	0xFF6
  9348                           tablat	equ	0xFF5
  9349                           prodh	equ	0xFF4
  9350                           prodl	equ	0xFF3
  9351                           intcon	equ	0xFF2
  9352                           intcon2	equ	0xFF1
  9353                           postinc0	equ	0xFEE
  9354                           fsr0h	equ	0xFEA
  9355                           fsr0l	equ	0xFE9
  9356                           wreg	equ	0xFE8
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           bsr	equ	0xFE0
  9360                           indf2	equ	0xFDF
  9361                           postinc2	equ	0xFDE
  9362                           postdec2	equ	0xFDD
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    57
    Data        0
    BSS         62
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      71
    BANK0           160     97     129
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    sensor_readings_ptr	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), sensor_readings_raw(COMRAM[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isrHP in COMRAM

    _MillisecondTimerISR->i2_WriteTimer0

Critical Paths under _isrLP in COMRAM

    _isrLP->i1_ReadADC
    i1_SetADCChannel->i1_SetChanADC

Critical Paths under _main in BANK0

    _main->_CalculateSensorSums
    _SetDCMotorPID->_SetDCMotorL
    _SetDCMotorPID->_SetDCMotorR
    _SetDCMotorR->_SetDCPWM4
    _SetDCMotorL->_SetDCPWM5
    _ResetMillis->_WriteTimer0
    _ConfigureTimer2->_OpenTimer2
    _ConfigureTimer0->_WriteTimer0
    _ConfigurePWM->_OpenPWM4
    _ConfigurePWM->_OpenPWM5
    _ConfigureADC->_OpenADC
    _ChangeMode->_Delay10KTCYx
    _CalibrateLine->_NormaliseSensorReadings
    _GetSensorReadings->_SetADCChannel
    _SetADCChannel->_SetChanADC
    _CalculateSensorSums->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack

Critical Paths under _isrHP in BANK0

    None.

Critical Paths under _isrLP in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isrHP in BANK1

    None.

Critical Paths under _isrLP in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isrHP in BANK2

    None.

Critical Paths under _isrLP in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isrHP in BANK3

    None.

Critical Paths under _isrLP in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isrHP in BANK4

    None.

Critical Paths under _isrLP in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isrHP in BANK5

    None.

Critical Paths under _isrLP in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isrHP in BANK6

    None.

Critical Paths under _isrLP in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isrHP in BANK7

    None.

Critical Paths under _isrLP in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isrHP in BANK8

    None.

Critical Paths under _isrLP in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isrHP in BANK9

    None.

Critical Paths under _isrLP in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isrHP in BANK10

    None.

Critical Paths under _isrLP in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isrHP in BANK11

    None.

Critical Paths under _isrLP in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isrHP in BANK12

    None.

Critical Paths under _isrLP in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isrHP in BANK13

    None.

Critical Paths under _isrLP in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isrHP in BANK14

    None.

Critical Paths under _isrLP in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isrHP in BANK15

    None.

Critical Paths under _isrLP in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   76243
                                             91 BANK0      6     6      0
                      _BusySensorAcq
               _CalculateSensorError
            _CalculateSensorStatuses
                _CalculateSensorSums
                      _CalibrateLine
                   _CalibrateSensors
                         _ChangeMode
                       _ConfigureADC
                   _ConfigureBuggyIO
                _ConfigureInterrupts
                       _ConfigurePWM
                    _ConfigureTimer0
                    _ConfigureTimer2
                       _Delay10KTCYx
                       _EnableMotors
                   _EnableSensorLEDS
                  _GetSensorReadings
            _NormaliseSensorReadings
                         _ReadMillis
                        _ResetMillis
                        _SetDCMotorL
                      _SetDCMotorPID
                        _SetDCMotorR
                _SetDirectionForward
                        _SetUnipolar
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SetUnipolar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetDirectionForward                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetDCMotorPID                                        4     2      2    1068
                                              8 BANK0      4     2      2
                        _SetDCMotorL
                        _SetDCMotorR
 ---------------------------------------------------------------------------------
 (1) _SetDCMotorR                                          2     0      2     455
                                              6 BANK0      2     0      2
                          _SetDCPWM4
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM4                                            6     4      2     164
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _SetDCMotorL                                          2     0      2     455
                                              6 BANK0      2     0      2
                          _SetDCPWM5
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM5                                            6     4      2     164
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ResetMillis                                          0     0      0     262
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (1) _ReadMillis                                           2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _EnableSensorLEDS                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EnableMotors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureTimer2                                      0     0      0      62
                         _OpenTimer2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer2                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureTimer0                                      0     0      0     324
                         _OpenTimer0
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     262
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigurePWM                                         0     0      0     124
                           _OpenPWM4
                           _OpenPWM5
 ---------------------------------------------------------------------------------
 (2) _OpenPWM5                                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenPWM4                                             1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureInterrupts                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureBuggyIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureADC                                         0     0      0     347
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     347
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _ChangeMode                                           0     0      0      31
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (1) _Delay10KTCYx                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CalibrateSensors                                     3     3      0     192
                                              3 BANK0      3     3      0
                      _BusySensorAcq
                  _GetSensorReadings
 ---------------------------------------------------------------------------------
 (1) _CalibrateLine                                        4     4      0     415
                                              5 BANK0      4     4      0
                            _BusyADC
                      _BusySensorAcq
                         _ConvertADC
                  _GetSensorReadings
            _NormaliseSensorReadings
                            _ReadADC
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _NormaliseSensorReadings                              5     5      0     161
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _GetSensorReadings                                    0     0      0      62
                         _ConvertADC
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (2) _SetADCChannel                                        1     1      0      62
                                              2 BANK0      1     1      0
                         _SetChanADC
 ---------------------------------------------------------------------------------
 (3) _SetChanADC                                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusySensorAcq                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CalculateSensorSums                                  5     5      0   71276
                                             86 BANK0      5     5      0
                            ___ftmul
                            ___fttol
                           ___lbtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   64352
                                             69 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   21117
                                             51 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   34751
                                             60 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     354
                                             51 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    8951
                                             52 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     582
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     464
                                             27 BANK0     15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     718
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2529
                                             42 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7    9459
                                             39 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     622
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3968
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4541
                                             39 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4225
                                             27 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     260
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2900
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2523
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2427
                                              8 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2291
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2260
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _CalculateSensorStatuses                              4     4      0     161
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _CalculateSensorError                                 3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isrLP                                               17    17      0      44
                                              4 COMRAM    17    17      0
                       i1_ConvertADC
                          i1_ReadADC
                    i1_SetADCChannel
 ---------------------------------------------------------------------------------
 (8) i1_SetADCChannel                                      1     1      0      44
                                              2 COMRAM     1     1      0
                       i1_SetChanADC
 ---------------------------------------------------------------------------------
 (9) i1_SetChanADC                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i1_ReadADC                                            4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _isrHP                                              14    14      0     131
                                             25 COMRAM    14    14      0
                _MillisecondTimerISR
 ---------------------------------------------------------------------------------
 (11) _MillisecondTimerISR                                 0     0      0     131
                      i2_WriteTimer0
 ---------------------------------------------------------------------------------
 (12) i2_WriteTimer0                                       4     2      2     131
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusySensorAcq
   _CalculateSensorError
   _CalculateSensorStatuses
   _CalculateSensorSums
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lltoft (ARG)
         ___ftpack
       _exp (ARG)
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _CalibrateLine
     _BusyADC
     _BusySensorAcq
     _ConvertADC
     _GetSensorReadings
       _ConvertADC
       _SetADCChannel
         _SetChanADC
     _NormaliseSensorReadings
     _ReadADC
     _SetADCChannel
       _SetChanADC
   _CalibrateSensors
     _BusySensorAcq
     _GetSensorReadings
       _ConvertADC
       _SetADCChannel
         _SetChanADC
   _ChangeMode
     _Delay10KTCYx
   _ConfigureADC
     _OpenADC
   _ConfigureBuggyIO
   _ConfigureInterrupts
   _ConfigurePWM
     _OpenPWM4
     _OpenPWM5
   _ConfigureTimer0
     _OpenTimer0
     _WriteTimer0
   _ConfigureTimer2
     _OpenTimer2
   _Delay10KTCYx
   _EnableMotors
   _EnableSensorLEDS
   _GetSensorReadings
     _ConvertADC
     _SetADCChannel
       _SetChanADC
   _NormaliseSensorReadings
   _ReadMillis
   _ResetMillis
     _WriteTimer0
   _SetDCMotorL
     _SetDCPWM5
   _SetDCMotorPID
     _SetDCMotorL
       _SetDCPWM5
     _SetDCMotorR
       _SetDCPWM4
   _SetDCMotorR
     _SetDCPWM4
   _SetDirectionForward
   _SetUnipolar
   ___wmul

 _isrLP (ROOT)
   i1_ConvertADC
   i1_ReadADC
   i1_SetADCChannel
     i1_SetChanADC

 _isrHP (ROOT)
   _MillisecondTimerISR
     i2_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     61      81       5       80.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      47       1       74.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      32        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 21 19:25:15 2017

                    ___altoft@exp 0092                     ___altoft@sign 0093  
                              bsr 000FE0               ___wmul@multiplicand 0062  
                     __CFG_BORV$0 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_OSC$HS 000000  
                    __CFG_CP4$OFF 000000                      __CFG_CP5$OFF 000000  
                    ___ftadd@exp1 0086                      ___ftadd@exp2 0085  
                    __CFG_CP6$OFF 000000                      __CFG_CP7$OFF 000000  
                    ___ftadd@sign 0084                               l233 2222  
                             l244 2894                               l252 297A  
                             l500 2C58                               l421 281C  
                             l271 29EA                               l239 2E18  
                             l264 2722                               l281 248C  
                             l451 2C9C                               l276 25E0  
                             l348 2A54                               l429 2DD2  
                             l453 2CA6                               l286 2416  
                             l554 2CC4                               l555 2CC6  
                             l477 2C74                               l590 2BAC  
                             l399 2E60                               l815 2D04  
                             l912 1E2C                               l808 2AEC  
                             l923 1DF4                               l499 2C56  
                             l687 2682                               l952 10A4  
                             l953 12B8                               l956 10DE  
                             l958 1108                               l967 11EC  
                             l984 1A9A                               l976 1216  
                             l993 23DA                               l987 1A62  
                             l999 1958                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                               _PR4 000F77  
                    __CFG_CPD$OFF 000000            __size_of_SetDCMotorPID 006A  
            __size_of_WriteTimer0 0012                               _exp 12BA  
                             _log 1A9C                               _pow 14E2  
                   _SetADCChannel 2136                               prod 000FF3  
                             wreg 000FE8       __end_of_CalculateSensorSums 25E2  
                    __CFG_MODE$MC 000000         ??_CalculateSensorStatuses 0060  
                    __CFG_LVP$OFF 000000                      ___ftdiv@cntr 0071  
                    ___ftdiv@sign 0076                      __CFG_WDT$OFF 000000  
                      _ChangeMode 2C0E                              l1020 1D0C  
                            l1016 2AA4                              l1200 253A  
                            l1009 2BD0                              l1204 1F42  
                            l1222 1BDA                              l1056 2C0C  
                            l1160 167A                              l1180 14E0  
                            l1164 166E                              l1183 1390  
                            l1192 203E                              l1184 14D4  
                            l1089 27A2                              l1194 2032  
                            l4102 2548                              l4120 23E2  
                            l4040 2910                              l4008 2CEC  
                            l4114 25DA                              l4106 2552  
                            l4140 241E                              l4132 2406  
                            l4124 23EE                              l2604 1C06  
                            l4060 2694                              l4044 2920  
                            l3502 10FE                              l2622 1C8A  
                            l4144 242A                              l4128 23FA  
                            l3440 1DA2                              l3432 1D3E  
                            l3520 1180                              l3512 1140  
                            l2640 1CFA                              l2632 1CBC  
                            l4080 271C                              l4072 26C4  
                            l4048 292A                              l4240 16DC  
                            l4232 16C6                              l4154 2444  
                            l4090 298C                              l3450 1E00  
                            l3442 1DD4                              l3434 1D4E  
                            l3530 11CC                              l3522 1190  
                            l2634 1CCE                              l2626 1C9E  
                            l4066 26B0                              l4156 2480  
                            l4148 2436                              l3444 1DE4  
                            l3436 1D80                              l3428 1D28  
                            l3532 11DC                              l3524 119C  
                            l3604 2350                              l2628 1CA6  
                            l2636 1CDC                              l4076 26CE  
                            l4236 16D0                              l4228 16BA  
                            l4094 29CC                              l4086 2982  
                            l3702 2AC4                              l3518 1170  
                            l3614 23D6                              l4270 1778  
                            l4254 170E                              l4096 29E4  
                            l3456 1E1E                              l3560 184E  
                            l3608 2392                              l3720 1F7E  
                            l4256 1714                              l3538 1242  
                            l3490 10B2                              l3474 260E  
                            l3626 24C2                              l3810 1ADC  
                            l4186 2A2C                              l4282 17D6  
                            l4274 1782                              l3652 19BE  
                            l3548 1292                              l3564 1862  
                            l3476 2620                              l3724 1F92  
                            l2780 1EA8                              l2772 1E42  
                            l3804 1AAE                              l4284 17DC  
                            l3646 1984                              l3582 18D2  
                            l3558 1828                              l3750 215C  
                            l3742 213C                              l4286 17F4  
                            l4278 17D0                              l3672 1A20  
                            l3648 19AA                              l3496 10EC  
                            l3592 1916                              l3736 208E  
                            l3728 1FB0                              l2792 1EDA  
                            l3832 1320                              l3760 2184  
                            l3752 2164                              l3744 2144  
                            l3682 1A74                              l3690 2A7A  
                            l3586 18EE                              l3578 18B2  
                            l3738 211C                              l3826 12DC  
                            l3770 21AC                              l3762 218C  
                            l3754 216C                              l3746 214C  
                            l3922 2C7E                              l3596 1932  
                            l3588 18F6                              l2796 1EF0  
                            l3860 14A4                              l3772 21B4  
                            l3764 2194                              l3756 2174  
                            l3748 2154                              l3790 272C  
                            l2798 1F34                              l3838 135A  
                            l3766 219C                              l3758 217C  
                            l3950 2826                              l3792 273E  
                            l3856 1492                              l3768 21A4  
                            l3776 21BC                              l3954 2830  
                            ?_exp 009C                              ?_log 0093  
                            l3992 15BE                              l3984 1546  
                            l3978 1524                              l3996 15E6  
                            ?_pow 00A5                              u3000 24F4  
                            u3011 1970                              u3110 1FA2  
                            u3031 199A                              u3008 24F8  
                            _LATE 000F8D                              u3220 1364  
                            u3230 1366                              _LATJ 000F91  
                            u3145 2B3C                              u3155 2AF8  
                            u3340 2E14                              u2701 1070  
                            u1741 1BF2                              u3430 15A0  
                            u1760 1C2C                              u3380 2E5C  
                            u3524 270E                              u2901 1814  
                            u1765 1C22                              u3525 2708  
                            u2921 183E                              u2691 1052  
                            u1980 1E74                              u3664 17C2  
                            u3665 17BC                              u1988 1E78  
                            u3697 2CF4                              _TMR2 000FCC  
       __size_of_ConfigureBuggyIO 001A                              _main 167C  
        __end_of_EnableSensorLEDS 2E86           _NormaliseSensorReadings 2820  
                    ___ftpack@arg 0060                      ___ftpack@exp 0063  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              exp@x 009C  
                            log@x 0093            __size_ofi2_WriteTimer0 0012  
                            pclat 000FFA                              pow@x 00A5  
                            pow@y 00A8                              prodh 000FF4  
                            prodl 000FF3                              start 00E0  
                   __CFG_IESO$OFF 000000               _ConfigureInterrupts 2D98  
                   _BusySensorAcq 2E0A      __end_of_CalculateSensorError 248E  
            __end_of_EnableMotors 2E8A                     __CFG_MCLRE$ON 000000  
                    ___ftmul@cntr 0079                      ___param_bank 000010  
                    ___ftmul@sign 007A                   __end_of_BusyADC 2E62  
                 __end_of_ReadADC 2DD4                   __end_of_OpenADC 2820  
                    ___fttol@exp1 0089                             ??_exp 009F  
                           ??_log 0096                      ___fttol@lval 0085  
                           ??_pow 00AB                     ??_SetDCMotorL 0068  
                   ??_SetDCMotorR 0068                     __CFG_WAIT$OFF 000000  
                           ?_main 0001                   __end_of___ftadd 12BA  
                 __end_of___ftdiv 1A9C                   __end_of___ftneg 2BDE  
                 __end_of___ftmul 195A                             _T0CON 000FD5  
                 __end_of___ftsub 2AA6                   __end_of___fttol 1D0E  
                           _T2CON 000FCA                             i1l310 009A  
                           i1l233 230C                             i1l429 2E28  
                           i2l304 28D0                    ?_SetADCChannel 0001  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISG 000F98  
                           _TRISJ 000F9A              ?_ConfigureInterrupts 0001  
           __size_of_Delay10KTCYx 001E                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                CalibrateLine@index 0068  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                     __CFG_WRT4$OFF 000000  
                   __CFG_WRT5$OFF 000000                      ___lltoft@exp 0070  
                   __CFG_WRT6$OFF 000000                     __CFG_WRT7$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                    __CFG_EBTR4$OFF 000000  
                  __CFG_EBTR5$OFF 000000                    __CFG_EBTR6$OFF 000000  
                  __CFG_EBTR7$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                     ___awtoft@sign 006B  
              __size_ofi1_ReadADC 0010                             _floor 1F44  
                           _isrHP 0008                             _ldexp 1E2E  
                           _isrLP 0018                             _frexp 248E  
                           _errno 00DD                     ___ftpack@sign 0064  
                      _ConvertADC 2E8A                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             pow@yi 00B2  
                           status 000FD8                     _SetDCMotorPID 29EC  
                  ?_BusySensorAcq 0001                       exp@exponent 00A2  
               _millisecond_COUNT 0033                   _ConfigureTimer0 2D56  
                 _ConfigureTimer2 2E6C                       ldexp@newexp 0096  
                 __initialization 2CCA                       log@exponent 0096  
                      _ReadMillis 2E62                      __end_of_main 17FE  
                    _Delay10KTCYx 2CE8                  __end_of_OpenPWM4 2CA8  
                __end_of_OpenPWM5 2C82                            ??_main 00BB  
            __end_of_ConfigureADC 2DC0                     ___fttol@sign1 0084  
                   i2_WriteTimer0 2DF8              __end_of_ConfigurePWM 2E54  
                   __activetblptr 000003             ??_ConfigureInterrupts 0060  
                      _SetChanADC 2D06               __end_of_SetDCMotorL 2E46  
             __end_of_SetDCMotorR 2E38                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                          ?_floor 0094                            ?_isrHP 0001  
                          ?_ldexp 0093                            ?_isrLP 0001  
                          ?_frexp 0060                  __end_of___altoft 2684  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   ??_SetUnipolar 0060            __size_of_CalibrateLine 00A0  
                          _CCPR4L 000F74                            _CCPR5L 000F71  
                     ?_ChangeMode 0001                   i1_SetADCChannel 2224  
                __end_of___awtoft 2AEE                  __end_of___ftpack 1E2E  
       ??_NormaliseSensorReadings 0060                     ??_ResetMillis 0064  
                __end_of___lbtoft 2C0E                  __end_of___lltoft 27A4  
                          i1l3330 0092                            i1l3260 2228  
                          i1l3270 2250                            i1l3262 2230  
                          i1l3280 2278                            i1l3272 2258  
                          i1l3264 2238                            i1l3290 22A0  
                          i1l3282 2280                            i1l3274 2260  
                          i1l3266 2240                            i1l3284 2288  
                          i1l3276 2268                            i1l3268 2248  
                          i1l3286 2290                            i1l3278 2270  
                          i1l3294 22A8                   __CFG_BBSIZ$BB2K 000000  
                          i1l3288 2298                        _OpenTimer0 2C36  
                      _OpenTimer2 2CA8                __size_of_SetDCPWM4 0044  
              __size_of_SetDCPWM5 0044                    ?_SetDCMotorPID 0068  
                       ??_BusyADC 0060                         ??_ReadADC 0062  
                _CalibrateSensors 290A               _SetDirectionForward 2E7A  
                       ??_OpenADC 0062            CalculateSensorSums@sum 00B9  
      _sensor_readings_normalised 00CB                    __CFG_XINST$OFF 000000  
                          ___ftge 230E                 __end_ofi1_ReadADC 2E2A  
                          ___wmul 2B76               _sensor_readings_raw 003C  
             _sensor_readings_ptr 0046                         ??___ftadd 0081  
                       ??___ftdiv 006E                         ??___ftneg 0063  
                       ??___ftmul 0072                         ??___ftsub 008D  
                       ??___fttol 007F                  OpenTimer0@config 0060  
                OpenTimer2@config 0060                            clear_0 2CD0  
                          clear_1 2CDC                   ??_SetADCChannel 0062  
                  ?i2_WriteTimer0 0016                            floor@i 0097  
                          floor@x 0094             ___ftmul@f3_as_product 0076  
            ?_SetDirectionForward 0001                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              _CalculateSensorError 23DC  
                     ?_ConvertADC 0001           __end_of_ConfigureTimer0 2D6C  
                __end_ofexp@coeff 101F           __end_of_ConfigureTimer2 2E74  
                _ConfigureBuggyIO 2D24                  __end_oflog@coeff 103A  
                      __accesstop 0060           __end_of__initialization 2CE2  
                      ___altoft@c 008A             __size_of_EnableMotors 0004  
                 ??_BusySensorAcq 0060                        ___ftadd@f1 007B  
                      ___ftadd@f2 007E                        ___ftge@ff1 0060  
                      ___ftge@ff2 0063                      eval_poly@res 0090  
                   ___rparam_used 000001                        ___ftdiv@f1 0068  
                      ___ftdiv@f2 006B                        ___ftdiv@f3 0072  
             __end_of_SetUnipolar 2E7A                        ___ftneg@f1 0060  
             __end_of_ResetMillis 2D56                        ___awtoft@c 0068  
                      ___lbtoft@c 006B                        ___ftmul@f1 006C  
                      ___ftmul@f2 006F                        ___ftsub@f1 0087  
                      ___ftsub@f2 008A                        ___fttol@f1 007B  
                  __pcstackCOMRAM 0001                       ?_ReadMillis 0060  
                   _CalibrateLine 2684                        ___lltoft@c 0068  
                   __end_of_floor 2040                     __end_of_isrHP 290A  
                   __end_of_ldexp 1F44                     __end_of_isrLP 00E0  
                   __end_of_frexp 253C               __size_of_ChangeMode 0028  
                     _SetDCMotorL 2E38                       _SetDCMotorR 2E2A  
               __end_of_SetDCPWM4 2B32                 __end_of_SetDCPWM5 2B76  
           ??_SetDirectionForward 0060               i1SetChanADC@channel 0002  
                     ?_SetChanADC 0001           __end_ofi1_SetADCChannel 230E  
                 _sensor_acq_done 0039       __end_of_MillisecondTimerISR 2DF8  
    CalculateSensorStatuses@index 0063             ?_CalculateSensorError 0060  
                    _EnableMotors 2E86                           ??_floor 0097  
                         ??_isrHP 001A                           ??_ldexp 0098  
                         ??_isrLP 0005                           ??_frexp 0065  
                      __pbssBANK0 00C1                   ??_SetDCMotorPID 006A  
                     ?_OpenTimer0 0001                       ?_OpenTimer2 0001  
              __size_of_eval_poly 00F6                        __pnvCOMRAM 0046  
               ?_EnableSensorLEDS 0001                         ?_OpenPWM4 0001  
                       ?_OpenPWM5 0001                ??_EnableSensorLEDS 0060  
         CalculateSensorError@sum 0062                    ?_CalibrateLine 0001  
                         ?___ftge 0060             __size_of_ConfigureADC 0014  
                         ?___wmul 0060             __size_of_ConfigurePWM 000E  
                 ??i2_WriteTimer0 0018                           _CCP4CON 000F73  
                         _CCP5CON 000F70                  WriteTimer0@timer 0062  
                       ?___altoft 008A                     ??_WriteTimer0 0062  
             __size_of_ConvertADC 0004                         ?___awtoft 0068  
                       ?___ftpack 0060                         ?___lbtoft 0068  
                       ?___lltoft 0068               __size_of_ReadMillis 000A  
                     _SetUnipolar 2E74                       _ResetMillis 2D3E  
          SetDCMotorPID@PIDoutput 0068                  ?_ConfigureTimer0 0001  
                ?_ConfigureTimer2 0001                        _convert_cm 00D5  
                      _convert_in 00D8      __size_of_CalculateSensorSums 00A6  
                    _ConfigureADC 2DAC                           _BusyADC 2E54  
                         _ReadADC 2DC0                      _ConfigurePWM 2E46  
             i2WriteTimer0@timer0 0016                        ??_OpenPWM4 0060  
                      ??_OpenPWM5 0060                           _OpenADC 27A4  
                         __Hparam 0000               __size_of_SetChanADC 001E  
                         __Lparam 0000                   __size_of___ftge 00CE  
                         ___ftadd 103C                           ___ftdiv 195A  
                         ___ftneg 2BAE                   __size_of___wmul 0038  
                         ___ftmul 17FE                           ___ftsub 2A56  
                         ___fttol 1BDC                     ?i1_ConvertADC 0001  
                    __psmallconst 1000                        ??___altoft 008E  
                 __CFG_STVREN$OFF 000000                           __pcinit 2CCA  
                      ??___awtoft 006B                        ??___ftpack 0065  
                      ??___lbtoft 006B                 __end_of_eval_poly 2136  
                         __ramtop 1000               __size_of_OpenTimer0 0026  
             __size_of_OpenTimer2 0022                        ??___lltoft 006C  
                         __ptext0 167C                           __ptext1 2E74  
                         __ptext2 2E7A                           __ptext3 29EC  
                         __ptext4 2E2A                           __ptext5 2AEE  
                         __ptext6 2E38                           __ptext7 2B32  
                         __ptext8 2D3E                           __ptext9 2E62  
                       _T0CONbits 000FD5          ?_CalculateSensorStatuses 0001  
                       _T1CONbits 000FCD                         _T2CONbits 000FCA  
        __end_of_CalibrateSensors 297C                      __size_of_exp 0228  
                    __size_of_log 0140            ??_CalculateSensorError 0062  
                    __size_of_pow 019A                  ?i1_SetADCChannel 0001  
                       _T3CONbits 000FB1                         _T4CONbits 000F76  
             __end_of_WriteTimer0 2DE6             CalibrateSensors@index 0065  
                  OpenADC@config2 0060                      ??_ChangeMode 0062  
                  __pintcode_body 2896                 _GetSensorReadings 2D6C  
            end_of_initialization 2CE2                           exp@sign 00A4  
                  main@sensor_sum 00BE                ?_GetSensorReadings 0001  
                         int_func 2896                     ?i1_SetChanADC 0001  
                 ??_CalibrateLine 0065                           pow@sign 00B1  
             ??_GetSensorReadings 0063                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                  ??i1_ConvertADC 0001                         _PID_error 00DF  
     __end_of_ConfigureInterrupts 2DAC          __end_of_ConfigureBuggyIO 2D3E  
              __end_of_ChangeMode 2C36                         i1_ReadADC 2E1A  
                       _PORTBbits 000F81                         _TRISGbits 000F98  
       __end_of_GetSensorReadings 2D82                      ??_ConvertADC 0060  
                     ___ftdiv@exp 0075                    ??i1_SetChanADC 0001  
          i1SetADCChannel@channel 0003                       ___ftmul@exp 0075  
           SetDCMotorL@duty_cycle 0066                      ??_ReadMillis 0062  
            _second_rollover_flag 0038   __end_of_CalculateSensorStatuses 29EC  
                  __end_of___ftge 23DC                    __end_of___wmul 2BAE  
                    ?_SetDCMotorL 0066                      ?_SetDCMotorR 0066  
                     _WriteTimer0 2DD4                        ?i1_ReadADC 0001  
              __end_of_ConvertADC 2E8E                        floor@expon 009A  
           __end_of_SetADCChannel 2224                      ??_SetChanADC 0060  
             start_initialization 2CCA          ?_NormaliseSensorReadings 0001  
                      eval_poly@d 008A                        eval_poly@n 008C  
                      eval_poly@x 0087                        ldexp@value 0093  
                       _SetDCPWM4 2AEE                         _SetDCPWM5 2B32  
                     __end_of_exp 14E2                       __end_of_log 1BDC  
                     __end_of_pow 167C                   SetDCPWM4@DCycle 0064  
                 SetDCPWM5@DCycle 0064                __end_of_ReadMillis 2E6C  
                    ??_OpenTimer0 0060                      ??_OpenTimer2 0060  
                   _echo_acq_done 0037                        frexp@value 0060  
                     _SystemClock 0028                  _sensor_acq_index 003A  
           __end_of_BusySensorAcq 2E1A              SetADCChannel@channel 0062  
              __end_of_SetChanADC 2D24                 __size_of_OpenPWM4 0026  
               __size_of_OpenPWM5 0026                          ??___ftge 0066  
                        ??___wmul 0064       __end_of_SetDirectionForward 2E80  
                __CFG_LPT1OSC$OFF 000000         __size_of_EnableSensorLEDS 0006  
             _CalculateSensorSums 253C                __end_of_OpenTimer0 2C5C  
              __end_of_OpenTimer2 2CCA                 __size_of___altoft 00A2  
               __size_of___awtoft 0048                 __size_of___ftpack 0120  
               __size_of___lbtoft 0030                 __size_of___lltoft 0080  
                     __pbssCOMRAM 0028                     __pcstackBANK0 0060  
                      ?_SetDCPWM4 0060                        ?_SetDCPWM5 0060  
      __size_of_GetSensorReadings 0016                      ?_SetUnipolar 0001  
            __end_ofi1_ConvertADC 2E92                      ?_ResetMillis 0001  
    __size_of_MillisecondTimerISR 0012              ?_CalculateSensorSums 0001  
           __end_of_SetDCMotorPID 2A56                          ?_BusyADC 0001  
                        ?_ReadADC 0060                 OpenADC@portconfig 0061  
                        ?_OpenADC 0060                    _sensor_offsets 00C1  
               __CFG_CCP2MX$PORTC 000000                         __pintcode 0008  
                        ?___ftadd 007B                          ?___ftdiv 0068  
                        ?___ftneg 0060                          ?___ftmul 006C  
                        ?___ftsub 0087                          ?___fttol 007B  
                   ?_Delay10KTCYx 0001                       __pintcodelo 0018  
           __end_ofi2_WriteTimer0 2E0A   __end_of_NormaliseSensorReadings 2896  
                     ??i1_ReadADC 0003                  _sensor_threshold 0035  
                     __smallconst 1000                 WriteTimer0@timer0 0060  
            __end_ofi1_SetChanADC 2D98                         _eval_poly 2040  
              i2WriteTimer0@timer 0018                 ?_CalibrateSensors 0001  
              ??_CalibrateSensors 0063                    __size_of_floor 00FC  
                  __size_of_isrHP 2902                    __size_of_ldexp 0116  
                  __size_of_isrLP 00C8                    __size_of_frexp 00AE  
           ??_CalculateSensorSums 00B6  __size_of_CalculateSensorStatuses 0070  
                  ___wmul@product 0064                     OpenADC@config 0064  
                        _LATDbits 000F8C                          _LATEbits 000F8D  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E             __CFG_DATABW$DATA16BIT 000000  
                        _RCONbits 000FD0          __size_of_ConfigureTimer0 0016  
        __size_of_ConfigureTimer2 0008                  __CFG_WDTPS$32768 000000  
                  ??_Delay10KTCYx 0060             SetDCMotorR@duty_cycle 0066  
               __CFG_ECCPMX$PORTH 000000                        _ADCON0bits 000FC2  
               ?_ConfigureBuggyIO 0001                 ___wmul@multiplier 0060  
            __size_of_SetDCMotorL 000E              __size_of_SetDCMotorR 000E  
              ??_ConfigureBuggyIO 0060                         main@index 00C0  
                      ?_eval_poly 0087                       ??_SetDCPWM4 0062  
                     ??_SetDCPWM5 0062                  Delay10KTCYx@unit 0061  
   __size_of_CalculateSensorError 00B2          CalculateSensorSums@index 00BA  
                     _INTCON2bits 000FF1          __size_ofi1_SetADCChannel 00EA  
                       frexp@eptr 0063                          _OpenPWM4 2C82  
                        _OpenPWM5 2C5C                  __size_of_BusyADC 000E  
                __size_of_ReadADC 0014                          __Hrparam 0000  
                __size_of_OpenADC 007C                          __Lrparam 0000  
           __end_of_CalibrateLine 2724          _CalculateSensorSums$2805 00B6  
                __size_of___ftadd 027E                  __size_of___ftdiv 0142  
                __size_of___ftneg 0030                          ___altoft 25E2  
                __size_of___ftmul 015C                  __size_of___ftsub 0050  
                __size_of___fttol 0132                      ?_WriteTimer0 0060  
                        ___awtoft 2AA6                          ___ftpack 1D0E  
                        ___lbtoft 2BDE                  _EnableSensorLEDS 2E80  
                        ___lltoft 2724               _system_clock_enable 003B  
                        _exp$2808 009F      __size_of_ConfigureInterrupts 0014  
           __size_ofi1_ConvertADC 0004                     ?_EnableMotors 0001  
              SetDCPWM4@dutycycle 0060                    OpenPWM4@period 0060  
                        __ptext10 2E80                          __ptext11 2E86  
                        __ptext20 2D98                          __ptext12 2E6C  
                        __ptext21 2D24                          __ptext13 2CA8  
                        __ptext30 2D6C                          __ptext22 2DAC  
                        __ptext14 2D56                     _sensor_status 002E  
                        __ptext31 2136                          __ptext23 27A4  
                        __ptext15 2DD4                          __ptext40 1E2E  
                        __ptext32 2D06                          __ptext24 2C0E  
                        __ptext16 2C36                          __ptext41 1F44  
                        __ptext33 2E8A                          __ptext25 2CE8  
                        __ptext17 2E46                          __ptext50 103C  
                        __ptext42 248E                          __ptext34 2E0A  
                        __ptext26 290A                          __ptext18 2C5C  
                        __ptext51 2BAE                          __ptext43 1BDC  
                        __ptext35 2E54                          __ptext27 2684  
                        __ptext19 2C82                          __ptext60 2224  
                        __ptext52 195A                          __ptext44 230E  
                        __ptext36 253C                          __ptext28 2DC0  
                        __ptext61 2D82                          __ptext53 2AA6  
                        __ptext45 25E2                          __ptext37 14E2  
                        __ptext29 2820                          __ptext62 2E1A  
                        __ptext54 2724                          __ptext46 2040  
                        __ptext38 1A9C                          __ptext63 2E8E  
                        __ptext55 2BDE                          __ptext47 2B76  
                        __ptext39 12BA                          __ptext56 1D0E  
                        __ptext48 17FE                          __ptext65 2DE6  
                        __ptext57 297C                          __ptext49 2A56  
                        __ptext66 2DF8                          __ptext58 23DC  
                  OpenPWM5@period 0060                          _pow$2806 00AB  
                        _pow$2807 00AE                SetDCPWM5@dutycycle 0060  
            __size_of_SetUnipolar 0006                     __size_of_main 0182  
            __size_of_ResetMillis 0018  __size_of_NormaliseSensorReadings 0076  
           __size_ofi1_SetChanADC 0016                      i1_ConvertADC 2E8E  
             _MillisecondTimerISR 2DE6                 ??_ConfigureTimer0 0064  
               ??_ConfigureTimer2 0061                          exp@coeff 1001  
                        log@coeff 101F             __CFG_ADDRBW$ADDR20BIT 000000  
    NormaliseSensorReadings@index 0064                        _INTCONbits 000FF2  
                     ??_eval_poly 008E                    ??_EnableMotors 0060  
            __end_of_Delay10KTCYx 2D06              ?_MillisecondTimerISR 0001  
                        intlevel1 0000                          intlevel2 0000  
         _CalculateSensorStatuses 297C                     ?_ConfigureADC 0001  
                   ?_ConfigurePWM 0001                 SetChanADC@channel 0061  
                    i1_SetChanADC 2D82            __size_of_SetADCChannel 00EE  
               ??i1_SetADCChannel 0003                        _PID_output 00DB  
    __size_of_SetDirectionForward 0006            __size_of_BusySensorAcq 0010  
           ??_MillisecondTimerISR 001A                    ??_ConfigureADC 0065  
                  ??_ConfigurePWM 0061         __size_of_CalibrateSensors 0072  
